<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ixout&#39;s blog</title>
  
  
  <link href="https://ixout.github.io/atom.xml" rel="self"/>
  
  <link href="https://ixout.github.io/"/>
  <updated>2023-03-15T14:25:49.317Z</updated>
  <id>https://ixout.github.io/</id>
  
  <author>
    <name>ixout</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>堆学习笔记</title>
    <link href="https://ixout.github.io/posts/8932/"/>
    <id>https://ixout.github.io/posts/8932/</id>
    <published>2023-03-02T14:31:03.000Z</published>
    <updated>2023-03-15T14:25:49.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近搭建博客花了不少时间，期间对堆的学习就搁置了，现在既然博客搭建完毕，就要利用起来了，刚好用来记录自己的堆学习过程</p><hr><h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>ctfwiki的内容讲的已经很细了，不过还是推荐看一看华庭大佬的<a href="https://pan.baidu.com/s/167Z3CHDEeP1dl3c2Ii0lXg?pwd=1234">glibc内存管理-ptmalloc2源码分析</a>,看了之后真的能有很多收获.</p><h2 id="堆是啥"><a href="#堆是啥" class="headerlink" title="堆是啥"></a>堆是啥</h2><blockquote><p>在程序运行过程中，堆可以提供动态分配的内存，允许程序申请大小未知的内存。堆其实就是程序虚拟地址空间的一块连续的线性区域，它由低地址向高地址方向增长。我们一般称管理堆的那部分程序为堆管理器。</p><p>堆管理器处于用户程序与内核中间，主要做以下工作</p><ul><li>响应用户的申请内存请求，向操作系统申请内存，然后将其返回给用户程序。同时，为了保持内存管理的高效性，内核一般都会预先分配很大的一块连续的内存，然后让堆管理器通过某种算法管理这块内存。只有当出现了堆空间不足的情况，堆管理器才会再次与操作系统进行交互。</li><li>管理用户所释放的内存。一般来说，用户释放的内存并不是直接返还给操作系统的，而是由堆管理器进行管理。这些释放的内存可以来响应用户新申请的内存的请求。</li></ul><p>引自ctf—wiki</p></blockquote><p>数据结构中也有堆这么个东西，但与这个堆关系不大(大概)</p><h2 id="堆的组成"><a href="#堆的组成" class="headerlink" title="堆的组成"></a>堆的组成</h2><p>在Linux下，glibc的堆是由多个arena组成的，每个arena是一个线程专用的内存池，用于管理内存块的分配和释放。每个arena又由多个subheap组成，每个subheap是一段连续的内存区域，用于存储多个同样大小的内存块。在subheap内部，使用了多种数据结构和技术来管理不同大小的内存块，以提高内存分配和管理的效率。</p><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><h3 id="malloc流程"><a href="#malloc流程" class="headerlink" title="malloc流程"></a>malloc流程</h3><hr><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/1678786338164.png" alt="malloc"></p><h3 id="free流程"><a href="#free流程" class="headerlink" title="free流程"></a>free流程</h3><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/1678786338155.png" alt="free"></p><h1 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h1><ul><li>fastbin的堆块结构与常规的chunk是完全一样，除了使用的是单链表。</li><li>每个bin元素都只占一个指针的长度，指向对应链表的头节点。每个bin所指向的链表可以被称为是一个freelist。在glibc中，free list是一个通用的术语，用来描述维护空闲块的一组数据结构。每个bin中维护的空闲块链表实际上就是一个free list的具体实现。</li><li>heap是用于存储堆内存的虚拟内存区域，而arena是管理heap的数据结构。arena是heap的一个子部分。glibc下arena被实现为结构体。</li><li>在glibc中，每个空闲内存块都是一个结构体。这个结构体在glibc的源码中被称为”mchunk”。堆管理时，指针指向的一般都是chunk的起始地址。</li><li>subheap是arena的一个子部分,在glibc中，arena是一个线程专用的内存池，每个线程拥有一个arena。arena又包含多个subheap，每个subheap是一个内存段，用于存储多个同样大小的内存块。subheap中的内存块可以被分配给应用程序使用，也可以被释放回subheap中进行重复利用。</li><li>在glibc的malloc实现中，subheap是一个中间层的数据结构，用于管理多个subsegment。每个subsegment又包含多个内存块和一系列的bin和free list。</li><li>在glibc中，每个arena都有自己的独立的bin数组，用于管理不同大小的内存块，以提高内存分配和回收的效率。</li></ul><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>最后，不得不说chatgpt确实是神器，许多难以理解的概念都可以问他，特别是一些搜索引擎搜不到的细节，虽然不一定对(<del>其实可以说是经常出错:(</del> ),但如果仔细甄别，二次询问之后，的的确确能够解决不少困惑。</p>]]></content>
    
    
    <summary type="html">一个字：就TM让人头大</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="堆" scheme="https://ixout.github.io/tags/%E5%A0%86/"/>
    
    <category term="学习记录" scheme="https://ixout.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
